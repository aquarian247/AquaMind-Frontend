name: Frontend CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm run test:ci

    - name: Generate Coverage Report
      run: |
        echo "üìä Generating coverage report..."
        npx vitest run --coverage
      continue-on-error: true

    - name: Fetch Latest API Spec
      run: |
        mkdir -p tmp/openapi
        curl -sSfL -o tmp/openapi/openapi.yaml \
             https://raw.githubusercontent.com/aquarian247/AquaMind/main/api/openapi.yaml

    - name: Regenerate API Client
      run: npm run generate:api

    - name: Sync OpenAPI spec for validation
      run: |
        mkdir -p api
        cp tmp/openapi/openapi.yaml api/openapi.yaml

    - name: Type check (validate API contract)
      run: npm run type-check
    
    # ------------------------------------------------------------------
    # Contract enforcement ‚Äì ensure every endpoint used in the codebase
    # exists in the backend OpenAPI specification.  The spec should have
    # been copied into ./api/openapi.yaml by the sync-openapi workflow.
    # ------------------------------------------------------------------
    # NOTE: During Phase 1 we only WARN on failures so the pipeline keeps
    # moving.  Once legacy endpoints are removed in Phase 2 the guard can
    # be made blocking again (remove `continue-on-error` and `|| true`).
    - name: Validate API endpoints
      run: |
        # Check if OpenAPI spec exists (it should be copied by regenerate-api-client workflow)
        if [ -f "api/openapi.yaml" ]; then
          echo "‚úÖ OpenAPI spec found, validating endpoints..."
          npm run validate:endpoints
        else
          echo "‚ö†Ô∏è OpenAPI spec not found, skipping endpoint validation"
          echo "To enable validation, ensure api/openapi.yaml is present"
        fi

    - name: Analyze Code Complexity
      run: |
        echo "üîç Running complexity analysis..."
        python3 -m lizard client/src --exclude 'client/src/api/generated/**/*' -o docs/metrics/frontend_lizard_latest.txt
        python3 -m lizard client/src/components client/src/pages --exclude 'client/src/api/generated/**/*' -o docs/metrics/frontend_lizard_components_latest.txt

        echo "üìä Complexity analysis completed. Checking for violations..."
        if python3 -m lizard client/src --exclude 'client/src/api/generated/**/*' --CCN 15 --length 300 2>&1 | grep -q "CCN.*1[5-9]\|CCN.*[2-9][0-9]\|length.*30[0-9]\|length.*[4-9][0-9][0-9]"; then
          echo "‚ö†Ô∏è Complexity violations detected, but continuing (warn-only mode)"
          echo "Review the generated metrics files for details"
          echo "Current threshold: CCN > 15 or function length > 300 lines"
        else
          echo "‚úÖ No complexity violations detected"
        fi

        echo "üßπ Cleaning up old metrics files..."
        find docs/metrics -name 'frontend_lizard_*.txt' -mtime +7 -delete 2>/dev/null || true

    - name: Upload Complexity Metrics
      uses: actions/upload-artifact@v4
      with:
        name: complexity-metrics
        path: |
          docs/metrics/frontend_lizard_latest.txt
          docs/metrics/frontend_lizard_components_latest.txt
        retention-days: 30

    - name: Build
      run: npm run build
      
    - name: Report contract validation status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Contract validation passed - all types compile successfully"
        else
          echo "‚ùå Contract validation failed - type errors detected"
          exit 1
        fi
