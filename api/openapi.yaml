openapi: 3.0.3
info:
  title: AquaMind API
  version: v1
  description: Unified OpenAPI 3.1 specification for the AquaMind backend.
paths:
  /api/:
    get:
      operationId: api_retrieve
      description: Return a structured overview of all available API endpoints.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          description: No response body
        '500':
          description: Internal Server Error
  /health-check/:
    get:
      operationId: health_check_retrieve
      description: Health check endpoint for monitoring API availability and basic
        system status.
      summary: API Health Check
      tags:
      - System
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
          description: ''
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/auth/token/:
    post:
      operationId: api_v1_auth_token_create
      description: Custom view for obtaining auth tokens that also returns user info
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
        '500':
          description: Internal Server Error
  /api/v1/auth/dev-auth/:
    get:
      operationId: api_v1_auth_dev_auth_retrieve
      description: Development-only endpoint that returns an auth token without credentials.
        **Disabled in production.**
      tags:
      - auth
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
          description: ''
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      security:
      - {}
  /api/v1/environmental/parameters/:
    get:
      operationId: api_v1_environmental_parameters_list
      description: ViewSet for viewing and editing EnvironmentalParameter instances.
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: unit
        schema:
          type: string
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEnvironmentalParameterList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_environmental_parameters_create
      description: ViewSet for viewing and editing EnvironmentalParameter instances.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentalParameter'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EnvironmentalParameter'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EnvironmentalParameter'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentalParameter'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/environmental/parameters/{id}/:
    get:
      operationId: api_v1_environmental_parameters_retrieve
      description: ViewSet for viewing and editing EnvironmentalParameter instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this environmental parameter.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentalParameter'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_environmental_parameters_partial_update
      description: ViewSet for viewing and editing EnvironmentalParameter instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this environmental parameter.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEnvironmentalParameter'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEnvironmentalParameter'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEnvironmentalParameter'
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentalParameter'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_environmental_parameters_destroy
      description: ViewSet for viewing and editing EnvironmentalParameter instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this environmental parameter.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_environmental_parameters_update
      description: ViewSet for viewing and editing EnvironmentalParameter instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this environmental parameter.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentalParameter'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EnvironmentalParameter'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EnvironmentalParameter'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentalParameter'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/environmental/readings/:
    get:
      operationId: api_v1_environmental_readings_list
      description: |-
        ViewSet for viewing and editing EnvironmentalReading instances.

        Includes special filtering and aggregation methods for time-series data.
      parameters:
      - in: query
        name: batch
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: container
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: is_manual
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: parameter
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: sensor
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEnvironmentalReadingList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_environmental_readings_create
      description: |-
        ViewSet for viewing and editing EnvironmentalReading instances.

        Includes special filtering and aggregation methods for time-series data.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentalReading'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EnvironmentalReading'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EnvironmentalReading'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentalReading'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/environmental/readings/recent/:
    get:
      operationId: api_v1_environmental_readings_recent_retrieve
      description: Return the most recent readings for each parameter-container combination.
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentalReading'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/environmental/readings/stats/:
    get:
      operationId: api_v1_environmental_readings_stats_retrieve
      description: Return aggregated statistics for readings based on query parameters.
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentalReading'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/environmental/readings/{id}/:
    get:
      operationId: api_v1_environmental_readings_retrieve
      description: |-
        ViewSet for viewing and editing EnvironmentalReading instances.

        Includes special filtering and aggregation methods for time-series data.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this environmental reading.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentalReading'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_environmental_readings_partial_update
      description: |-
        ViewSet for viewing and editing EnvironmentalReading instances.

        Includes special filtering and aggregation methods for time-series data.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this environmental reading.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEnvironmentalReading'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEnvironmentalReading'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEnvironmentalReading'
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentalReading'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_environmental_readings_destroy
      description: |-
        ViewSet for viewing and editing EnvironmentalReading instances.

        Includes special filtering and aggregation methods for time-series data.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this environmental reading.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_environmental_readings_update
      description: |-
        ViewSet for viewing and editing EnvironmentalReading instances.

        Includes special filtering and aggregation methods for time-series data.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this environmental reading.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentalReading'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EnvironmentalReading'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EnvironmentalReading'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentalReading'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/environmental/photoperiod/:
    get:
      operationId: api_v1_environmental_photoperiod_list
      description: ViewSet for viewing and editing PhotoperiodData instances.
      parameters:
      - in: query
        name: area
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: date
        schema:
          type: string
          format: date
      - in: query
        name: is_interpolated
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPhotoperiodDataList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_environmental_photoperiod_create
      description: ViewSet for viewing and editing PhotoperiodData instances.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhotoperiodData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PhotoperiodData'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PhotoperiodData'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoperiodData'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/environmental/photoperiod/{id}/:
    get:
      operationId: api_v1_environmental_photoperiod_retrieve
      description: ViewSet for viewing and editing PhotoperiodData instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this photoperiod data.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoperiodData'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_environmental_photoperiod_partial_update
      description: ViewSet for viewing and editing PhotoperiodData instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this photoperiod data.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPhotoperiodData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPhotoperiodData'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPhotoperiodData'
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoperiodData'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_environmental_photoperiod_destroy
      description: ViewSet for viewing and editing PhotoperiodData instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this photoperiod data.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_environmental_photoperiod_update
      description: ViewSet for viewing and editing PhotoperiodData instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this photoperiod data.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhotoperiodData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PhotoperiodData'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PhotoperiodData'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoperiodData'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/environmental/weather/:
    get:
      operationId: api_v1_environmental_weather_list
      description: |-
        ViewSet for viewing and editing WeatherData instances.

        Includes special filtering and aggregation methods for time-series data.
      parameters:
      - in: query
        name: area
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedWeatherDataList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_environmental_weather_create
      description: |-
        ViewSet for viewing and editing WeatherData instances.

        Includes special filtering and aggregation methods for time-series data.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WeatherData'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WeatherData'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherData'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/environmental/weather/recent/:
    get:
      operationId: api_v1_environmental_weather_recent_retrieve
      description: Return the most recent weather data for each area.
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WeatherData'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/environmental/weather/{id}/:
    get:
      operationId: api_v1_environmental_weather_retrieve
      description: |-
        ViewSet for viewing and editing WeatherData instances.

        Includes special filtering and aggregation methods for time-series data.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this weather data.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherData'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_environmental_weather_partial_update
      description: |-
        ViewSet for viewing and editing WeatherData instances.

        Includes special filtering and aggregation methods for time-series data.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this weather data.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWeatherData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedWeatherData'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedWeatherData'
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherData'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_environmental_weather_destroy
      description: |-
        ViewSet for viewing and editing WeatherData instances.

        Includes special filtering and aggregation methods for time-series data.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this weather data.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_environmental_weather_update
      description: |-
        ViewSet for viewing and editing WeatherData instances.

        Includes special filtering and aggregation methods for time-series data.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this weather data.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WeatherData'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WeatherData'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherData'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/environmental/stage-transitions/:
    get:
      operationId: api_v1_environmental_stage_transitions_list
      description: ViewSet for viewing and editing StageTransitionEnvironmental instances.
      parameters:
      - in: query
        name: batch_transfer
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStageTransitionEnvironmentalList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_environmental_stage_transitions_create
      description: ViewSet for viewing and editing StageTransitionEnvironmental instances.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StageTransitionEnvironmental'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StageTransitionEnvironmental'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StageTransitionEnvironmental'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StageTransitionEnvironmental'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/environmental/stage-transitions/{id}/:
    get:
      operationId: api_v1_environmental_stage_transitions_retrieve
      description: ViewSet for viewing and editing StageTransitionEnvironmental instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this stage transition environmental.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StageTransitionEnvironmental'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_environmental_stage_transitions_partial_update
      description: ViewSet for viewing and editing StageTransitionEnvironmental instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this stage transition environmental.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedStageTransitionEnvironmental'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedStageTransitionEnvironmental'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedStageTransitionEnvironmental'
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StageTransitionEnvironmental'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_environmental_stage_transitions_destroy
      description: ViewSet for viewing and editing StageTransitionEnvironmental instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this stage transition environmental.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_environmental_stage_transitions_update
      description: ViewSet for viewing and editing StageTransitionEnvironmental instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this stage transition environmental.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StageTransitionEnvironmental'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StageTransitionEnvironmental'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StageTransitionEnvironmental'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StageTransitionEnvironmental'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/species/:
    get:
      operationId: api_v1_batch_species_list
      description: |-
        API endpoint for managing aquaculture Species.

        Provides CRUD operations for species, including filtering by name
        and scientific name, searching across name, scientific name, and description,
        and ordering by name, scientific name, or creation date.
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: scientific_name
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSpeciesList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_batch_species_create
      description: |-
        API endpoint for managing aquaculture Species.

        Provides CRUD operations for species, including filtering by name
        and scientific name, searching across name, scientific name, and description,
        and ordering by name, scientific name, or creation date.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Species'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Species'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Species'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Species'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/species/{id}/:
    get:
      operationId: api_v1_batch_species_retrieve
      description: |-
        API endpoint for managing aquaculture Species.

        Provides CRUD operations for species, including filtering by name
        and scientific name, searching across name, scientific name, and description,
        and ordering by name, scientific name, or creation date.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this species.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Species'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_batch_species_partial_update
      description: |-
        API endpoint for managing aquaculture Species.

        Provides CRUD operations for species, including filtering by name
        and scientific name, searching across name, scientific name, and description,
        and ordering by name, scientific name, or creation date.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this species.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSpecies'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSpecies'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSpecies'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Species'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_batch_species_destroy
      description: |-
        API endpoint for managing aquaculture Species.

        Provides CRUD operations for species, including filtering by name
        and scientific name, searching across name, scientific name, and description,
        and ordering by name, scientific name, or creation date.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this species.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_batch_species_update
      description: |-
        API endpoint for managing aquaculture Species.

        Provides CRUD operations for species, including filtering by name
        and scientific name, searching across name, scientific name, and description,
        and ordering by name, scientific name, or creation date.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this species.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Species'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Species'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Species'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Species'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/lifecycle-stages/:
    get:
      operationId: api_v1_batch_lifecycle_stages_list
      description: |-
        API endpoint for managing Species Life Cycle Stages.

        Provides CRUD operations for life cycle stages, specific to a species.
        Allows filtering by name, species, and order.
        Supports searching across name, description, and species name.
        Ordering can be done by species name, order, name, or creation date.
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: order
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: species
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLifeCycleStageList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_batch_lifecycle_stages_create
      description: |-
        API endpoint for managing Species Life Cycle Stages.

        Provides CRUD operations for life cycle stages, specific to a species.
        Allows filtering by name, species, and order.
        Supports searching across name, description, and species name.
        Ordering can be done by species name, order, name, or creation date.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LifeCycleStage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LifeCycleStage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LifeCycleStage'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifeCycleStage'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/lifecycle-stages/{id}/:
    get:
      operationId: api_v1_batch_lifecycle_stages_retrieve
      description: |-
        API endpoint for managing Species Life Cycle Stages.

        Provides CRUD operations for life cycle stages, specific to a species.
        Allows filtering by name, species, and order.
        Supports searching across name, description, and species name.
        Ordering can be done by species name, order, name, or creation date.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this life cycle stage.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifeCycleStage'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_batch_lifecycle_stages_partial_update
      description: |-
        API endpoint for managing Species Life Cycle Stages.

        Provides CRUD operations for life cycle stages, specific to a species.
        Allows filtering by name, species, and order.
        Supports searching across name, description, and species name.
        Ordering can be done by species name, order, name, or creation date.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this life cycle stage.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLifeCycleStage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLifeCycleStage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLifeCycleStage'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifeCycleStage'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_batch_lifecycle_stages_destroy
      description: |-
        API endpoint for managing Species Life Cycle Stages.

        Provides CRUD operations for life cycle stages, specific to a species.
        Allows filtering by name, species, and order.
        Supports searching across name, description, and species name.
        Ordering can be done by species name, order, name, or creation date.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this life cycle stage.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_batch_lifecycle_stages_update
      description: |-
        API endpoint for managing Species Life Cycle Stages.

        Provides CRUD operations for life cycle stages, specific to a species.
        Allows filtering by name, species, and order.
        Supports searching across name, description, and species name.
        Ordering can be done by species name, order, name, or creation date.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this life cycle stage.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LifeCycleStage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LifeCycleStage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LifeCycleStage'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifeCycleStage'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/batches/:
    get:
      operationId: api_v1_batch_batches_list
      description: |-
        Retrieve a list of batches.

        Supports filtering by fields like `batch_number`, `species`, `lifecycle_stage`, `status`, and `batch_type`.
        Supports searching across `batch_number`, `species__name`, `lifecycle_stage__name`, `notes`, and `batch_type`.
        Supports ordering by `batch_number`, `start_date`, `species__name`, `lifecycle_stage__name`, and `created_at`.
      parameters:
      - in: query
        name: batch_number
        schema:
          type: string
      - in: query
        name: batch_type
        schema:
          type: string
          x-spec-enum-id: e0ac211a2e181f56
          enum:
          - MIXED
          - STANDARD
        description: |-
          * `STANDARD` - Standard
          * `MIXED` - Mixed Population
      - in: query
        name: lifecycle_stage
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: species
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: status
        schema:
          type: string
          x-spec-enum-id: be4893b9f73c6949
          enum:
          - ACTIVE
          - COMPLETED
          - TERMINATED
        description: |-
          * `ACTIVE` - Active
          * `COMPLETED` - Completed
          * `TERMINATED` - Terminated
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBatchList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_batch_batches_create
      description: |-
        Create a new batch.

        Requires details such as `batch_number`, `species`, `lifecycle_stage`, `status`, `batch_type`, and `start_date`.
        `expected_end_date` will default to 30 days after `start_date` if not provided.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Batch'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Batch'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Batch'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/batches/compare/:
    get:
      operationId: api_v1_batch_batches_compare_retrieve
      description: |-
        Compare metrics between multiple batches.

        Query parameters:
        - batch_ids: Comma-separated list of batch IDs to compare
        - metrics: Comma-separated list of metrics to include (default: all)
          Options: growth, mortality, biomass, all

        Example URL: /api/v1/batch/batches/compare/?batch_ids=1,2,3&metrics=growth,mortality
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Batch'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/batch/batches/{id}/:
    get:
      operationId: api_v1_batch_batches_retrieve
      description: |-
        API endpoint for comprehensive management of aquaculture Batches.

        Provides full CRUD operations for batches, including detailed filtering,
        searching, and ordering capabilities. Batches represent groups of aquatic
        organisms managed together through their lifecycle.

        **Filtering:**
        - `batch_number`: Exact match.
        - `species`: Exact match by Species ID.
        - `lifecycle_stage`: Exact match by LifeCycleStage ID.
        - `status`: Exact match by status string (e.g., 'ACTIVE', 'PLANNED').
        - `batch_type`: Exact match by type string (e.g., 'PRODUCTION', 'EXPERIMENTAL').

        **Searching:**
        - `batch_number`: Partial match.
        - `species__name`: Partial match on the related Species name.
        - `lifecycle_stage__name`: Partial match on the related LifeCycleStage name.
        - `notes`: Partial match on the batch notes.
        - `batch_type`: Partial match on the batch type.

        **Ordering:**
        - `batch_number`
        - `start_date`
        - `species__name`
        - `lifecycle_stage__name`
        - `created_at` (default: descending)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_batch_batches_partial_update
      description: |-
        API endpoint for comprehensive management of aquaculture Batches.

        Provides full CRUD operations for batches, including detailed filtering,
        searching, and ordering capabilities. Batches represent groups of aquatic
        organisms managed together through their lifecycle.

        **Filtering:**
        - `batch_number`: Exact match.
        - `species`: Exact match by Species ID.
        - `lifecycle_stage`: Exact match by LifeCycleStage ID.
        - `status`: Exact match by status string (e.g., 'ACTIVE', 'PLANNED').
        - `batch_type`: Exact match by type string (e.g., 'PRODUCTION', 'EXPERIMENTAL').

        **Searching:**
        - `batch_number`: Partial match.
        - `species__name`: Partial match on the related Species name.
        - `lifecycle_stage__name`: Partial match on the related LifeCycleStage name.
        - `notes`: Partial match on the batch notes.
        - `batch_type`: Partial match on the batch type.

        **Ordering:**
        - `batch_number`
        - `start_date`
        - `species__name`
        - `lifecycle_stage__name`
        - `created_at` (default: descending)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBatch'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBatch'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBatch'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_batch_batches_destroy
      description: |-
        API endpoint for comprehensive management of aquaculture Batches.

        Provides full CRUD operations for batches, including detailed filtering,
        searching, and ordering capabilities. Batches represent groups of aquatic
        organisms managed together through their lifecycle.

        **Filtering:**
        - `batch_number`: Exact match.
        - `species`: Exact match by Species ID.
        - `lifecycle_stage`: Exact match by LifeCycleStage ID.
        - `status`: Exact match by status string (e.g., 'ACTIVE', 'PLANNED').
        - `batch_type`: Exact match by type string (e.g., 'PRODUCTION', 'EXPERIMENTAL').

        **Searching:**
        - `batch_number`: Partial match.
        - `species__name`: Partial match on the related Species name.
        - `lifecycle_stage__name`: Partial match on the related LifeCycleStage name.
        - `notes`: Partial match on the batch notes.
        - `batch_type`: Partial match on the batch type.

        **Ordering:**
        - `batch_number`
        - `start_date`
        - `species__name`
        - `lifecycle_stage__name`
        - `created_at` (default: descending)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_batch_batches_update
      description: |-
        API endpoint for comprehensive management of aquaculture Batches.

        Provides full CRUD operations for batches, including detailed filtering,
        searching, and ordering capabilities. Batches represent groups of aquatic
        organisms managed together through their lifecycle.

        **Filtering:**
        - `batch_number`: Exact match.
        - `species`: Exact match by Species ID.
        - `lifecycle_stage`: Exact match by LifeCycleStage ID.
        - `status`: Exact match by status string (e.g., 'ACTIVE', 'PLANNED').
        - `batch_type`: Exact match by type string (e.g., 'PRODUCTION', 'EXPERIMENTAL').

        **Searching:**
        - `batch_number`: Partial match.
        - `species__name`: Partial match on the related Species name.
        - `lifecycle_stage__name`: Partial match on the related LifeCycleStage name.
        - `notes`: Partial match on the batch notes.
        - `batch_type`: Partial match on the batch type.

        **Ordering:**
        - `batch_number`
        - `start_date`
        - `species__name`
        - `lifecycle_stage__name`
        - `created_at` (default: descending)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Batch'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Batch'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Batch'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/batches/{id}/growth_analysis/:
    get:
      operationId: api_v1_batch_batches_growth_analysis_retrieve
      description: |-
        Calculate and return growth analysis metrics for a batch over time.

        Returns metrics like:
        - Growth rate over time
        - Weight gain trends
        - SGR (Specific Growth Rate)
        - TGC (Thermal Growth Coefficient) if temperature data is available

        URL: /api/v1/batch/batches/{pk}/growth_analysis/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/batch/batches/{id}/performance_metrics/:
    get:
      operationId: api_v1_batch_batches_performance_metrics_retrieve
      description: |-
        Calculate and return performance metrics for a batch.

        Includes:
        - Mortality rates
        - Growth efficiency
        - Density metrics
        - Current status summary

        URL: /api/v1/batch/batches/{pk}/performance_metrics/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/batch/container-assignments/:
    get:
      operationId: api_v1_batch_container_assignments_list
      description: |-
        API endpoint for managing Batch Container Assignments.

        This endpoint handles the assignment of batches (or parts of batches)
        to specific containers (e.g., tanks, ponds, cages) at a given point in time.
        It records the population count and biomass within that container.
        Provides full CRUD operations for these assignments.

        An assignment can be marked as inactive when a batch is moved out of a container.

        **Filtering:**
        - `batch`: ID of the assigned batch.
        - `container`: ID of the assigned container.
        - `is_active`: Boolean indicating if the assignment is currently active.
        - `assignment_date`: Exact date of the assignment.

        **Searching:**
        - `batch__batch_number`: Batch number of the assigned batch.
        - `container__name`: Name of the assigned container.

        **Ordering:**
        - `assignment_date` (default: descending)
        - `batch__batch_number`
        - `container__name`
        - `population_count`
        - `biomass_kg`
      parameters:
      - in: query
        name: assignment_date
        schema:
          type: string
          format: date
      - in: query
        name: batch
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: container
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: is_active
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBatchContainerAssignmentList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_batch_container_assignments_create
      description: |-
        API endpoint for managing Batch Container Assignments.

        This endpoint handles the assignment of batches (or parts of batches)
        to specific containers (e.g., tanks, ponds, cages) at a given point in time.
        It records the population count and biomass within that container.
        Provides full CRUD operations for these assignments.

        An assignment can be marked as inactive when a batch is moved out of a container.

        **Filtering:**
        - `batch`: ID of the assigned batch.
        - `container`: ID of the assigned container.
        - `is_active`: Boolean indicating if the assignment is currently active.
        - `assignment_date`: Exact date of the assignment.

        **Searching:**
        - `batch__batch_number`: Batch number of the assigned batch.
        - `container__name`: Name of the assigned container.

        **Ordering:**
        - `assignment_date` (default: descending)
        - `batch__batch_number`
        - `container__name`
        - `population_count`
        - `biomass_kg`
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchContainerAssignment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BatchContainerAssignment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BatchContainerAssignment'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchContainerAssignment'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/container-assignments/summary/:
    get:
      operationId: api_v1_batch_container_assignments_summary_retrieve
      description: |-
        Return aggregated metrics about batch-container assignments.

        Query Parameters
        ----------------
        is_active : bool (default ``true``)
            If ``true`` (default) aggregates only active assignments.
            If ``false`` aggregates inactive assignments.

        Response Schema
        ---------------
        {
            "active_biomass_kg": number,
            "count": integer
        }
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchContainerAssignment'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/batch/container-assignments/{id}/:
    get:
      operationId: api_v1_batch_container_assignments_retrieve
      description: |-
        API endpoint for managing Batch Container Assignments.

        This endpoint handles the assignment of batches (or parts of batches)
        to specific containers (e.g., tanks, ponds, cages) at a given point in time.
        It records the population count and biomass within that container.
        Provides full CRUD operations for these assignments.

        An assignment can be marked as inactive when a batch is moved out of a container.

        **Filtering:**
        - `batch`: ID of the assigned batch.
        - `container`: ID of the assigned container.
        - `is_active`: Boolean indicating if the assignment is currently active.
        - `assignment_date`: Exact date of the assignment.

        **Searching:**
        - `batch__batch_number`: Batch number of the assigned batch.
        - `container__name`: Name of the assigned container.

        **Ordering:**
        - `assignment_date` (default: descending)
        - `batch__batch_number`
        - `container__name`
        - `population_count`
        - `biomass_kg`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch container assignment.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchContainerAssignment'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_batch_container_assignments_partial_update
      description: |-
        API endpoint for managing Batch Container Assignments.

        This endpoint handles the assignment of batches (or parts of batches)
        to specific containers (e.g., tanks, ponds, cages) at a given point in time.
        It records the population count and biomass within that container.
        Provides full CRUD operations for these assignments.

        An assignment can be marked as inactive when a batch is moved out of a container.

        **Filtering:**
        - `batch`: ID of the assigned batch.
        - `container`: ID of the assigned container.
        - `is_active`: Boolean indicating if the assignment is currently active.
        - `assignment_date`: Exact date of the assignment.

        **Searching:**
        - `batch__batch_number`: Batch number of the assigned batch.
        - `container__name`: Name of the assigned container.

        **Ordering:**
        - `assignment_date` (default: descending)
        - `batch__batch_number`
        - `container__name`
        - `population_count`
        - `biomass_kg`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch container assignment.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBatchContainerAssignment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBatchContainerAssignment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBatchContainerAssignment'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchContainerAssignment'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_batch_container_assignments_destroy
      description: |-
        API endpoint for managing Batch Container Assignments.

        This endpoint handles the assignment of batches (or parts of batches)
        to specific containers (e.g., tanks, ponds, cages) at a given point in time.
        It records the population count and biomass within that container.
        Provides full CRUD operations for these assignments.

        An assignment can be marked as inactive when a batch is moved out of a container.

        **Filtering:**
        - `batch`: ID of the assigned batch.
        - `container`: ID of the assigned container.
        - `is_active`: Boolean indicating if the assignment is currently active.
        - `assignment_date`: Exact date of the assignment.

        **Searching:**
        - `batch__batch_number`: Batch number of the assigned batch.
        - `container__name`: Name of the assigned container.

        **Ordering:**
        - `assignment_date` (default: descending)
        - `batch__batch_number`
        - `container__name`
        - `population_count`
        - `biomass_kg`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch container assignment.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_batch_container_assignments_update
      description: |-
        API endpoint for managing Batch Container Assignments.

        This endpoint handles the assignment of batches (or parts of batches)
        to specific containers (e.g., tanks, ponds, cages) at a given point in time.
        It records the population count and biomass within that container.
        Provides full CRUD operations for these assignments.

        An assignment can be marked as inactive when a batch is moved out of a container.

        **Filtering:**
        - `batch`: ID of the assigned batch.
        - `container`: ID of the assigned container.
        - `is_active`: Boolean indicating if the assignment is currently active.
        - `assignment_date`: Exact date of the assignment.

        **Searching:**
        - `batch__batch_number`: Batch number of the assigned batch.
        - `container__name`: Name of the assigned container.

        **Ordering:**
        - `assignment_date` (default: descending)
        - `batch__batch_number`
        - `container__name`
        - `population_count`
        - `biomass_kg`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch container assignment.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchContainerAssignment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BatchContainerAssignment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BatchContainerAssignment'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchContainerAssignment'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/batch-compositions/:
    get:
      operationId: api_v1_batch_batch_compositions_list
      description: |-
        API endpoint for managing Batch Compositions.

        This endpoint defines the composition of a 'mixed' batch, detailing what
        percentage and quantity (population/biomass) of it comes from various
        'source' batches. This is crucial for traceability when batches are merged.
        Provides full CRUD operations for batch composition records.

        **Filtering:**
        - `mixed_batch`: ID of the resulting mixed batch.
        - `source_batch`: ID of a source batch contributing to the mixed batch.

        **Searching:**
        - `mixed_batch__batch_number`: Batch number of the mixed batch.
        - `source_batch__batch_number`: Batch number of the source batch.

        **Ordering:**
        - `mixed_batch__batch_number` (default)
        - `source_batch__batch_number`
        - `percentage` (default)
        - `population_count`
        - `biomass_kg`
      parameters:
      - in: query
        name: mixed_batch
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: source_batch
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBatchCompositionList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_batch_batch_compositions_create
      description: |-
        API endpoint for managing Batch Compositions.

        This endpoint defines the composition of a 'mixed' batch, detailing what
        percentage and quantity (population/biomass) of it comes from various
        'source' batches. This is crucial for traceability when batches are merged.
        Provides full CRUD operations for batch composition records.

        **Filtering:**
        - `mixed_batch`: ID of the resulting mixed batch.
        - `source_batch`: ID of a source batch contributing to the mixed batch.

        **Searching:**
        - `mixed_batch__batch_number`: Batch number of the mixed batch.
        - `source_batch__batch_number`: Batch number of the source batch.

        **Ordering:**
        - `mixed_batch__batch_number` (default)
        - `source_batch__batch_number`
        - `percentage` (default)
        - `population_count`
        - `biomass_kg`
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchComposition'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BatchComposition'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BatchComposition'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchComposition'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/batch-compositions/{id}/:
    get:
      operationId: api_v1_batch_batch_compositions_retrieve
      description: |-
        API endpoint for managing Batch Compositions.

        This endpoint defines the composition of a 'mixed' batch, detailing what
        percentage and quantity (population/biomass) of it comes from various
        'source' batches. This is crucial for traceability when batches are merged.
        Provides full CRUD operations for batch composition records.

        **Filtering:**
        - `mixed_batch`: ID of the resulting mixed batch.
        - `source_batch`: ID of a source batch contributing to the mixed batch.

        **Searching:**
        - `mixed_batch__batch_number`: Batch number of the mixed batch.
        - `source_batch__batch_number`: Batch number of the source batch.

        **Ordering:**
        - `mixed_batch__batch_number` (default)
        - `source_batch__batch_number`
        - `percentage` (default)
        - `population_count`
        - `biomass_kg`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch composition.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchComposition'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_batch_batch_compositions_partial_update
      description: |-
        API endpoint for managing Batch Compositions.

        This endpoint defines the composition of a 'mixed' batch, detailing what
        percentage and quantity (population/biomass) of it comes from various
        'source' batches. This is crucial for traceability when batches are merged.
        Provides full CRUD operations for batch composition records.

        **Filtering:**
        - `mixed_batch`: ID of the resulting mixed batch.
        - `source_batch`: ID of a source batch contributing to the mixed batch.

        **Searching:**
        - `mixed_batch__batch_number`: Batch number of the mixed batch.
        - `source_batch__batch_number`: Batch number of the source batch.

        **Ordering:**
        - `mixed_batch__batch_number` (default)
        - `source_batch__batch_number`
        - `percentage` (default)
        - `population_count`
        - `biomass_kg`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch composition.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBatchComposition'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBatchComposition'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBatchComposition'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchComposition'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_batch_batch_compositions_destroy
      description: |-
        API endpoint for managing Batch Compositions.

        This endpoint defines the composition of a 'mixed' batch, detailing what
        percentage and quantity (population/biomass) of it comes from various
        'source' batches. This is crucial for traceability when batches are merged.
        Provides full CRUD operations for batch composition records.

        **Filtering:**
        - `mixed_batch`: ID of the resulting mixed batch.
        - `source_batch`: ID of a source batch contributing to the mixed batch.

        **Searching:**
        - `mixed_batch__batch_number`: Batch number of the mixed batch.
        - `source_batch__batch_number`: Batch number of the source batch.

        **Ordering:**
        - `mixed_batch__batch_number` (default)
        - `source_batch__batch_number`
        - `percentage` (default)
        - `population_count`
        - `biomass_kg`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch composition.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_batch_batch_compositions_update
      description: |-
        API endpoint for managing Batch Compositions.

        This endpoint defines the composition of a 'mixed' batch, detailing what
        percentage and quantity (population/biomass) of it comes from various
        'source' batches. This is crucial for traceability when batches are merged.
        Provides full CRUD operations for batch composition records.

        **Filtering:**
        - `mixed_batch`: ID of the resulting mixed batch.
        - `source_batch`: ID of a source batch contributing to the mixed batch.

        **Searching:**
        - `mixed_batch__batch_number`: Batch number of the mixed batch.
        - `source_batch__batch_number`: Batch number of the source batch.

        **Ordering:**
        - `mixed_batch__batch_number` (default)
        - `source_batch__batch_number`
        - `percentage` (default)
        - `population_count`
        - `biomass_kg`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch composition.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchComposition'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BatchComposition'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BatchComposition'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchComposition'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/transfers/:
    get:
      operationId: api_v1_batch_transfers_list
      description: |-
        API endpoint for managing Batch Transfers.

        Batch transfers record the movement of organisms between batches or changes
        in their lifecycle stage or container assignment within the same batch.
        This endpoint provides full CRUD operations for batch transfers.

        **Filtering:**
        - `source_batch`: ID of the source batch.
        - `destination_batch`: ID of the destination batch.
        - `transfer_type`: Type of transfer (e.g., 'SPLIT', 'MERGE', 'MOVE', 'LIFECYCLE_CHANGE').
        - `source_lifecycle_stage`: ID of the source lifecycle stage.
        - `destination_lifecycle_stage`: ID of the destination lifecycle stage.
        - `source_assignment`: ID of the source batch container assignment.
        - `destination_assignment`: ID of the destination batch container assignment.

        **Searching:**
        - `source_batch__batch_number`: Batch number of the source batch.
        - `destination_batch__batch_number`: Batch number of the destination batch.
        - `notes`: Notes associated with the transfer.

        **Ordering:**
        - `transfer_date` (default: descending)
        - `source_batch__batch_number`
        - `transfer_type`
        - `created_at`
      parameters:
      - in: query
        name: destination_assignment
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: destination_batch
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: destination_lifecycle_stage
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: source_assignment
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: source_batch
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: source_lifecycle_stage
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: transfer_type
        schema:
          type: string
          x-spec-enum-id: 84d720b57a7d7b00
          enum:
          - CONTAINER
          - LIFECYCLE
          - MERGE
          - MIXED_TRANSFER
          - SPLIT
        description: |-
          * `CONTAINER` - Container Transfer
          * `LIFECYCLE` - Lifecycle Stage Change
          * `SPLIT` - Batch Split
          * `MERGE` - Batch Merge
          * `MIXED_TRANSFER` - Mixed Batch Transfer
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBatchTransferList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_batch_transfers_create
      description: |-
        API endpoint for managing Batch Transfers.

        Batch transfers record the movement of organisms between batches or changes
        in their lifecycle stage or container assignment within the same batch.
        This endpoint provides full CRUD operations for batch transfers.

        **Filtering:**
        - `source_batch`: ID of the source batch.
        - `destination_batch`: ID of the destination batch.
        - `transfer_type`: Type of transfer (e.g., 'SPLIT', 'MERGE', 'MOVE', 'LIFECYCLE_CHANGE').
        - `source_lifecycle_stage`: ID of the source lifecycle stage.
        - `destination_lifecycle_stage`: ID of the destination lifecycle stage.
        - `source_assignment`: ID of the source batch container assignment.
        - `destination_assignment`: ID of the destination batch container assignment.

        **Searching:**
        - `source_batch__batch_number`: Batch number of the source batch.
        - `destination_batch__batch_number`: Batch number of the destination batch.
        - `notes`: Notes associated with the transfer.

        **Ordering:**
        - `transfer_date` (default: descending)
        - `source_batch__batch_number`
        - `transfer_type`
        - `created_at`
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchTransfer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BatchTransfer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BatchTransfer'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchTransfer'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/transfers/{id}/:
    get:
      operationId: api_v1_batch_transfers_retrieve
      description: |-
        API endpoint for managing Batch Transfers.

        Batch transfers record the movement of organisms between batches or changes
        in their lifecycle stage or container assignment within the same batch.
        This endpoint provides full CRUD operations for batch transfers.

        **Filtering:**
        - `source_batch`: ID of the source batch.
        - `destination_batch`: ID of the destination batch.
        - `transfer_type`: Type of transfer (e.g., 'SPLIT', 'MERGE', 'MOVE', 'LIFECYCLE_CHANGE').
        - `source_lifecycle_stage`: ID of the source lifecycle stage.
        - `destination_lifecycle_stage`: ID of the destination lifecycle stage.
        - `source_assignment`: ID of the source batch container assignment.
        - `destination_assignment`: ID of the destination batch container assignment.

        **Searching:**
        - `source_batch__batch_number`: Batch number of the source batch.
        - `destination_batch__batch_number`: Batch number of the destination batch.
        - `notes`: Notes associated with the transfer.

        **Ordering:**
        - `transfer_date` (default: descending)
        - `source_batch__batch_number`
        - `transfer_type`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch transfer.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchTransfer'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_batch_transfers_partial_update
      description: |-
        API endpoint for managing Batch Transfers.

        Batch transfers record the movement of organisms between batches or changes
        in their lifecycle stage or container assignment within the same batch.
        This endpoint provides full CRUD operations for batch transfers.

        **Filtering:**
        - `source_batch`: ID of the source batch.
        - `destination_batch`: ID of the destination batch.
        - `transfer_type`: Type of transfer (e.g., 'SPLIT', 'MERGE', 'MOVE', 'LIFECYCLE_CHANGE').
        - `source_lifecycle_stage`: ID of the source lifecycle stage.
        - `destination_lifecycle_stage`: ID of the destination lifecycle stage.
        - `source_assignment`: ID of the source batch container assignment.
        - `destination_assignment`: ID of the destination batch container assignment.

        **Searching:**
        - `source_batch__batch_number`: Batch number of the source batch.
        - `destination_batch__batch_number`: Batch number of the destination batch.
        - `notes`: Notes associated with the transfer.

        **Ordering:**
        - `transfer_date` (default: descending)
        - `source_batch__batch_number`
        - `transfer_type`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch transfer.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBatchTransfer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBatchTransfer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBatchTransfer'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchTransfer'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_batch_transfers_destroy
      description: |-
        API endpoint for managing Batch Transfers.

        Batch transfers record the movement of organisms between batches or changes
        in their lifecycle stage or container assignment within the same batch.
        This endpoint provides full CRUD operations for batch transfers.

        **Filtering:**
        - `source_batch`: ID of the source batch.
        - `destination_batch`: ID of the destination batch.
        - `transfer_type`: Type of transfer (e.g., 'SPLIT', 'MERGE', 'MOVE', 'LIFECYCLE_CHANGE').
        - `source_lifecycle_stage`: ID of the source lifecycle stage.
        - `destination_lifecycle_stage`: ID of the destination lifecycle stage.
        - `source_assignment`: ID of the source batch container assignment.
        - `destination_assignment`: ID of the destination batch container assignment.

        **Searching:**
        - `source_batch__batch_number`: Batch number of the source batch.
        - `destination_batch__batch_number`: Batch number of the destination batch.
        - `notes`: Notes associated with the transfer.

        **Ordering:**
        - `transfer_date` (default: descending)
        - `source_batch__batch_number`
        - `transfer_type`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch transfer.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_batch_transfers_update
      description: |-
        API endpoint for managing Batch Transfers.

        Batch transfers record the movement of organisms between batches or changes
        in their lifecycle stage or container assignment within the same batch.
        This endpoint provides full CRUD operations for batch transfers.

        **Filtering:**
        - `source_batch`: ID of the source batch.
        - `destination_batch`: ID of the destination batch.
        - `transfer_type`: Type of transfer (e.g., 'SPLIT', 'MERGE', 'MOVE', 'LIFECYCLE_CHANGE').
        - `source_lifecycle_stage`: ID of the source lifecycle stage.
        - `destination_lifecycle_stage`: ID of the destination lifecycle stage.
        - `source_assignment`: ID of the source batch container assignment.
        - `destination_assignment`: ID of the destination batch container assignment.

        **Searching:**
        - `source_batch__batch_number`: Batch number of the source batch.
        - `destination_batch__batch_number`: Batch number of the destination batch.
        - `notes`: Notes associated with the transfer.

        **Ordering:**
        - `transfer_date` (default: descending)
        - `source_batch__batch_number`
        - `transfer_type`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch transfer.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchTransfer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BatchTransfer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BatchTransfer'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchTransfer'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/mortality-events/:
    get:
      operationId: api_v1_batch_mortality_events_list
      description: |-
        API endpoint for managing Mortality Events in aquaculture batches.

        Mortality events record the number of deaths in a batch on a specific date,
        along with the suspected cause and any relevant notes. This endpoint
        provides full CRUD operations for mortality events.

        **Filtering:**
        - `batch`: ID of the batch associated with the mortality event.
        - `event_date`: Exact date of the mortality event.
        - `cause`: Suspected cause of mortality (e.g., 'DISEASE', 'PREDATION', 'HANDLING').

        **Searching:**
        - `batch__batch_number`: Batch number of the associated batch.
        - `notes`: Notes associated with the mortality event.

        **Ordering:**
        - `event_date` (default: descending)
        - `batch__batch_number`
        - `count` (number of mortalities)
        - `created_at`
      parameters:
      - in: query
        name: batch
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: cause
        schema:
          type: string
          x-spec-enum-id: b3b2643a63213431
          enum:
          - DISEASE
          - ENVIRONMENTAL
          - HANDLING
          - OTHER
          - PREDATION
          - UNKNOWN
        description: |-
          * `DISEASE` - Disease
          * `HANDLING` - Handling
          * `PREDATION` - Predation
          * `ENVIRONMENTAL` - Environmental
          * `UNKNOWN` - Unknown
          * `OTHER` - Other
      - in: query
        name: event_date
        schema:
          type: string
          format: date
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMortalityEventList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_batch_mortality_events_create
      description: |-
        API endpoint for managing Mortality Events in aquaculture batches.

        Mortality events record the number of deaths in a batch on a specific date,
        along with the suspected cause and any relevant notes. This endpoint
        provides full CRUD operations for mortality events.

        **Filtering:**
        - `batch`: ID of the batch associated with the mortality event.
        - `event_date`: Exact date of the mortality event.
        - `cause`: Suspected cause of mortality (e.g., 'DISEASE', 'PREDATION', 'HANDLING').

        **Searching:**
        - `batch__batch_number`: Batch number of the associated batch.
        - `notes`: Notes associated with the mortality event.

        **Ordering:**
        - `event_date` (default: descending)
        - `batch__batch_number`
        - `count` (number of mortalities)
        - `created_at`
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MortalityEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MortalityEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MortalityEvent'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityEvent'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/mortality-events/{id}/:
    get:
      operationId: api_v1_batch_mortality_events_retrieve
      description: |-
        API endpoint for managing Mortality Events in aquaculture batches.

        Mortality events record the number of deaths in a batch on a specific date,
        along with the suspected cause and any relevant notes. This endpoint
        provides full CRUD operations for mortality events.

        **Filtering:**
        - `batch`: ID of the batch associated with the mortality event.
        - `event_date`: Exact date of the mortality event.
        - `cause`: Suspected cause of mortality (e.g., 'DISEASE', 'PREDATION', 'HANDLING').

        **Searching:**
        - `batch__batch_number`: Batch number of the associated batch.
        - `notes`: Notes associated with the mortality event.

        **Ordering:**
        - `event_date` (default: descending)
        - `batch__batch_number`
        - `count` (number of mortalities)
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this mortality event.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityEvent'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_batch_mortality_events_partial_update
      description: |-
        API endpoint for managing Mortality Events in aquaculture batches.

        Mortality events record the number of deaths in a batch on a specific date,
        along with the suspected cause and any relevant notes. This endpoint
        provides full CRUD operations for mortality events.

        **Filtering:**
        - `batch`: ID of the batch associated with the mortality event.
        - `event_date`: Exact date of the mortality event.
        - `cause`: Suspected cause of mortality (e.g., 'DISEASE', 'PREDATION', 'HANDLING').

        **Searching:**
        - `batch__batch_number`: Batch number of the associated batch.
        - `notes`: Notes associated with the mortality event.

        **Ordering:**
        - `event_date` (default: descending)
        - `batch__batch_number`
        - `count` (number of mortalities)
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this mortality event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMortalityEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMortalityEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMortalityEvent'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityEvent'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_batch_mortality_events_destroy
      description: |-
        API endpoint for managing Mortality Events in aquaculture batches.

        Mortality events record the number of deaths in a batch on a specific date,
        along with the suspected cause and any relevant notes. This endpoint
        provides full CRUD operations for mortality events.

        **Filtering:**
        - `batch`: ID of the batch associated with the mortality event.
        - `event_date`: Exact date of the mortality event.
        - `cause`: Suspected cause of mortality (e.g., 'DISEASE', 'PREDATION', 'HANDLING').

        **Searching:**
        - `batch__batch_number`: Batch number of the associated batch.
        - `notes`: Notes associated with the mortality event.

        **Ordering:**
        - `event_date` (default: descending)
        - `batch__batch_number`
        - `count` (number of mortalities)
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this mortality event.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_batch_mortality_events_update
      description: |-
        API endpoint for managing Mortality Events in aquaculture batches.

        Mortality events record the number of deaths in a batch on a specific date,
        along with the suspected cause and any relevant notes. This endpoint
        provides full CRUD operations for mortality events.

        **Filtering:**
        - `batch`: ID of the batch associated with the mortality event.
        - `event_date`: Exact date of the mortality event.
        - `cause`: Suspected cause of mortality (e.g., 'DISEASE', 'PREDATION', 'HANDLING').

        **Searching:**
        - `batch__batch_number`: Batch number of the associated batch.
        - `notes`: Notes associated with the mortality event.

        **Ordering:**
        - `event_date` (default: descending)
        - `batch__batch_number`
        - `count` (number of mortalities)
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this mortality event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MortalityEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MortalityEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MortalityEvent'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityEvent'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/growth-samples/:
    get:
      operationId: api_v1_batch_growth_samples_list
      description: |-
        API endpoint for managing Growth Samples from aquaculture batches.

        Growth samples record the average weight of organisms in a batch (or a specific
        container assignment of a batch) on a particular date. This data is essential
        for tracking growth, calculating feed conversion ratios, and making management decisions.
        This endpoint provides full CRUD operations for growth samples.

        **Filtering:**
        - `assignment__batch`: ID of the batch associated with the growth sample (via BatchContainerAssignment).
        - `sample_date`: Exact date of the sample.

        **Searching:**
        - `batch__batch_number`: Batch number of the associated batch. (Searches through the related Batch model via the assignment)
        - `notes`: Notes associated with the growth sample.

        **Ordering:**
        - `sample_date` (default: descending)
        - `batch__batch_number`: Batch number of the associated batch. (Orders based on the related Batch model via the assignment)
        - `avg_weight_g`: Average weight in grams.
        - `created_at`
      parameters:
      - in: query
        name: assignment__batch
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: sample_date
        schema:
          type: string
          format: date
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGrowthSampleList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_batch_growth_samples_create
      description: |-
        API endpoint for managing Growth Samples from aquaculture batches.

        Growth samples record the average weight of organisms in a batch (or a specific
        container assignment of a batch) on a particular date. This data is essential
        for tracking growth, calculating feed conversion ratios, and making management decisions.
        This endpoint provides full CRUD operations for growth samples.

        **Filtering:**
        - `assignment__batch`: ID of the batch associated with the growth sample (via BatchContainerAssignment).
        - `sample_date`: Exact date of the sample.

        **Searching:**
        - `batch__batch_number`: Batch number of the associated batch. (Searches through the related Batch model via the assignment)
        - `notes`: Notes associated with the growth sample.

        **Ordering:**
        - `sample_date` (default: descending)
        - `batch__batch_number`: Batch number of the associated batch. (Orders based on the related Batch model via the assignment)
        - `avg_weight_g`: Average weight in grams.
        - `created_at`
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrowthSample'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GrowthSample'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GrowthSample'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrowthSample'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/batch/growth-samples/{id}/:
    get:
      operationId: api_v1_batch_growth_samples_retrieve
      description: |-
        API endpoint for managing Growth Samples from aquaculture batches.

        Growth samples record the average weight of organisms in a batch (or a specific
        container assignment of a batch) on a particular date. This data is essential
        for tracking growth, calculating feed conversion ratios, and making management decisions.
        This endpoint provides full CRUD operations for growth samples.

        **Filtering:**
        - `assignment__batch`: ID of the batch associated with the growth sample (via BatchContainerAssignment).
        - `sample_date`: Exact date of the sample.

        **Searching:**
        - `batch__batch_number`: Batch number of the associated batch. (Searches through the related Batch model via the assignment)
        - `notes`: Notes associated with the growth sample.

        **Ordering:**
        - `sample_date` (default: descending)
        - `batch__batch_number`: Batch number of the associated batch. (Orders based on the related Batch model via the assignment)
        - `avg_weight_g`: Average weight in grams.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this growth sample.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrowthSample'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_batch_growth_samples_partial_update
      description: |-
        API endpoint for managing Growth Samples from aquaculture batches.

        Growth samples record the average weight of organisms in a batch (or a specific
        container assignment of a batch) on a particular date. This data is essential
        for tracking growth, calculating feed conversion ratios, and making management decisions.
        This endpoint provides full CRUD operations for growth samples.

        **Filtering:**
        - `assignment__batch`: ID of the batch associated with the growth sample (via BatchContainerAssignment).
        - `sample_date`: Exact date of the sample.

        **Searching:**
        - `batch__batch_number`: Batch number of the associated batch. (Searches through the related Batch model via the assignment)
        - `notes`: Notes associated with the growth sample.

        **Ordering:**
        - `sample_date` (default: descending)
        - `batch__batch_number`: Batch number of the associated batch. (Orders based on the related Batch model via the assignment)
        - `avg_weight_g`: Average weight in grams.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this growth sample.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGrowthSample'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGrowthSample'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGrowthSample'
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrowthSample'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_batch_growth_samples_destroy
      description: |-
        API endpoint for managing Growth Samples from aquaculture batches.

        Growth samples record the average weight of organisms in a batch (or a specific
        container assignment of a batch) on a particular date. This data is essential
        for tracking growth, calculating feed conversion ratios, and making management decisions.
        This endpoint provides full CRUD operations for growth samples.

        **Filtering:**
        - `assignment__batch`: ID of the batch associated with the growth sample (via BatchContainerAssignment).
        - `sample_date`: Exact date of the sample.

        **Searching:**
        - `batch__batch_number`: Batch number of the associated batch. (Searches through the related Batch model via the assignment)
        - `notes`: Notes associated with the growth sample.

        **Ordering:**
        - `sample_date` (default: descending)
        - `batch__batch_number`: Batch number of the associated batch. (Orders based on the related Batch model via the assignment)
        - `avg_weight_g`: Average weight in grams.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this growth sample.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_batch_growth_samples_update
      description: |-
        API endpoint for managing Growth Samples from aquaculture batches.

        Growth samples record the average weight of organisms in a batch (or a specific
        container assignment of a batch) on a particular date. This data is essential
        for tracking growth, calculating feed conversion ratios, and making management decisions.
        This endpoint provides full CRUD operations for growth samples.

        **Filtering:**
        - `assignment__batch`: ID of the batch associated with the growth sample (via BatchContainerAssignment).
        - `sample_date`: Exact date of the sample.

        **Searching:**
        - `batch__batch_number`: Batch number of the associated batch. (Searches through the related Batch model via the assignment)
        - `notes`: Notes associated with the growth sample.

        **Ordering:**
        - `sample_date` (default: descending)
        - `batch__batch_number`: Batch number of the associated batch. (Orders based on the related Batch model via the assignment)
        - `avg_weight_g`: Average weight in grams.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this growth sample.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrowthSample'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GrowthSample'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GrowthSample'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrowthSample'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/inventory/feeds/:
    get:
      operationId: api_v1_inventory_feeds_list
      description: |-
        ViewSet for Feed model.

        Provides CRUD operations for feed types used in aquaculture operations.
      parameters:
      - in: query
        name: brand
        schema:
          type: string
      - in: query
        name: is_active
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFeedList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_inventory_feeds_create
      description: |-
        ViewSet for Feed model.

        Provides CRUD operations for feed types used in aquaculture operations.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feed'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Feed'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Feed'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/inventory/feeds/{id}/:
    get:
      operationId: api_v1_inventory_feeds_retrieve
      description: |-
        ViewSet for Feed model.

        Provides CRUD operations for feed types used in aquaculture operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_inventory_feeds_partial_update
      description: |-
        ViewSet for Feed model.

        Provides CRUD operations for feed types used in aquaculture operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFeed'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFeed'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFeed'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_inventory_feeds_destroy
      description: |-
        ViewSet for Feed model.

        Provides CRUD operations for feed types used in aquaculture operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_inventory_feeds_update
      description: |-
        ViewSet for Feed model.

        Provides CRUD operations for feed types used in aquaculture operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feed'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Feed'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Feed'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/inventory/feed-purchases/:
    get:
      operationId: api_v1_inventory_feed_purchases_list
      description: |-
        ViewSet for FeedPurchase model.

        Provides CRUD operations for feed purchase records.
      parameters:
      - in: query
        name: feed
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: purchase_date
        schema:
          type: string
          format: date
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: supplier
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFeedPurchaseList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_inventory_feed_purchases_create
      description: |-
        ViewSet for FeedPurchase model.

        Provides CRUD operations for feed purchase records.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedPurchase'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedPurchase'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedPurchase'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedPurchase'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/inventory/feed-purchases/{id}/:
    get:
      operationId: api_v1_inventory_feed_purchases_retrieve
      description: |-
        ViewSet for FeedPurchase model.

        Provides CRUD operations for feed purchase records.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed purchase.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedPurchase'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_inventory_feed_purchases_partial_update
      description: |-
        ViewSet for FeedPurchase model.

        Provides CRUD operations for feed purchase records.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed purchase.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFeedPurchase'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFeedPurchase'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFeedPurchase'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedPurchase'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_inventory_feed_purchases_destroy
      description: |-
        ViewSet for FeedPurchase model.

        Provides CRUD operations for feed purchase records.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed purchase.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_inventory_feed_purchases_update
      description: |-
        ViewSet for FeedPurchase model.

        Provides CRUD operations for feed purchase records.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed purchase.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedPurchase'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedPurchase'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedPurchase'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedPurchase'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/inventory/feed-stocks/:
    get:
      operationId: api_v1_inventory_feed_stocks_list
      description: |-
        ViewSet for FeedStock model.

        Provides CRUD operations for feed stock levels in feed containers.
      parameters:
      - in: query
        name: feed
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: feed_container
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFeedStockList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_inventory_feed_stocks_create
      description: |-
        ViewSet for FeedStock model.

        Provides CRUD operations for feed stock levels in feed containers.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedStock'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedStock'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedStock'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedStock'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/inventory/feed-stocks/low_stock/:
    get:
      operationId: api_v1_inventory_feed_stocks_low_stock_retrieve
      description: Return feed stocks that are below reorder threshold.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeedStock'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/inventory/feed-stocks/{id}/:
    get:
      operationId: api_v1_inventory_feed_stocks_retrieve
      description: |-
        ViewSet for FeedStock model.

        Provides CRUD operations for feed stock levels in feed containers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed stock.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedStock'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_inventory_feed_stocks_partial_update
      description: |-
        ViewSet for FeedStock model.

        Provides CRUD operations for feed stock levels in feed containers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed stock.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFeedStock'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFeedStock'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFeedStock'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedStock'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_inventory_feed_stocks_destroy
      description: |-
        ViewSet for FeedStock model.

        Provides CRUD operations for feed stock levels in feed containers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed stock.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_inventory_feed_stocks_update
      description: |-
        ViewSet for FeedStock model.

        Provides CRUD operations for feed stock levels in feed containers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed stock.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedStock'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedStock'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedStock'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedStock'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/inventory/feeding-events/:
    get:
      operationId: api_v1_inventory_feeding_events_list
      description: |-
        ViewSet for FeedingEvent model.

        Provides CRUD operations for feeding events with additional filtering
        capabilities.
      parameters:
      - in: query
        name: batch
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: container
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: feed
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: feeding_date
        schema:
          type: string
          format: date
      - in: query
        name: method
        schema:
          type: string
          x-spec-enum-id: 037132121c393c6e
          enum:
          - AUTOMATIC
          - BROADCAST
          - MANUAL
        description: |-
          * `MANUAL` - Manual
          * `AUTOMATIC` - Automatic Feeder
          * `BROADCAST` - Broadcast
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFeedingEventList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_inventory_feeding_events_create
      description: |-
        ViewSet for FeedingEvent model.

        Provides CRUD operations for feeding events with additional filtering
        capabilities.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedingEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedingEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedingEvent'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedingEvent'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/inventory/feeding-events/by_batch/:
    get:
      operationId: api_v1_inventory_feeding_events_by_batch_retrieve
      description: Get feeding events for a specific batch.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeedingEvent'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/inventory/feeding-events/summary/:
    get:
      operationId: api_v1_inventory_feeding_events_summary_retrieve
      description: |-
        Return aggregated statistics for feeding events.

        Optional query parameters
        ------------------------
        date      : 'today' (default) or specific ISO date (YYYY-MM-DD)
        batch     : Batch ID to filter by
        container : Container ID to filter by

        Response schema
        ----------------
        {
            "events_count": integer,
            "total_feed_kg": number
        }
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedingEvent'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/inventory/feeding-events/{id}/:
    get:
      operationId: api_v1_inventory_feeding_events_retrieve
      description: |-
        ViewSet for FeedingEvent model.

        Provides CRUD operations for feeding events with additional filtering
        capabilities.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feeding event.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedingEvent'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_inventory_feeding_events_partial_update
      description: |-
        ViewSet for FeedingEvent model.

        Provides CRUD operations for feeding events with additional filtering
        capabilities.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feeding event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFeedingEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFeedingEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFeedingEvent'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedingEvent'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_inventory_feeding_events_destroy
      description: |-
        ViewSet for FeedingEvent model.

        Provides CRUD operations for feeding events with additional filtering
        capabilities.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feeding event.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_inventory_feeding_events_update
      description: |-
        ViewSet for FeedingEvent model.

        Provides CRUD operations for feeding events with additional filtering
        capabilities.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feeding event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedingEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedingEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedingEvent'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedingEvent'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/inventory/batch-feeding-summaries/:
    get:
      operationId: api_v1_inventory_batch_feeding_summaries_list
      description: |-
        ViewSet for BatchFeedingSummary model.

        Provides read operations for batch feeding summaries with generation
        capabilities.
      parameters:
      - in: query
        name: batch
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: period_end
        schema:
          type: string
          format: date
      - in: query
        name: period_start
        schema:
          type: string
          format: date
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBatchFeedingSummaryList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/inventory/batch-feeding-summaries/by_batch/:
    get:
      operationId: api_v1_inventory_batch_feeding_summaries_by_batch_retrieve
      description: Get feeding summaries for a specific batch.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BatchFeedingSummary'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/inventory/batch-feeding-summaries/generate/:
    post:
      operationId: api_v1_inventory_batch_feeding_summaries_generate_create
      description: Generate a feeding summary for a batch over a specified period.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchFeedingSummary'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BatchFeedingSummary'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BatchFeedingSummary'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchFeedingSummary'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/inventory/batch-feeding-summaries/{id}/:
    get:
      operationId: api_v1_inventory_batch_feeding_summaries_retrieve
      description: |-
        ViewSet for BatchFeedingSummary model.

        Provides read operations for batch feeding summaries with generation
        capabilities.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this batch feeding summary.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchFeedingSummary'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/inventory/feed-container-stock/:
    get:
      operationId: api_v1_inventory_feed_container_stock_list
      description: |-
        API endpoint for managing Feed Container Stock.

        Provides CRUD operations for feed container stock entries,
        supporting FIFO inventory tracking.
      parameters:
      - in: query
        name: entry_date
        schema:
          type: string
          format: date-time
      - in: query
        name: entry_date__gte
        schema:
          type: string
          format: date-time
      - in: query
        name: entry_date__lte
        schema:
          type: string
          format: date-time
      - in: query
        name: feed_container
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: feed_purchase
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: quantity_kg
        schema:
          type: number
      - in: query
        name: quantity_kg__gte
        schema:
          type: number
      - in: query
        name: quantity_kg__lte
        schema:
          type: number
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFeedContainerStockList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_inventory_feed_container_stock_create
      description: |-
        API endpoint for managing Feed Container Stock.

        Provides CRUD operations for feed container stock entries,
        supporting FIFO inventory tracking.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedContainerStockCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedContainerStockCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedContainerStockCreate'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedContainerStockCreate'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/inventory/feed-container-stock/add_to_container/:
    post:
      operationId: api_v1_inventory_feed_container_stock_add_to_container_create
      description: |-
        Add feed batch to container using FIFO service.

        Expected payload:
        {
            "feed_container_id": 1,
            "feed_purchase_id": 2,
            "quantity_kg": "100.00"
        }
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedContainerStock'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedContainerStock'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedContainerStock'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedContainerStock'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/inventory/feed-container-stock/by_container/:
    get:
      operationId: api_v1_inventory_feed_container_stock_by_container_retrieve
      description: |-
        Get feed container stock grouped by container.

        Query parameters:
        - container_id: Filter by specific container
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeedContainerStock'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/inventory/feed-container-stock/fifo_order/:
    get:
      operationId: api_v1_inventory_feed_container_stock_fifo_order_retrieve
      description: |-
        Get feed container stock in FIFO order for a specific container.

        Query parameters:
        - container_id: Required. Container to get FIFO order for.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeedContainerStock'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/inventory/feed-container-stock/{id}/:
    get:
      operationId: api_v1_inventory_feed_container_stock_retrieve
      description: |-
        API endpoint for managing Feed Container Stock.

        Provides CRUD operations for feed container stock entries,
        supporting FIFO inventory tracking.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Feed Container Stock.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedContainerStock'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_inventory_feed_container_stock_partial_update
      description: |-
        API endpoint for managing Feed Container Stock.

        Provides CRUD operations for feed container stock entries,
        supporting FIFO inventory tracking.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Feed Container Stock.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFeedContainerStock'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFeedContainerStock'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFeedContainerStock'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedContainerStock'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_inventory_feed_container_stock_destroy
      description: |-
        API endpoint for managing Feed Container Stock.

        Provides CRUD operations for feed container stock entries,
        supporting FIFO inventory tracking.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Feed Container Stock.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_inventory_feed_container_stock_update
      description: |-
        API endpoint for managing Feed Container Stock.

        Provides CRUD operations for feed container stock entries,
        supporting FIFO inventory tracking.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Feed Container Stock.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedContainerStock'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedContainerStock'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedContainerStock'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedContainerStock'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/journal-entries/:
    get:
      operationId: api_v1_health_journal_entries_list
      description: |-
        API endpoint for managing Journal Entries.

        Provides CRUD operations for journal entries, which track observations
        and notes about fish health.
      parameters:
      - in: query
        name: batch__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: category
        schema:
          type: string
          x-spec-enum-id: 6395bad1f19ddc12
          enum:
          - action
          - diagnosis
          - issue
          - observation
          - sample
          - treatment
          - vaccination
        description: |-
          * `observation` - Observation
          * `issue` - Issue
          * `action` - Action
          * `diagnosis` - Diagnosis
          * `treatment` - Treatment
          * `vaccination` - Vaccination
          * `sample` - Sample
      - in: query
        name: container__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: entry_date
        schema:
          type: string
          format: date-time
      - in: query
        name: entry_date__gte
        schema:
          type: string
          format: date-time
      - in: query
        name: entry_date__lte
        schema:
          type: string
          format: date-time
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedJournalEntryList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_health_journal_entries_create
      description: |-
        API endpoint for managing Journal Entries.

        Provides CRUD operations for journal entries, which track observations
        and notes about fish health.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JournalEntry'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JournalEntry'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JournalEntry'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JournalEntry'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/journal-entries/{id}/:
    get:
      operationId: api_v1_health_journal_entries_retrieve
      description: |-
        API endpoint for managing Journal Entries.

        Provides CRUD operations for journal entries, which track observations
        and notes about fish health.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this journal entry.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JournalEntry'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_health_journal_entries_partial_update
      description: |-
        API endpoint for managing Journal Entries.

        Provides CRUD operations for journal entries, which track observations
        and notes about fish health.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this journal entry.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedJournalEntry'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedJournalEntry'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedJournalEntry'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JournalEntry'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_health_journal_entries_destroy
      description: |-
        API endpoint for managing Journal Entries.

        Provides CRUD operations for journal entries, which track observations
        and notes about fish health.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this journal entry.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_health_journal_entries_update
      description: |-
        API endpoint for managing Journal Entries.

        Provides CRUD operations for journal entries, which track observations
        and notes about fish health.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this journal entry.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JournalEntry'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JournalEntry'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JournalEntry'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JournalEntry'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/mortality-reasons/:
    get:
      operationId: api_v1_health_mortality_reasons_list
      description: |-
        API endpoint for managing Mortality Reasons.

        Provides CRUD operations for mortality reasons used in mortality records.
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: name__icontains
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMortalityReasonList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_health_mortality_reasons_create
      description: |-
        API endpoint for managing Mortality Reasons.

        Provides CRUD operations for mortality reasons used in mortality records.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MortalityReason'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MortalityReason'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MortalityReason'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityReason'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/mortality-reasons/{id}/:
    get:
      operationId: api_v1_health_mortality_reasons_retrieve
      description: |-
        API endpoint for managing Mortality Reasons.

        Provides CRUD operations for mortality reasons used in mortality records.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this mortality reason.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityReason'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_health_mortality_reasons_partial_update
      description: |-
        API endpoint for managing Mortality Reasons.

        Provides CRUD operations for mortality reasons used in mortality records.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this mortality reason.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMortalityReason'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMortalityReason'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMortalityReason'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityReason'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_health_mortality_reasons_destroy
      description: |-
        API endpoint for managing Mortality Reasons.

        Provides CRUD operations for mortality reasons used in mortality records.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this mortality reason.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_health_mortality_reasons_update
      description: |-
        API endpoint for managing Mortality Reasons.

        Provides CRUD operations for mortality reasons used in mortality records.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this mortality reason.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MortalityReason'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MortalityReason'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MortalityReason'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityReason'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/mortality-records/:
    get:
      operationId: api_v1_health_mortality_records_list
      description: |-
        API endpoint for managing Mortality Records.

        Provides CRUD operations for mortality records, which track fish deaths
        and their causes.
      parameters:
      - in: query
        name: count
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: count__gte
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: count__lte
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: reason__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMortalityRecordList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_health_mortality_records_create
      description: |-
        API endpoint for managing Mortality Records.

        Provides CRUD operations for mortality records, which track fish deaths
        and their causes.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MortalityRecord'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MortalityRecord'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MortalityRecord'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityRecord'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/mortality-records/{id}/:
    get:
      operationId: api_v1_health_mortality_records_retrieve
      description: |-
        API endpoint for managing Mortality Records.

        Provides CRUD operations for mortality records, which track fish deaths
        and their causes.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this mortality record.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityRecord'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_health_mortality_records_partial_update
      description: |-
        API endpoint for managing Mortality Records.

        Provides CRUD operations for mortality records, which track fish deaths
        and their causes.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this mortality record.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMortalityRecord'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMortalityRecord'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMortalityRecord'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityRecord'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_health_mortality_records_destroy
      description: |-
        API endpoint for managing Mortality Records.

        Provides CRUD operations for mortality records, which track fish deaths
        and their causes.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this mortality record.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_health_mortality_records_update
      description: |-
        API endpoint for managing Mortality Records.

        Provides CRUD operations for mortality records, which track fish deaths
        and their causes.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this mortality record.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MortalityRecord'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MortalityRecord'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MortalityRecord'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityRecord'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/lice-counts/:
    get:
      operationId: api_v1_health_lice_counts_list
      description: |-
        API endpoint for managing Lice Counts.

        Provides CRUD operations for lice counts, which track sea lice infestations
        in fish populations.
      parameters:
      - in: query
        name: count_date
        schema:
          type: string
          format: date-time
      - in: query
        name: count_date__gte
        schema:
          type: string
          format: date-time
      - in: query
        name: count_date__lte
        schema:
          type: string
          format: date-time
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLiceCountList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_health_lice_counts_create
      description: |-
        API endpoint for managing Lice Counts.

        Provides CRUD operations for lice counts, which track sea lice infestations
        in fish populations.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiceCount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LiceCount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LiceCount'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiceCount'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/lice-counts/{id}/:
    get:
      operationId: api_v1_health_lice_counts_retrieve
      description: |-
        API endpoint for managing Lice Counts.

        Provides CRUD operations for lice counts, which track sea lice infestations
        in fish populations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this lice count.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiceCount'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_health_lice_counts_partial_update
      description: |-
        API endpoint for managing Lice Counts.

        Provides CRUD operations for lice counts, which track sea lice infestations
        in fish populations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this lice count.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLiceCount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLiceCount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLiceCount'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiceCount'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_health_lice_counts_destroy
      description: |-
        API endpoint for managing Lice Counts.

        Provides CRUD operations for lice counts, which track sea lice infestations
        in fish populations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this lice count.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_health_lice_counts_update
      description: |-
        API endpoint for managing Lice Counts.

        Provides CRUD operations for lice counts, which track sea lice infestations
        in fish populations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this lice count.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiceCount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LiceCount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LiceCount'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiceCount'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/vaccination-types/:
    get:
      operationId: api_v1_health_vaccination_types_list
      description: |-
        API endpoint for managing Vaccination Types.

        Provides CRUD operations for vaccination types used in treatments.
      parameters:
      - in: query
        name: manufacturer
        schema:
          type: string
      - in: query
        name: manufacturer__icontains
        schema:
          type: string
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: name__icontains
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVaccinationTypeList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_health_vaccination_types_create
      description: |-
        API endpoint for managing Vaccination Types.

        Provides CRUD operations for vaccination types used in treatments.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VaccinationType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VaccinationType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VaccinationType'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaccinationType'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/vaccination-types/{id}/:
    get:
      operationId: api_v1_health_vaccination_types_retrieve
      description: |-
        API endpoint for managing Vaccination Types.

        Provides CRUD operations for vaccination types used in treatments.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this vaccination type.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaccinationType'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_health_vaccination_types_partial_update
      description: |-
        API endpoint for managing Vaccination Types.

        Provides CRUD operations for vaccination types used in treatments.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this vaccination type.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVaccinationType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVaccinationType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVaccinationType'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaccinationType'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_health_vaccination_types_destroy
      description: |-
        API endpoint for managing Vaccination Types.

        Provides CRUD operations for vaccination types used in treatments.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this vaccination type.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_health_vaccination_types_update
      description: |-
        API endpoint for managing Vaccination Types.

        Provides CRUD operations for vaccination types used in treatments.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this vaccination type.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VaccinationType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VaccinationType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VaccinationType'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaccinationType'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/treatments/:
    get:
      operationId: api_v1_health_treatments_list
      description: |-
        API endpoint for managing Treatments.

        Provides CRUD operations for treatments, which track medical interventions
        for fish populations.
      parameters:
      - in: query
        name: batch__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: batch_assignment__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: container__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: outcome
        schema:
          type: string
          x-spec-enum-id: 955b151e5f091fdc
          enum:
          - partial
          - pending
          - successful
          - unsuccessful
        description: |-
          Outcome of the treatment.

          * `pending` - Pending
          * `successful` - Successful
          * `partial` - Partially Successful
          * `unsuccessful` - Unsuccessful
      - in: query
        name: outcome__icontains
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treatment_date
        schema:
          type: string
          format: date-time
      - in: query
        name: treatment_date__gte
        schema:
          type: string
          format: date-time
      - in: query
        name: treatment_date__lte
        schema:
          type: string
          format: date-time
      - in: query
        name: treatment_type
        schema:
          type: string
          x-spec-enum-id: 69ca009bba5fa388
          enum:
          - medication
          - other
          - physical
          - vaccination
        description: |-
          Type of treatment administered.

          * `medication` - Medication
          * `vaccination` - Vaccination
          * `physical` - Physical Treatment
          * `other` - Other
      - in: query
        name: user__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: vaccination_type__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: withholding_period_days
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: withholding_period_days__gte
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: withholding_period_days__lte
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTreatmentList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_health_treatments_create
      description: |-
        API endpoint for managing Treatments.

        Provides CRUD operations for treatments, which track medical interventions
        for fish populations.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Treatment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Treatment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Treatment'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Treatment'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/treatments/{id}/:
    get:
      operationId: api_v1_health_treatments_retrieve
      description: |-
        API endpoint for managing Treatments.

        Provides CRUD operations for treatments, which track medical interventions
        for fish populations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this treatment.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Treatment'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_health_treatments_partial_update
      description: |-
        API endpoint for managing Treatments.

        Provides CRUD operations for treatments, which track medical interventions
        for fish populations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this treatment.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTreatment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTreatment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTreatment'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Treatment'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_health_treatments_destroy
      description: |-
        API endpoint for managing Treatments.

        Provides CRUD operations for treatments, which track medical interventions
        for fish populations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this treatment.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_health_treatments_update
      description: |-
        API endpoint for managing Treatments.

        Provides CRUD operations for treatments, which track medical interventions
        for fish populations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this treatment.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Treatment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Treatment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Treatment'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Treatment'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/sample-types/:
    get:
      operationId: api_v1_health_sample_types_list
      description: |-
        API endpoint for managing Sample Types.

        Provides CRUD operations for sample types used in lab testing.
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: name__icontains
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSampleTypeList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_health_sample_types_create
      description: |-
        API endpoint for managing Sample Types.

        Provides CRUD operations for sample types used in lab testing.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SampleType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SampleType'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleType'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/sample-types/{id}/:
    get:
      operationId: api_v1_health_sample_types_retrieve
      description: |-
        API endpoint for managing Sample Types.

        Provides CRUD operations for sample types used in lab testing.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this sample type.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleType'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_health_sample_types_partial_update
      description: |-
        API endpoint for managing Sample Types.

        Provides CRUD operations for sample types used in lab testing.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this sample type.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSampleType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSampleType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSampleType'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleType'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_health_sample_types_destroy
      description: |-
        API endpoint for managing Sample Types.

        Provides CRUD operations for sample types used in lab testing.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this sample type.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_health_sample_types_update
      description: |-
        API endpoint for managing Sample Types.

        Provides CRUD operations for sample types used in lab testing.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this sample type.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SampleType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SampleType'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleType'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/health-parameters/:
    get:
      operationId: api_v1_health_health_parameters_list
      description: |-
        API endpoint for managing Health Parameters.

        Provides CRUD operations for health parameters used in fish health assessments.
      parameters:
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: name__icontains
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHealthParameterList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_health_health_parameters_create
      description: |-
        API endpoint for managing Health Parameters.

        Provides CRUD operations for health parameters used in fish health assessments.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HealthParameter'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HealthParameter'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HealthParameter'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthParameter'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/health-parameters/{id}/:
    get:
      operationId: api_v1_health_health_parameters_retrieve
      description: |-
        API endpoint for managing Health Parameters.

        Provides CRUD operations for health parameters used in fish health assessments.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this health parameter.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthParameter'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_health_health_parameters_partial_update
      description: |-
        API endpoint for managing Health Parameters.

        Provides CRUD operations for health parameters used in fish health assessments.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this health parameter.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedHealthParameter'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedHealthParameter'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedHealthParameter'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthParameter'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_health_health_parameters_destroy
      description: |-
        API endpoint for managing Health Parameters.

        Provides CRUD operations for health parameters used in fish health assessments.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this health parameter.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_health_health_parameters_update
      description: |-
        API endpoint for managing Health Parameters.

        Provides CRUD operations for health parameters used in fish health assessments.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this health parameter.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HealthParameter'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HealthParameter'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HealthParameter'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthParameter'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/health-sampling-events/:
    get:
      operationId: api_v1_health_health_sampling_events_list
      description: |-
        API endpoint for managing Health Sampling Events.

        Provides CRUD operations for health sampling events, including nested
        individual fish observations and parameter scores. Also provides an
        action to calculate aggregate metrics.
      parameters:
      - in: query
        name: assignment__batch__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: assignment__container__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: sampled_by__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: sampling_date
        schema:
          type: string
          format: date
      - in: query
        name: sampling_date__gte
        schema:
          type: string
          format: date
      - in: query
        name: sampling_date__lte
        schema:
          type: string
          format: date
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHealthSamplingEventList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_health_health_sampling_events_create
      description: |-
        API endpoint for managing Health Sampling Events.

        Provides CRUD operations for health sampling events, including nested
        individual fish observations and parameter scores. Also provides an
        action to calculate aggregate metrics.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HealthSamplingEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HealthSamplingEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HealthSamplingEvent'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSamplingEvent'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/health-sampling-events/{id}/:
    get:
      operationId: api_v1_health_health_sampling_events_retrieve
      description: |-
        API endpoint for managing Health Sampling Events.

        Provides CRUD operations for health sampling events, including nested
        individual fish observations and parameter scores. Also provides an
        action to calculate aggregate metrics.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Health Sampling Event.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSamplingEvent'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_health_health_sampling_events_partial_update
      description: |-
        API endpoint for managing Health Sampling Events.

        Provides CRUD operations for health sampling events, including nested
        individual fish observations and parameter scores. Also provides an
        action to calculate aggregate metrics.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Health Sampling Event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedHealthSamplingEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedHealthSamplingEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedHealthSamplingEvent'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSamplingEvent'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_health_health_sampling_events_destroy
      description: |-
        API endpoint for managing Health Sampling Events.

        Provides CRUD operations for health sampling events, including nested
        individual fish observations and parameter scores. Also provides an
        action to calculate aggregate metrics.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Health Sampling Event.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_health_health_sampling_events_update
      description: |-
        API endpoint for managing Health Sampling Events.

        Provides CRUD operations for health sampling events, including nested
        individual fish observations and parameter scores. Also provides an
        action to calculate aggregate metrics.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Health Sampling Event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HealthSamplingEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HealthSamplingEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HealthSamplingEvent'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSamplingEvent'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/health-sampling-events/{id}/calculate-aggregates/:
    post:
      operationId: api_v1_health_health_sampling_events_calculate_aggregates_create
      description: |-
        Trigger the calculation of aggregate metrics for a model instance.

        Args:
            request: The request object
            pk: The primary key of the instance

        Returns:
            Response: The serialized instance after calculation
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Health Sampling Event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HealthSamplingEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HealthSamplingEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HealthSamplingEvent'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSamplingEvent'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/individual-fish-observations/:
    get:
      operationId: api_v1_health_individual_fish_observations_list
      description: |-
        API endpoint for managing Individual Fish Observations.

        Provides CRUD operations for individual fish observations within a health sampling event.
      parameters:
      - in: query
        name: fish_identifier
        schema:
          type: string
      - in: query
        name: fish_identifier__icontains
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: sampling_event__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedIndividualFishObservationList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_health_individual_fish_observations_create
      description: |-
        API endpoint for managing Individual Fish Observations.

        Provides CRUD operations for individual fish observations within a health sampling event.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndividualFishObservation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/IndividualFishObservation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/IndividualFishObservation'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualFishObservation'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/individual-fish-observations/{id}/:
    get:
      operationId: api_v1_health_individual_fish_observations_retrieve
      description: |-
        API endpoint for managing Individual Fish Observations.

        Provides CRUD operations for individual fish observations within a health sampling event.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Individual Fish Observation.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualFishObservation'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_health_individual_fish_observations_partial_update
      description: |-
        API endpoint for managing Individual Fish Observations.

        Provides CRUD operations for individual fish observations within a health sampling event.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Individual Fish Observation.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedIndividualFishObservation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedIndividualFishObservation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedIndividualFishObservation'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualFishObservation'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_health_individual_fish_observations_destroy
      description: |-
        API endpoint for managing Individual Fish Observations.

        Provides CRUD operations for individual fish observations within a health sampling event.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Individual Fish Observation.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_health_individual_fish_observations_update
      description: |-
        API endpoint for managing Individual Fish Observations.

        Provides CRUD operations for individual fish observations within a health sampling event.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Individual Fish Observation.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndividualFishObservation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/IndividualFishObservation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/IndividualFishObservation'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualFishObservation'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/fish-parameter-scores/:
    get:
      operationId: api_v1_health_fish_parameter_scores_list
      description: |-
        API endpoint for managing Fish Parameter Scores.

        Provides CRUD operations for parameter scores assigned to individual fish observations.
      parameters:
      - in: query
        name: individual_fish_observation__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: parameter__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: score
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: score__gte
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: score__lte
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFishParameterScoreList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_health_fish_parameter_scores_create
      description: |-
        API endpoint for managing Fish Parameter Scores.

        Provides CRUD operations for parameter scores assigned to individual fish observations.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FishParameterScore'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FishParameterScore'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FishParameterScore'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FishParameterScore'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/fish-parameter-scores/{id}/:
    get:
      operationId: api_v1_health_fish_parameter_scores_retrieve
      description: |-
        API endpoint for managing Fish Parameter Scores.

        Provides CRUD operations for parameter scores assigned to individual fish observations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Fish Parameter Score.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FishParameterScore'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_health_fish_parameter_scores_partial_update
      description: |-
        API endpoint for managing Fish Parameter Scores.

        Provides CRUD operations for parameter scores assigned to individual fish observations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Fish Parameter Score.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFishParameterScore'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFishParameterScore'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFishParameterScore'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FishParameterScore'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_health_fish_parameter_scores_destroy
      description: |-
        API endpoint for managing Fish Parameter Scores.

        Provides CRUD operations for parameter scores assigned to individual fish observations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Fish Parameter Score.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_health_fish_parameter_scores_update
      description: |-
        API endpoint for managing Fish Parameter Scores.

        Provides CRUD operations for parameter scores assigned to individual fish observations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Fish Parameter Score.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FishParameterScore'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FishParameterScore'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FishParameterScore'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FishParameterScore'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/health-lab-samples/:
    get:
      operationId: api_v1_health_health_lab_samples_list
      description: |-
        API endpoint for managing Health Lab Samples.

        Provides CRUD operations and filtering for lab samples. Handles creation
        with historical batch-container assignment lookup based on the sample date.
      parameters:
      - in: query
        name: batch_container_assignment__batch__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: batch_container_assignment__container__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: lab_reference_id
        schema:
          type: string
      - in: query
        name: lab_reference_id__icontains
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: recorded_by__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: sample_date
        schema:
          type: string
          format: date
      - in: query
        name: sample_date__gte
        schema:
          type: string
          format: date
      - in: query
        name: sample_date__lte
        schema:
          type: string
          format: date
      - in: query
        name: sample_type__id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHealthLabSampleList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_health_health_lab_samples_create
      description: |-
        API endpoint for managing Health Lab Samples.

        Provides CRUD operations and filtering for lab samples. Handles creation
        with historical batch-container assignment lookup based on the sample date.
      tags:
      - api
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HealthLabSample'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HealthLabSample'
          application/json:
            schema:
              $ref: '#/components/schemas/HealthLabSample'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthLabSample'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/health/health-lab-samples/{id}/:
    get:
      operationId: api_v1_health_health_lab_samples_retrieve
      description: |-
        API endpoint for managing Health Lab Samples.

        Provides CRUD operations and filtering for lab samples. Handles creation
        with historical batch-container assignment lookup based on the sample date.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Health Lab Sample.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthLabSample'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_health_health_lab_samples_partial_update
      description: |-
        API endpoint for managing Health Lab Samples.

        Provides CRUD operations and filtering for lab samples. Handles creation
        with historical batch-container assignment lookup based on the sample date.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Health Lab Sample.
        required: true
      tags:
      - api
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedHealthLabSample'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedHealthLabSample'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedHealthLabSample'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthLabSample'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_health_health_lab_samples_destroy
      description: |-
        API endpoint for managing Health Lab Samples.

        Provides CRUD operations and filtering for lab samples. Handles creation
        with historical batch-container assignment lookup based on the sample date.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Health Lab Sample.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_health_health_lab_samples_update
      description: |-
        API endpoint for managing Health Lab Samples.

        Provides CRUD operations and filtering for lab samples. Handles creation
        with historical batch-container assignment lookup based on the sample date.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Health Lab Sample.
        required: true
      tags:
      - api
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HealthLabSample'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HealthLabSample'
          application/json:
            schema:
              $ref: '#/components/schemas/HealthLabSample'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthLabSample'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/maintenance-tasks/:
    get:
      operationId: api_v1_broodstock_maintenance_tasks_list
      description: ViewSet for maintenance tasks.
      parameters:
      - in: query
        name: completed_date
        schema:
          type: string
          format: date-time
      - in: query
        name: container
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: task_type
        schema:
          type: string
          x-spec-enum-id: 410570b92c5a0f68
          enum:
          - cleaning
          - inspection
          - repair
          - upgrade
        description: |-
          Type of maintenance task

          * `cleaning` - Cleaning
          * `repair` - Repair
          * `inspection` - Inspection
          * `upgrade` - Equipment Upgrade
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMaintenanceTaskList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_broodstock_maintenance_tasks_create
      description: ViewSet for maintenance tasks.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenanceTask'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MaintenanceTask'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaintenanceTask'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceTask'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/maintenance-tasks/overdue/:
    get:
      operationId: api_v1_broodstock_maintenance_tasks_overdue_retrieve
      description: Get all overdue maintenance tasks.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MaintenanceTask'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/broodstock/maintenance-tasks/{id}/:
    get:
      operationId: api_v1_broodstock_maintenance_tasks_retrieve
      description: ViewSet for maintenance tasks.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Maintenance Task.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceTask'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_broodstock_maintenance_tasks_partial_update
      description: ViewSet for maintenance tasks.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Maintenance Task.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMaintenanceTask'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMaintenanceTask'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMaintenanceTask'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceTask'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_broodstock_maintenance_tasks_destroy
      description: ViewSet for maintenance tasks.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Maintenance Task.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_broodstock_maintenance_tasks_update
      description: ViewSet for maintenance tasks.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Maintenance Task.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenanceTask'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MaintenanceTask'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaintenanceTask'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceTask'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/maintenance-tasks/{id}/complete/:
    post:
      operationId: api_v1_broodstock_maintenance_tasks_complete_create
      description: Mark a maintenance task as completed.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Maintenance Task.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenanceTask'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MaintenanceTask'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaintenanceTask'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceTask'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/fish/:
    get:
      operationId: api_v1_broodstock_fish_list
      description: ViewSet for broodstock fish.
      parameters:
      - in: query
        name: container
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: health_status
        schema:
          type: string
          x-spec-enum-id: f6dd9f80b09f5c06
          enum:
          - deceased
          - healthy
          - monitored
          - sick
        description: |-
          Current health status

          * `healthy` - Healthy
          * `monitored` - Monitored
          * `sick` - Sick
          * `deceased` - Deceased
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBroodstockFishList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_broodstock_fish_create
      description: ViewSet for broodstock fish.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroodstockFish'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BroodstockFish'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BroodstockFish'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroodstockFish'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/fish/by_container/:
    get:
      operationId: api_v1_broodstock_fish_by_container_retrieve
      description: Get fish grouped by container.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BroodstockFish'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/broodstock/fish/healthy/:
    get:
      operationId: api_v1_broodstock_fish_healthy_retrieve
      description: Get all healthy broodstock fish.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroodstockFish'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/broodstock/fish/{id}/:
    get:
      operationId: api_v1_broodstock_fish_retrieve
      description: ViewSet for broodstock fish.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Broodstock Fish.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroodstockFish'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_broodstock_fish_partial_update
      description: ViewSet for broodstock fish.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Broodstock Fish.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBroodstockFish'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBroodstockFish'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBroodstockFish'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroodstockFish'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_broodstock_fish_destroy
      description: ViewSet for broodstock fish.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Broodstock Fish.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_broodstock_fish_update
      description: ViewSet for broodstock fish.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Broodstock Fish.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroodstockFish'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BroodstockFish'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BroodstockFish'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroodstockFish'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/fish-movements/:
    get:
      operationId: api_v1_broodstock_fish_movements_list
      description: ViewSet for fish movements.
      parameters:
      - in: query
        name: fish
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: from_container
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: movement_date
        schema:
          type: string
          format: date-time
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: to_container
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFishMovementList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_broodstock_fish_movements_create
      description: ViewSet for fish movements.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FishMovement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FishMovement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FishMovement'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FishMovement'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/fish-movements/bulk_transfer/:
    post:
      operationId: api_v1_broodstock_fish_movements_bulk_transfer_create
      description: Transfer multiple fish between containers.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FishMovement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FishMovement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FishMovement'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FishMovement'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/fish-movements/{id}/:
    get:
      operationId: api_v1_broodstock_fish_movements_retrieve
      description: ViewSet for fish movements.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Fish Movement.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FishMovement'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_broodstock_fish_movements_partial_update
      description: ViewSet for fish movements.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Fish Movement.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFishMovement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFishMovement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFishMovement'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FishMovement'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_broodstock_fish_movements_destroy
      description: ViewSet for fish movements.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Fish Movement.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_broodstock_fish_movements_update
      description: ViewSet for fish movements.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Fish Movement.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FishMovement'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FishMovement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FishMovement'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FishMovement'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/breeding-plans/:
    get:
      operationId: api_v1_broodstock_breeding_plans_list
      description: ViewSet for breeding plans.
      parameters:
      - in: query
        name: end_date
        schema:
          type: string
          format: date-time
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: start_date
        schema:
          type: string
          format: date-time
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBreedingPlanList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_broodstock_breeding_plans_create
      description: ViewSet for breeding plans.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BreedingPlan'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BreedingPlan'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BreedingPlan'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreedingPlan'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/breeding-plans/active/:
    get:
      operationId: api_v1_broodstock_breeding_plans_active_retrieve
      description: Get all currently active breeding plans.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BreedingPlan'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/broodstock/breeding-plans/{id}/:
    get:
      operationId: api_v1_broodstock_breeding_plans_retrieve
      description: ViewSet for breeding plans.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Breeding Plan.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreedingPlan'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_broodstock_breeding_plans_partial_update
      description: ViewSet for breeding plans.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Breeding Plan.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBreedingPlan'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBreedingPlan'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBreedingPlan'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreedingPlan'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_broodstock_breeding_plans_destroy
      description: ViewSet for breeding plans.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Breeding Plan.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_broodstock_breeding_plans_update
      description: ViewSet for breeding plans.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Breeding Plan.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BreedingPlan'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BreedingPlan'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BreedingPlan'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreedingPlan'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/trait-priorities/:
    get:
      operationId: api_v1_broodstock_trait_priorities_list
      description: ViewSet for breeding trait priorities.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: plan
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: trait_name
        schema:
          type: string
          x-spec-enum-id: 88a9a543458ce27f
          enum:
          - disease_resistance
          - fertility
          - growth_rate
          - size
        description: |-
          Trait to prioritize

          * `growth_rate` - Growth Rate
          * `disease_resistance` - Disease Resistance
          * `size` - Size
          * `fertility` - Fertility
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBreedingTraitPriorityList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_broodstock_trait_priorities_create
      description: ViewSet for breeding trait priorities.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BreedingTraitPriority'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BreedingTraitPriority'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BreedingTraitPriority'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreedingTraitPriority'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/trait-priorities/{id}/:
    get:
      operationId: api_v1_broodstock_trait_priorities_retrieve
      description: ViewSet for breeding trait priorities.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Breeding Trait Priority.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreedingTraitPriority'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_broodstock_trait_priorities_partial_update
      description: ViewSet for breeding trait priorities.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Breeding Trait Priority.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBreedingTraitPriority'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBreedingTraitPriority'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBreedingTraitPriority'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreedingTraitPriority'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_broodstock_trait_priorities_destroy
      description: ViewSet for breeding trait priorities.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Breeding Trait Priority.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_broodstock_trait_priorities_update
      description: ViewSet for breeding trait priorities.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Breeding Trait Priority.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BreedingTraitPriority'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BreedingTraitPriority'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BreedingTraitPriority'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreedingTraitPriority'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/breeding-pairs/:
    get:
      operationId: api_v1_broodstock_breeding_pairs_list
      description: ViewSet for breeding pairs.
      parameters:
      - in: query
        name: female_fish
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: male_fish
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: pairing_date
        schema:
          type: string
          format: date-time
      - in: query
        name: plan
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBreedingPairList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_broodstock_breeding_pairs_create
      description: ViewSet for breeding pairs.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BreedingPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BreedingPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BreedingPair'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreedingPair'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/breeding-pairs/{id}/:
    get:
      operationId: api_v1_broodstock_breeding_pairs_retrieve
      description: ViewSet for breeding pairs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Breeding Pair.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreedingPair'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_broodstock_breeding_pairs_partial_update
      description: ViewSet for breeding pairs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Breeding Pair.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBreedingPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBreedingPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBreedingPair'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreedingPair'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_broodstock_breeding_pairs_destroy
      description: ViewSet for breeding pairs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Breeding Pair.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_broodstock_breeding_pairs_update
      description: ViewSet for breeding pairs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Breeding Pair.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BreedingPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BreedingPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BreedingPair'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreedingPair'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/breeding-pairs/{id}/record_progeny/:
    post:
      operationId: api_v1_broodstock_breeding_pairs_record_progeny_create
      description: Record progeny count for a breeding pair.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Breeding Pair.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BreedingPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BreedingPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BreedingPair'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreedingPair'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/egg-suppliers/:
    get:
      operationId: api_v1_broodstock_egg_suppliers_list
      description: ViewSet for egg suppliers.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEggSupplierList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_broodstock_egg_suppliers_create
      description: ViewSet for egg suppliers.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EggSupplier'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EggSupplier'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EggSupplier'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EggSupplier'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/egg-suppliers/{id}/:
    get:
      operationId: api_v1_broodstock_egg_suppliers_retrieve
      description: ViewSet for egg suppliers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Egg Supplier.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EggSupplier'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_broodstock_egg_suppliers_partial_update
      description: ViewSet for egg suppliers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Egg Supplier.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEggSupplier'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEggSupplier'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEggSupplier'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EggSupplier'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_broodstock_egg_suppliers_destroy
      description: ViewSet for egg suppliers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Egg Supplier.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_broodstock_egg_suppliers_update
      description: ViewSet for egg suppliers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Egg Supplier.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EggSupplier'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EggSupplier'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EggSupplier'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EggSupplier'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/egg-productions/:
    get:
      operationId: api_v1_broodstock_egg_productions_list
      description: ViewSet for egg production.
      parameters:
      - in: query
        name: destination_station
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: pair
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: production_date
        schema:
          type: string
          format: date-time
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: source_type
        schema:
          type: string
          x-spec-enum-id: e094a11876888b4b
          enum:
          - external
          - internal
        description: |-
          Internal or external source

          * `internal` - Internal
          * `external` - External
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEggProductionList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_broodstock_egg_productions_create
      description: ViewSet for egg production.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EggProduction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EggProduction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EggProduction'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EggProduction'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/egg-productions/acquire_external/:
    post:
      operationId: api_v1_broodstock_egg_productions_acquire_external_create
      description: Create external egg acquisition.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EggProduction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EggProduction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EggProduction'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EggProduction'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/egg-productions/produce_internal/:
    post:
      operationId: api_v1_broodstock_egg_productions_produce_internal_create
      description: Create internal egg production from a breeding pair.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EggProduction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EggProduction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EggProduction'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EggProduction'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/egg-productions/{id}/:
    get:
      operationId: api_v1_broodstock_egg_productions_retrieve
      description: ViewSet for egg production.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Egg Production.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EggProductionDetail'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_broodstock_egg_productions_partial_update
      description: ViewSet for egg production.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Egg Production.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEggProduction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEggProduction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEggProduction'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EggProduction'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_broodstock_egg_productions_destroy
      description: ViewSet for egg production.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Egg Production.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_broodstock_egg_productions_update
      description: ViewSet for egg production.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Egg Production.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EggProduction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EggProduction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EggProduction'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EggProduction'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/external-egg-batches/:
    get:
      operationId: api_v1_broodstock_external_egg_batches_list
      description: ViewSet for external egg batches.
      parameters:
      - in: query
        name: egg_production
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: supplier
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExternalEggBatchList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_broodstock_external_egg_batches_create
      description: ViewSet for external egg batches.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalEggBatch'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExternalEggBatch'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExternalEggBatch'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalEggBatch'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/external-egg-batches/{id}/:
    get:
      operationId: api_v1_broodstock_external_egg_batches_retrieve
      description: ViewSet for external egg batches.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this External Egg Batch.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalEggBatch'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_broodstock_external_egg_batches_partial_update
      description: ViewSet for external egg batches.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this External Egg Batch.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedExternalEggBatch'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedExternalEggBatch'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedExternalEggBatch'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalEggBatch'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_broodstock_external_egg_batches_destroy
      description: ViewSet for external egg batches.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this External Egg Batch.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_broodstock_external_egg_batches_update
      description: ViewSet for external egg batches.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this External Egg Batch.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalEggBatch'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExternalEggBatch'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExternalEggBatch'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalEggBatch'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/batch-parentages/:
    get:
      operationId: api_v1_broodstock_batch_parentages_list
      description: ViewSet for batch parentage.
      parameters:
      - in: query
        name: assignment_date
        schema:
          type: string
          format: date-time
      - in: query
        name: batch
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: egg_production
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBatchParentageList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_broodstock_batch_parentages_create
      description: ViewSet for batch parentage.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchParentage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BatchParentage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BatchParentage'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchParentage'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/broodstock/batch-parentages/lineage/:
    get:
      operationId: api_v1_broodstock_batch_parentages_lineage_retrieve
      description: Get complete lineage for a batch.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BatchParentage'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/broodstock/batch-parentages/{id}/:
    get:
      operationId: api_v1_broodstock_batch_parentages_retrieve
      description: ViewSet for batch parentage.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Batch Parentage.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchParentage'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_broodstock_batch_parentages_partial_update
      description: ViewSet for batch parentage.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Batch Parentage.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBatchParentage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBatchParentage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBatchParentage'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchParentage'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_broodstock_batch_parentages_destroy
      description: ViewSet for batch parentage.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Batch Parentage.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_broodstock_batch_parentages_update
      description: ViewSet for batch parentage.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Batch Parentage.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchParentage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BatchParentage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BatchParentage'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchParentage'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/geographies/:
    get:
      operationId: api_v1_infrastructure_geographies_list
      description: |-
        API endpoint for managing Geographical locations or zones.

        Geographies represent defined geographical areas relevant to the aquaculture
        operations, such as countries, regions, specific water bodies, or custom zones.
        These can be used to associate other entities (like facilities or environmental
        readings) with a spatial context.
        This endpoint allows for full CRUD operations on Geography instances.

        **Filtering:**
        - `name`: Filter by the exact name of the geography.

        **Searching:**
        - `name`: Search by geography name (partial matches).
        - `description`: Search within the description of the geography.

        **Ordering:**
        - `name` (default)
        - `created_at`
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGeographyList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_infrastructure_geographies_create
      description: |-
        API endpoint for managing Geographical locations or zones.

        Geographies represent defined geographical areas relevant to the aquaculture
        operations, such as countries, regions, specific water bodies, or custom zones.
        These can be used to associate other entities (like facilities or environmental
        readings) with a spatial context.
        This endpoint allows for full CRUD operations on Geography instances.

        **Filtering:**
        - `name`: Filter by the exact name of the geography.

        **Searching:**
        - `name`: Search by geography name (partial matches).
        - `description`: Search within the description of the geography.

        **Ordering:**
        - `name` (default)
        - `created_at`
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Geography'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Geography'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Geography'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Geography'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/geographies/{id}/:
    get:
      operationId: api_v1_infrastructure_geographies_retrieve
      description: |-
        API endpoint for managing Geographical locations or zones.

        Geographies represent defined geographical areas relevant to the aquaculture
        operations, such as countries, regions, specific water bodies, or custom zones.
        These can be used to associate other entities (like facilities or environmental
        readings) with a spatial context.
        This endpoint allows for full CRUD operations on Geography instances.

        **Filtering:**
        - `name`: Filter by the exact name of the geography.

        **Searching:**
        - `name`: Search by geography name (partial matches).
        - `description`: Search within the description of the geography.

        **Ordering:**
        - `name` (default)
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this geography.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Geography'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_infrastructure_geographies_partial_update
      description: |-
        API endpoint for managing Geographical locations or zones.

        Geographies represent defined geographical areas relevant to the aquaculture
        operations, such as countries, regions, specific water bodies, or custom zones.
        These can be used to associate other entities (like facilities or environmental
        readings) with a spatial context.
        This endpoint allows for full CRUD operations on Geography instances.

        **Filtering:**
        - `name`: Filter by the exact name of the geography.

        **Searching:**
        - `name`: Search by geography name (partial matches).
        - `description`: Search within the description of the geography.

        **Ordering:**
        - `name` (default)
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this geography.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGeography'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGeography'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGeography'
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Geography'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_infrastructure_geographies_destroy
      description: |-
        API endpoint for managing Geographical locations or zones.

        Geographies represent defined geographical areas relevant to the aquaculture
        operations, such as countries, regions, specific water bodies, or custom zones.
        These can be used to associate other entities (like facilities or environmental
        readings) with a spatial context.
        This endpoint allows for full CRUD operations on Geography instances.

        **Filtering:**
        - `name`: Filter by the exact name of the geography.

        **Searching:**
        - `name`: Search by geography name (partial matches).
        - `description`: Search within the description of the geography.

        **Ordering:**
        - `name` (default)
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this geography.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_infrastructure_geographies_update
      description: |-
        API endpoint for managing Geographical locations or zones.

        Geographies represent defined geographical areas relevant to the aquaculture
        operations, such as countries, regions, specific water bodies, or custom zones.
        These can be used to associate other entities (like facilities or environmental
        readings) with a spatial context.
        This endpoint allows for full CRUD operations on Geography instances.

        **Filtering:**
        - `name`: Filter by the exact name of the geography.

        **Searching:**
        - `name`: Search by geography name (partial matches).
        - `description`: Search within the description of the geography.

        **Ordering:**
        - `name` (default)
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this geography.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Geography'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Geography'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Geography'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Geography'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/areas/:
    get:
      operationId: api_v1_infrastructure_areas_list
      description: |-
        API endpoint for managing Areas within the aquaculture facility.

        Areas represent distinct geographical or functional zones within a larger geography
        (e.g., a specific section of a farm). This endpoint allows for full CRUD operations
        on Area instances.

        **Filtering:**
        - `name`: Filter by the exact name of the area.
        - `geography`: Filter by the ID of the parent Geography.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by area name (partial matches).
        - `geography__name`: Search by the name of the parent Geography (partial matches).

        **Ordering:**
        - `name` (default)
        - `geography__name`
        - `created_at`
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: geography
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAreaList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_infrastructure_areas_create
      description: |-
        API endpoint for managing Areas within the aquaculture facility.

        Areas represent distinct geographical or functional zones within a larger geography
        (e.g., a specific section of a farm). This endpoint allows for full CRUD operations
        on Area instances.

        **Filtering:**
        - `name`: Filter by the exact name of the area.
        - `geography`: Filter by the ID of the parent Geography.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by area name (partial matches).
        - `geography__name`: Search by the name of the parent Geography (partial matches).

        **Ordering:**
        - `name` (default)
        - `geography__name`
        - `created_at`
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Area'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Area'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Area'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/areas/{id}/:
    get:
      operationId: api_v1_infrastructure_areas_retrieve
      description: |-
        API endpoint for managing Areas within the aquaculture facility.

        Areas represent distinct geographical or functional zones within a larger geography
        (e.g., a specific section of a farm). This endpoint allows for full CRUD operations
        on Area instances.

        **Filtering:**
        - `name`: Filter by the exact name of the area.
        - `geography`: Filter by the ID of the parent Geography.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by area name (partial matches).
        - `geography__name`: Search by the name of the parent Geography (partial matches).

        **Ordering:**
        - `name` (default)
        - `geography__name`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this area.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_infrastructure_areas_partial_update
      description: |-
        API endpoint for managing Areas within the aquaculture facility.

        Areas represent distinct geographical or functional zones within a larger geography
        (e.g., a specific section of a farm). This endpoint allows for full CRUD operations
        on Area instances.

        **Filtering:**
        - `name`: Filter by the exact name of the area.
        - `geography`: Filter by the ID of the parent Geography.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by area name (partial matches).
        - `geography__name`: Search by the name of the parent Geography (partial matches).

        **Ordering:**
        - `name` (default)
        - `geography__name`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this area.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedArea'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedArea'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedArea'
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_infrastructure_areas_destroy
      description: |-
        API endpoint for managing Areas within the aquaculture facility.

        Areas represent distinct geographical or functional zones within a larger geography
        (e.g., a specific section of a farm). This endpoint allows for full CRUD operations
        on Area instances.

        **Filtering:**
        - `name`: Filter by the exact name of the area.
        - `geography`: Filter by the ID of the parent Geography.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by area name (partial matches).
        - `geography__name`: Search by the name of the parent Geography (partial matches).

        **Ordering:**
        - `name` (default)
        - `geography__name`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this area.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_infrastructure_areas_update
      description: |-
        API endpoint for managing Areas within the aquaculture facility.

        Areas represent distinct geographical or functional zones within a larger geography
        (e.g., a specific section of a farm). This endpoint allows for full CRUD operations
        on Area instances.

        **Filtering:**
        - `name`: Filter by the exact name of the area.
        - `geography`: Filter by the ID of the parent Geography.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by area name (partial matches).
        - `geography__name`: Search by the name of the parent Geography (partial matches).

        **Ordering:**
        - `name` (default)
        - `geography__name`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this area.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Area'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Area'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Area'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/freshwater-stations/:
    get:
      operationId: api_v1_infrastructure_freshwater_stations_list
      description: |-
        API endpoint for managing Freshwater Stations.

        Freshwater Stations represent sources of freshwater for the aquaculture facility,
        such as wells, boreholes, or municipal supplies. They can be categorized by type
        and associated with a specific geographical location.
        This endpoint allows for full CRUD operations on FreshwaterStation instances.

        **Filtering:**
        - `name`: Filter by the exact name of the freshwater station.
        - `station_type`: Filter by the type of station (e.g., WELL, BOREHOLE, MUNICIPAL).
        - `geography`: Filter by the ID of the associated Geography.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by station name (partial matches).
        - `description`: Search within the description of the station.
        - `geography__name`: Search by the name of the associated Geography.

        **Ordering:**
        - `name` (default)
        - `station_type`
        - `geography__name`: Order by the name of the associated Geography.
        - `created_at`
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: geography
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: station_type
        schema:
          type: string
          x-spec-enum-id: 20dcb2314fc68e78
          enum:
          - BROODSTOCK
          - FRESHWATER
        description: |-
          * `FRESHWATER` - Freshwater
          * `BROODSTOCK` - Broodstock
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFreshwaterStationList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_infrastructure_freshwater_stations_create
      description: |-
        API endpoint for managing Freshwater Stations.

        Freshwater Stations represent sources of freshwater for the aquaculture facility,
        such as wells, boreholes, or municipal supplies. They can be categorized by type
        and associated with a specific geographical location.
        This endpoint allows for full CRUD operations on FreshwaterStation instances.

        **Filtering:**
        - `name`: Filter by the exact name of the freshwater station.
        - `station_type`: Filter by the type of station (e.g., WELL, BOREHOLE, MUNICIPAL).
        - `geography`: Filter by the ID of the associated Geography.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by station name (partial matches).
        - `description`: Search within the description of the station.
        - `geography__name`: Search by the name of the associated Geography.

        **Ordering:**
        - `name` (default)
        - `station_type`
        - `geography__name`: Order by the name of the associated Geography.
        - `created_at`
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FreshwaterStation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FreshwaterStation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FreshwaterStation'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreshwaterStation'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/freshwater-stations/{id}/:
    get:
      operationId: api_v1_infrastructure_freshwater_stations_retrieve
      description: |-
        API endpoint for managing Freshwater Stations.

        Freshwater Stations represent sources of freshwater for the aquaculture facility,
        such as wells, boreholes, or municipal supplies. They can be categorized by type
        and associated with a specific geographical location.
        This endpoint allows for full CRUD operations on FreshwaterStation instances.

        **Filtering:**
        - `name`: Filter by the exact name of the freshwater station.
        - `station_type`: Filter by the type of station (e.g., WELL, BOREHOLE, MUNICIPAL).
        - `geography`: Filter by the ID of the associated Geography.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by station name (partial matches).
        - `description`: Search within the description of the station.
        - `geography__name`: Search by the name of the associated Geography.

        **Ordering:**
        - `name` (default)
        - `station_type`
        - `geography__name`: Order by the name of the associated Geography.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this freshwater station.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreshwaterStation'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_infrastructure_freshwater_stations_partial_update
      description: |-
        API endpoint for managing Freshwater Stations.

        Freshwater Stations represent sources of freshwater for the aquaculture facility,
        such as wells, boreholes, or municipal supplies. They can be categorized by type
        and associated with a specific geographical location.
        This endpoint allows for full CRUD operations on FreshwaterStation instances.

        **Filtering:**
        - `name`: Filter by the exact name of the freshwater station.
        - `station_type`: Filter by the type of station (e.g., WELL, BOREHOLE, MUNICIPAL).
        - `geography`: Filter by the ID of the associated Geography.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by station name (partial matches).
        - `description`: Search within the description of the station.
        - `geography__name`: Search by the name of the associated Geography.

        **Ordering:**
        - `name` (default)
        - `station_type`
        - `geography__name`: Order by the name of the associated Geography.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this freshwater station.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFreshwaterStation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFreshwaterStation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFreshwaterStation'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreshwaterStation'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_infrastructure_freshwater_stations_destroy
      description: |-
        API endpoint for managing Freshwater Stations.

        Freshwater Stations represent sources of freshwater for the aquaculture facility,
        such as wells, boreholes, or municipal supplies. They can be categorized by type
        and associated with a specific geographical location.
        This endpoint allows for full CRUD operations on FreshwaterStation instances.

        **Filtering:**
        - `name`: Filter by the exact name of the freshwater station.
        - `station_type`: Filter by the type of station (e.g., WELL, BOREHOLE, MUNICIPAL).
        - `geography`: Filter by the ID of the associated Geography.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by station name (partial matches).
        - `description`: Search within the description of the station.
        - `geography__name`: Search by the name of the associated Geography.

        **Ordering:**
        - `name` (default)
        - `station_type`
        - `geography__name`: Order by the name of the associated Geography.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this freshwater station.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_infrastructure_freshwater_stations_update
      description: |-
        API endpoint for managing Freshwater Stations.

        Freshwater Stations represent sources of freshwater for the aquaculture facility,
        such as wells, boreholes, or municipal supplies. They can be categorized by type
        and associated with a specific geographical location.
        This endpoint allows for full CRUD operations on FreshwaterStation instances.

        **Filtering:**
        - `name`: Filter by the exact name of the freshwater station.
        - `station_type`: Filter by the type of station (e.g., WELL, BOREHOLE, MUNICIPAL).
        - `geography`: Filter by the ID of the associated Geography.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by station name (partial matches).
        - `description`: Search within the description of the station.
        - `geography__name`: Search by the name of the associated Geography.

        **Ordering:**
        - `name` (default)
        - `station_type`
        - `geography__name`: Order by the name of the associated Geography.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this freshwater station.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FreshwaterStation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FreshwaterStation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FreshwaterStation'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreshwaterStation'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/halls/:
    get:
      operationId: api_v1_infrastructure_halls_list
      description: |-
        API endpoint for managing Halls within the aquaculture facility.

        Halls represent distinct buildings or sections within the facility,
        often containing multiple containers or systems. They can be associated
        with a Freshwater Station.
        This endpoint allows for full CRUD operations on Hall instances.

        **Filtering:**
        - `name`: Filter by the exact name of the hall.
        - `freshwater_station`: Filter by the ID of the associated Freshwater Station.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by hall name (partial matches).
        - `description`: Search within the description of the hall.
        - `freshwater_station__name`: Search by the name of the associated Freshwater Station.

        **Ordering:**
        - `name` (default)
        - `freshwater_station__name`: Order by the name of the associated Freshwater Station.
        - `created_at`
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: freshwater_station
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHallList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_infrastructure_halls_create
      description: |-
        API endpoint for managing Halls within the aquaculture facility.

        Halls represent distinct buildings or sections within the facility,
        often containing multiple containers or systems. They can be associated
        with a Freshwater Station.
        This endpoint allows for full CRUD operations on Hall instances.

        **Filtering:**
        - `name`: Filter by the exact name of the hall.
        - `freshwater_station`: Filter by the ID of the associated Freshwater Station.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by hall name (partial matches).
        - `description`: Search within the description of the hall.
        - `freshwater_station__name`: Search by the name of the associated Freshwater Station.

        **Ordering:**
        - `name` (default)
        - `freshwater_station__name`: Order by the name of the associated Freshwater Station.
        - `created_at`
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hall'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Hall'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Hall'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hall'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/halls/{id}/:
    get:
      operationId: api_v1_infrastructure_halls_retrieve
      description: |-
        API endpoint for managing Halls within the aquaculture facility.

        Halls represent distinct buildings or sections within the facility,
        often containing multiple containers or systems. They can be associated
        with a Freshwater Station.
        This endpoint allows for full CRUD operations on Hall instances.

        **Filtering:**
        - `name`: Filter by the exact name of the hall.
        - `freshwater_station`: Filter by the ID of the associated Freshwater Station.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by hall name (partial matches).
        - `description`: Search within the description of the hall.
        - `freshwater_station__name`: Search by the name of the associated Freshwater Station.

        **Ordering:**
        - `name` (default)
        - `freshwater_station__name`: Order by the name of the associated Freshwater Station.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this hall.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hall'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_infrastructure_halls_partial_update
      description: |-
        API endpoint for managing Halls within the aquaculture facility.

        Halls represent distinct buildings or sections within the facility,
        often containing multiple containers or systems. They can be associated
        with a Freshwater Station.
        This endpoint allows for full CRUD operations on Hall instances.

        **Filtering:**
        - `name`: Filter by the exact name of the hall.
        - `freshwater_station`: Filter by the ID of the associated Freshwater Station.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by hall name (partial matches).
        - `description`: Search within the description of the hall.
        - `freshwater_station__name`: Search by the name of the associated Freshwater Station.

        **Ordering:**
        - `name` (default)
        - `freshwater_station__name`: Order by the name of the associated Freshwater Station.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this hall.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedHall'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedHall'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedHall'
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hall'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_infrastructure_halls_destroy
      description: |-
        API endpoint for managing Halls within the aquaculture facility.

        Halls represent distinct buildings or sections within the facility,
        often containing multiple containers or systems. They can be associated
        with a Freshwater Station.
        This endpoint allows for full CRUD operations on Hall instances.

        **Filtering:**
        - `name`: Filter by the exact name of the hall.
        - `freshwater_station`: Filter by the ID of the associated Freshwater Station.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by hall name (partial matches).
        - `description`: Search within the description of the hall.
        - `freshwater_station__name`: Search by the name of the associated Freshwater Station.

        **Ordering:**
        - `name` (default)
        - `freshwater_station__name`: Order by the name of the associated Freshwater Station.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this hall.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_infrastructure_halls_update
      description: |-
        API endpoint for managing Halls within the aquaculture facility.

        Halls represent distinct buildings or sections within the facility,
        often containing multiple containers or systems. They can be associated
        with a Freshwater Station.
        This endpoint allows for full CRUD operations on Hall instances.

        **Filtering:**
        - `name`: Filter by the exact name of the hall.
        - `freshwater_station`: Filter by the ID of the associated Freshwater Station.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by hall name (partial matches).
        - `description`: Search within the description of the hall.
        - `freshwater_station__name`: Search by the name of the associated Freshwater Station.

        **Ordering:**
        - `name` (default)
        - `freshwater_station__name`: Order by the name of the associated Freshwater Station.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this hall.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hall'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Hall'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Hall'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hall'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/container-types/:
    get:
      operationId: api_v1_infrastructure_container_types_list
      description: |-
        API endpoint for managing Container Types.

        Container Types define the characteristics and categories of different containers
        used in the aquaculture facility (e.g., "Circular Tank - 5000L", "Rectangular Pond - 1 Ha").
        This endpoint allows for full CRUD operations on ContainerType instances.

        **Filtering:**
        - `name`: Filter by the exact name of the container type.
        - `category`: Filter by the category of the container type (e.g., TANK, POND, CAGE).

        **Searching:**
        - `name`: Search by container type name (partial matches).
        - `description`: Search within the description of the container type.

        **Ordering:**
        - `name` (default)
        - `category`
        - `created_at`
      parameters:
      - in: query
        name: category
        schema:
          type: string
          x-spec-enum-id: 656f258b59896f76
          enum:
          - OTHER
          - PEN
          - TANK
          - TRAY
        description: |-
          * `TANK` - Tank
          * `PEN` - Pen
          * `TRAY` - Tray
          * `OTHER` - Other
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedContainerTypeList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_infrastructure_container_types_create
      description: |-
        API endpoint for managing Container Types.

        Container Types define the characteristics and categories of different containers
        used in the aquaculture facility (e.g., "Circular Tank - 5000L", "Rectangular Pond - 1 Ha").
        This endpoint allows for full CRUD operations on ContainerType instances.

        **Filtering:**
        - `name`: Filter by the exact name of the container type.
        - `category`: Filter by the category of the container type (e.g., TANK, POND, CAGE).

        **Searching:**
        - `name`: Search by container type name (partial matches).
        - `description`: Search within the description of the container type.

        **Ordering:**
        - `name` (default)
        - `category`
        - `created_at`
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContainerType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ContainerType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ContainerType'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerType'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/container-types/{id}/:
    get:
      operationId: api_v1_infrastructure_container_types_retrieve
      description: |-
        API endpoint for managing Container Types.

        Container Types define the characteristics and categories of different containers
        used in the aquaculture facility (e.g., "Circular Tank - 5000L", "Rectangular Pond - 1 Ha").
        This endpoint allows for full CRUD operations on ContainerType instances.

        **Filtering:**
        - `name`: Filter by the exact name of the container type.
        - `category`: Filter by the category of the container type (e.g., TANK, POND, CAGE).

        **Searching:**
        - `name`: Search by container type name (partial matches).
        - `description`: Search within the description of the container type.

        **Ordering:**
        - `name` (default)
        - `category`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this container type.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerType'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_infrastructure_container_types_partial_update
      description: |-
        API endpoint for managing Container Types.

        Container Types define the characteristics and categories of different containers
        used in the aquaculture facility (e.g., "Circular Tank - 5000L", "Rectangular Pond - 1 Ha").
        This endpoint allows for full CRUD operations on ContainerType instances.

        **Filtering:**
        - `name`: Filter by the exact name of the container type.
        - `category`: Filter by the category of the container type (e.g., TANK, POND, CAGE).

        **Searching:**
        - `name`: Search by container type name (partial matches).
        - `description`: Search within the description of the container type.

        **Ordering:**
        - `name` (default)
        - `category`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this container type.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedContainerType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedContainerType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedContainerType'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerType'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_infrastructure_container_types_destroy
      description: |-
        API endpoint for managing Container Types.

        Container Types define the characteristics and categories of different containers
        used in the aquaculture facility (e.g., "Circular Tank - 5000L", "Rectangular Pond - 1 Ha").
        This endpoint allows for full CRUD operations on ContainerType instances.

        **Filtering:**
        - `name`: Filter by the exact name of the container type.
        - `category`: Filter by the category of the container type (e.g., TANK, POND, CAGE).

        **Searching:**
        - `name`: Search by container type name (partial matches).
        - `description`: Search within the description of the container type.

        **Ordering:**
        - `name` (default)
        - `category`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this container type.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_infrastructure_container_types_update
      description: |-
        API endpoint for managing Container Types.

        Container Types define the characteristics and categories of different containers
        used in the aquaculture facility (e.g., "Circular Tank - 5000L", "Rectangular Pond - 1 Ha").
        This endpoint allows for full CRUD operations on ContainerType instances.

        **Filtering:**
        - `name`: Filter by the exact name of the container type.
        - `category`: Filter by the category of the container type (e.g., TANK, POND, CAGE).

        **Searching:**
        - `name`: Search by container type name (partial matches).
        - `description`: Search within the description of the container type.

        **Ordering:**
        - `name` (default)
        - `category`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this container type.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContainerType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ContainerType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ContainerType'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerType'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/containers/:
    get:
      operationId: api_v1_infrastructure_containers_list
      description: |-
        API endpoint for managing Containers within the aquaculture facility.

        Containers represent physical units (e.g., tanks, ponds, cages) used for
        holding aquatic organisms. They are associated with a specific container type,
        and can be located within a Hall and an Area. This endpoint allows for
        full CRUD operations on Container instances.

        **Filtering:**
        - `name`: Filter by the exact name of the container.
        - `container_type`: Filter by the ID of the ContainerType.
        - `hall`: Filter by the ID of the parent Hall.
        - `area`: Filter by the ID of the parent Area.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by container name (partial matches).
        - `container_type__name`: Search by the name of the ContainerType.
        - `hall__name`: Search by the name of the parent Hall.
        - `area__name`: Search by the name of the parent Area.

        **Ordering:**
        - `name` (default)
        - `container_type__name`
        - `created_at`
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: area
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: container_type
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: hall
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedContainerList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_infrastructure_containers_create
      description: |-
        API endpoint for managing Containers within the aquaculture facility.

        Containers represent physical units (e.g., tanks, ponds, cages) used for
        holding aquatic organisms. They are associated with a specific container type,
        and can be located within a Hall and an Area. This endpoint allows for
        full CRUD operations on Container instances.

        **Filtering:**
        - `name`: Filter by the exact name of the container.
        - `container_type`: Filter by the ID of the ContainerType.
        - `hall`: Filter by the ID of the parent Hall.
        - `area`: Filter by the ID of the parent Area.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by container name (partial matches).
        - `container_type__name`: Search by the name of the ContainerType.
        - `hall__name`: Search by the name of the parent Hall.
        - `area__name`: Search by the name of the parent Area.

        **Ordering:**
        - `name` (default)
        - `container_type__name`
        - `created_at`
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Container'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Container'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Container'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/containers/{id}/:
    get:
      operationId: api_v1_infrastructure_containers_retrieve
      description: |-
        API endpoint for managing Containers within the aquaculture facility.

        Containers represent physical units (e.g., tanks, ponds, cages) used for
        holding aquatic organisms. They are associated with a specific container type,
        and can be located within a Hall and an Area. This endpoint allows for
        full CRUD operations on Container instances.

        **Filtering:**
        - `name`: Filter by the exact name of the container.
        - `container_type`: Filter by the ID of the ContainerType.
        - `hall`: Filter by the ID of the parent Hall.
        - `area`: Filter by the ID of the parent Area.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by container name (partial matches).
        - `container_type__name`: Search by the name of the ContainerType.
        - `hall__name`: Search by the name of the parent Hall.
        - `area__name`: Search by the name of the parent Area.

        **Ordering:**
        - `name` (default)
        - `container_type__name`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this container.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_infrastructure_containers_partial_update
      description: |-
        API endpoint for managing Containers within the aquaculture facility.

        Containers represent physical units (e.g., tanks, ponds, cages) used for
        holding aquatic organisms. They are associated with a specific container type,
        and can be located within a Hall and an Area. This endpoint allows for
        full CRUD operations on Container instances.

        **Filtering:**
        - `name`: Filter by the exact name of the container.
        - `container_type`: Filter by the ID of the ContainerType.
        - `hall`: Filter by the ID of the parent Hall.
        - `area`: Filter by the ID of the parent Area.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by container name (partial matches).
        - `container_type__name`: Search by the name of the ContainerType.
        - `hall__name`: Search by the name of the parent Hall.
        - `area__name`: Search by the name of the parent Area.

        **Ordering:**
        - `name` (default)
        - `container_type__name`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this container.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedContainer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedContainer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedContainer'
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_infrastructure_containers_destroy
      description: |-
        API endpoint for managing Containers within the aquaculture facility.

        Containers represent physical units (e.g., tanks, ponds, cages) used for
        holding aquatic organisms. They are associated with a specific container type,
        and can be located within a Hall and an Area. This endpoint allows for
        full CRUD operations on Container instances.

        **Filtering:**
        - `name`: Filter by the exact name of the container.
        - `container_type`: Filter by the ID of the ContainerType.
        - `hall`: Filter by the ID of the parent Hall.
        - `area`: Filter by the ID of the parent Area.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by container name (partial matches).
        - `container_type__name`: Search by the name of the ContainerType.
        - `hall__name`: Search by the name of the parent Hall.
        - `area__name`: Search by the name of the parent Area.

        **Ordering:**
        - `name` (default)
        - `container_type__name`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this container.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_infrastructure_containers_update
      description: |-
        API endpoint for managing Containers within the aquaculture facility.

        Containers represent physical units (e.g., tanks, ponds, cages) used for
        holding aquatic organisms. They are associated with a specific container type,
        and can be located within a Hall and an Area. This endpoint allows for
        full CRUD operations on Container instances.

        **Filtering:**
        - `name`: Filter by the exact name of the container.
        - `container_type`: Filter by the ID of the ContainerType.
        - `hall`: Filter by the ID of the parent Hall.
        - `area`: Filter by the ID of the parent Area.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by container name (partial matches).
        - `container_type__name`: Search by the name of the ContainerType.
        - `hall__name`: Search by the name of the parent Hall.
        - `area__name`: Search by the name of the parent Area.

        **Ordering:**
        - `name` (default)
        - `container_type__name`
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this container.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Container'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Container'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Container'
        required: true
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/sensors/:
    get:
      operationId: api_v1_infrastructure_sensors_list
      description: |-
        API endpoint for managing Sensors within the aquaculture facility.

        Sensors are devices used to monitor various environmental parameters (e.g., temperature,
        pH, dissolved oxygen) within specific containers. Each sensor can be of a particular
        type, have a unique serial number, and be associated with a manufacturer.
        This endpoint allows for full CRUD operations on Sensor instances.

        **Filtering:**
        - `name`: Filter by the exact name of the sensor.
        - `sensor_type`: Filter by the type of the sensor (e.g., TEMPERATURE, PH, DO).
        - `container`: Filter by the ID of the Container where the sensor is installed.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by sensor name (partial matches).
        - `serial_number`: Search by the sensor's serial number.
        - `manufacturer`: Search by the sensor's manufacturer.
        - `container__name`: Search by the name of the Container where the sensor is installed.

        **Ordering:**
        - `name` (default)
        - `sensor_type`
        - `container__name`: Order by the name of the associated Container.
        - `created_at`
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: container
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: sensor_type
        schema:
          type: string
          x-spec-enum-id: 6dac7b248b45213d
          enum:
          - CO2
          - OTHER
          - OXYGEN
          - PH
          - SALINITY
          - TEMPERATURE
        description: |-
          * `TEMPERATURE` - Temperature
          * `OXYGEN` - Oxygen
          * `PH` - pH
          * `SALINITY` - Salinity
          * `CO2` - CO2
          * `OTHER` - Other
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSensorList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_infrastructure_sensors_create
      description: |-
        API endpoint for managing Sensors within the aquaculture facility.

        Sensors are devices used to monitor various environmental parameters (e.g., temperature,
        pH, dissolved oxygen) within specific containers. Each sensor can be of a particular
        type, have a unique serial number, and be associated with a manufacturer.
        This endpoint allows for full CRUD operations on Sensor instances.

        **Filtering:**
        - `name`: Filter by the exact name of the sensor.
        - `sensor_type`: Filter by the type of the sensor (e.g., TEMPERATURE, PH, DO).
        - `container`: Filter by the ID of the Container where the sensor is installed.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by sensor name (partial matches).
        - `serial_number`: Search by the sensor's serial number.
        - `manufacturer`: Search by the sensor's manufacturer.
        - `container__name`: Search by the name of the Container where the sensor is installed.

        **Ordering:**
        - `name` (default)
        - `sensor_type`
        - `container__name`: Order by the name of the associated Container.
        - `created_at`
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sensor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Sensor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Sensor'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/sensors/{id}/:
    get:
      operationId: api_v1_infrastructure_sensors_retrieve
      description: |-
        API endpoint for managing Sensors within the aquaculture facility.

        Sensors are devices used to monitor various environmental parameters (e.g., temperature,
        pH, dissolved oxygen) within specific containers. Each sensor can be of a particular
        type, have a unique serial number, and be associated with a manufacturer.
        This endpoint allows for full CRUD operations on Sensor instances.

        **Filtering:**
        - `name`: Filter by the exact name of the sensor.
        - `sensor_type`: Filter by the type of the sensor (e.g., TEMPERATURE, PH, DO).
        - `container`: Filter by the ID of the Container where the sensor is installed.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by sensor name (partial matches).
        - `serial_number`: Search by the sensor's serial number.
        - `manufacturer`: Search by the sensor's manufacturer.
        - `container__name`: Search by the name of the Container where the sensor is installed.

        **Ordering:**
        - `name` (default)
        - `sensor_type`
        - `container__name`: Order by the name of the associated Container.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this sensor.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_infrastructure_sensors_partial_update
      description: |-
        API endpoint for managing Sensors within the aquaculture facility.

        Sensors are devices used to monitor various environmental parameters (e.g., temperature,
        pH, dissolved oxygen) within specific containers. Each sensor can be of a particular
        type, have a unique serial number, and be associated with a manufacturer.
        This endpoint allows for full CRUD operations on Sensor instances.

        **Filtering:**
        - `name`: Filter by the exact name of the sensor.
        - `sensor_type`: Filter by the type of the sensor (e.g., TEMPERATURE, PH, DO).
        - `container`: Filter by the ID of the Container where the sensor is installed.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by sensor name (partial matches).
        - `serial_number`: Search by the sensor's serial number.
        - `manufacturer`: Search by the sensor's manufacturer.
        - `container__name`: Search by the name of the Container where the sensor is installed.

        **Ordering:**
        - `name` (default)
        - `sensor_type`
        - `container__name`: Order by the name of the associated Container.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this sensor.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSensor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSensor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSensor'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_infrastructure_sensors_destroy
      description: |-
        API endpoint for managing Sensors within the aquaculture facility.

        Sensors are devices used to monitor various environmental parameters (e.g., temperature,
        pH, dissolved oxygen) within specific containers. Each sensor can be of a particular
        type, have a unique serial number, and be associated with a manufacturer.
        This endpoint allows for full CRUD operations on Sensor instances.

        **Filtering:**
        - `name`: Filter by the exact name of the sensor.
        - `sensor_type`: Filter by the type of the sensor (e.g., TEMPERATURE, PH, DO).
        - `container`: Filter by the ID of the Container where the sensor is installed.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by sensor name (partial matches).
        - `serial_number`: Search by the sensor's serial number.
        - `manufacturer`: Search by the sensor's manufacturer.
        - `container__name`: Search by the name of the Container where the sensor is installed.

        **Ordering:**
        - `name` (default)
        - `sensor_type`
        - `container__name`: Order by the name of the associated Container.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this sensor.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_infrastructure_sensors_update
      description: |-
        API endpoint for managing Sensors within the aquaculture facility.

        Sensors are devices used to monitor various environmental parameters (e.g., temperature,
        pH, dissolved oxygen) within specific containers. Each sensor can be of a particular
        type, have a unique serial number, and be associated with a manufacturer.
        This endpoint allows for full CRUD operations on Sensor instances.

        **Filtering:**
        - `name`: Filter by the exact name of the sensor.
        - `sensor_type`: Filter by the type of the sensor (e.g., TEMPERATURE, PH, DO).
        - `container`: Filter by the ID of the Container where the sensor is installed.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by sensor name (partial matches).
        - `serial_number`: Search by the sensor's serial number.
        - `manufacturer`: Search by the sensor's manufacturer.
        - `container__name`: Search by the name of the Container where the sensor is installed.

        **Ordering:**
        - `name` (default)
        - `sensor_type`
        - `container__name`: Order by the name of the associated Container.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this sensor.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sensor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Sensor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Sensor'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/feed-containers/:
    get:
      operationId: api_v1_infrastructure_feed_containers_list
      description: |-
        API endpoint for managing Feed Containers within the aquaculture facility.

        Feed Containers represent physical units (e.g., silos, hoppers, bags) used for
        storing feed. They can be associated with a specific container type (defining
        its nature, e.g., "Silo - 10 Ton"), and can be located within a Hall and an Area.
        This endpoint allows for full CRUD operations on FeedContainer instances.

        **Filtering:**
        - `name`: Filter by the exact name of the feed container.
        - `container_type`: Filter by the ID of the feed container's type (e.g., Silo, Hopper).
        - `hall`: Filter by the ID of the parent Hall where the feed container is located.
        - `area`: Filter by the ID of the parent Area where the feed container is located.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by feed container name (partial matches).
        - `hall__name`: Search by the name of the parent Hall.
        - `area__name`: Search by the name of the parent Area.

        **Ordering:**
        - `name` (default)
        - `container_type`: Order by the type of the feed container.
        - `created_at`
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: area
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: container_type
        schema:
          type: string
          x-spec-enum-id: f0c42b84f75e37ff
          enum:
          - BARGE
          - OTHER
          - SILO
          - TANK
        description: |-
          * `SILO` - Silo
          * `BARGE` - Barge
          * `TANK` - Tank
          * `OTHER` - Other
      - in: query
        name: hall
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFeedContainerList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_infrastructure_feed_containers_create
      description: |-
        API endpoint for managing Feed Containers within the aquaculture facility.

        Feed Containers represent physical units (e.g., silos, hoppers, bags) used for
        storing feed. They can be associated with a specific container type (defining
        its nature, e.g., "Silo - 10 Ton"), and can be located within a Hall and an Area.
        This endpoint allows for full CRUD operations on FeedContainer instances.

        **Filtering:**
        - `name`: Filter by the exact name of the feed container.
        - `container_type`: Filter by the ID of the feed container's type (e.g., Silo, Hopper).
        - `hall`: Filter by the ID of the parent Hall where the feed container is located.
        - `area`: Filter by the ID of the parent Area where the feed container is located.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by feed container name (partial matches).
        - `hall__name`: Search by the name of the parent Hall.
        - `area__name`: Search by the name of the parent Area.

        **Ordering:**
        - `name` (default)
        - `container_type`: Order by the type of the feed container.
        - `created_at`
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedContainer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedContainer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedContainer'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedContainer'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/feed-containers/{id}/:
    get:
      operationId: api_v1_infrastructure_feed_containers_retrieve
      description: |-
        API endpoint for managing Feed Containers within the aquaculture facility.

        Feed Containers represent physical units (e.g., silos, hoppers, bags) used for
        storing feed. They can be associated with a specific container type (defining
        its nature, e.g., "Silo - 10 Ton"), and can be located within a Hall and an Area.
        This endpoint allows for full CRUD operations on FeedContainer instances.

        **Filtering:**
        - `name`: Filter by the exact name of the feed container.
        - `container_type`: Filter by the ID of the feed container's type (e.g., Silo, Hopper).
        - `hall`: Filter by the ID of the parent Hall where the feed container is located.
        - `area`: Filter by the ID of the parent Area where the feed container is located.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by feed container name (partial matches).
        - `hall__name`: Search by the name of the parent Hall.
        - `area__name`: Search by the name of the parent Area.

        **Ordering:**
        - `name` (default)
        - `container_type`: Order by the type of the feed container.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed container.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedContainer'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_infrastructure_feed_containers_partial_update
      description: |-
        API endpoint for managing Feed Containers within the aquaculture facility.

        Feed Containers represent physical units (e.g., silos, hoppers, bags) used for
        storing feed. They can be associated with a specific container type (defining
        its nature, e.g., "Silo - 10 Ton"), and can be located within a Hall and an Area.
        This endpoint allows for full CRUD operations on FeedContainer instances.

        **Filtering:**
        - `name`: Filter by the exact name of the feed container.
        - `container_type`: Filter by the ID of the feed container's type (e.g., Silo, Hopper).
        - `hall`: Filter by the ID of the parent Hall where the feed container is located.
        - `area`: Filter by the ID of the parent Area where the feed container is located.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by feed container name (partial matches).
        - `hall__name`: Search by the name of the parent Hall.
        - `area__name`: Search by the name of the parent Area.

        **Ordering:**
        - `name` (default)
        - `container_type`: Order by the type of the feed container.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed container.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFeedContainer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFeedContainer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFeedContainer'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedContainer'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_infrastructure_feed_containers_destroy
      description: |-
        API endpoint for managing Feed Containers within the aquaculture facility.

        Feed Containers represent physical units (e.g., silos, hoppers, bags) used for
        storing feed. They can be associated with a specific container type (defining
        its nature, e.g., "Silo - 10 Ton"), and can be located within a Hall and an Area.
        This endpoint allows for full CRUD operations on FeedContainer instances.

        **Filtering:**
        - `name`: Filter by the exact name of the feed container.
        - `container_type`: Filter by the ID of the feed container's type (e.g., Silo, Hopper).
        - `hall`: Filter by the ID of the parent Hall where the feed container is located.
        - `area`: Filter by the ID of the parent Area where the feed container is located.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by feed container name (partial matches).
        - `hall__name`: Search by the name of the parent Hall.
        - `area__name`: Search by the name of the parent Area.

        **Ordering:**
        - `name` (default)
        - `container_type`: Order by the type of the feed container.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed container.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_infrastructure_feed_containers_update
      description: |-
        API endpoint for managing Feed Containers within the aquaculture facility.

        Feed Containers represent physical units (e.g., silos, hoppers, bags) used for
        storing feed. They can be associated with a specific container type (defining
        its nature, e.g., "Silo - 10 Ton"), and can be located within a Hall and an Area.
        This endpoint allows for full CRUD operations on FeedContainer instances.

        **Filtering:**
        - `name`: Filter by the exact name of the feed container.
        - `container_type`: Filter by the ID of the feed container's type (e.g., Silo, Hopper).
        - `hall`: Filter by the ID of the parent Hall where the feed container is located.
        - `area`: Filter by the ID of the parent Area where the feed container is located.
        - `active`: Filter by active status (boolean).

        **Searching:**
        - `name`: Search by feed container name (partial matches).
        - `hall__name`: Search by the name of the parent Hall.
        - `area__name`: Search by the name of the parent Area.

        **Ordering:**
        - `name` (default)
        - `container_type`: Order by the type of the feed container.
        - `created_at`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this feed container.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedContainer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedContainer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedContainer'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedContainer'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/infrastructure/overview/:
    get:
      operationId: infrastructure_overview
      description: Retrieve aggregated infrastructure overview metrics. Returns totals
        for containers, capacity, active biomass, a placeholder sensor alert count,
        and the number of feeding events in the last 24 hours.
      tags:
      - Infrastructure
      security:
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_containers:
                    type: integer
                    maximum: 9223372036854775807
                    minimum: -9223372036854775808
                  capacity_kg:
                    type: number
                  active_biomass_kg:
                    type: number
                  sensor_alerts:
                    type: integer
                    maximum: 9223372036854775807
                    minimum: -9223372036854775808
                  feeding_events_today:
                    type: integer
                    maximum: 9223372036854775807
                    minimum: -9223372036854775808
                required:
                - total_containers
                - capacity_kg
                - active_biomass_kg
                - sensor_alerts
                - feeding_events_today
          description: Aggregated overview metrics
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/scenario/temperature-profiles/:
    get:
      operationId: api_v1_scenario_temperature_profiles_list
      description: ViewSet for temperature profiles.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTemperatureProfileList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_scenario_temperature_profiles_create
      description: ViewSet for temperature profiles.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemperatureProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TemperatureProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TemperatureProfile'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemperatureProfile'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/temperature-profiles/bulk_date_ranges/:
    post:
      operationId: api_v1_scenario_temperature_profiles_bulk_date_ranges_create
      description: |-
        Create temperature profile from date ranges.

        Example request:
        {
            "profile_name": "Winter 2024",
            "ranges": [
                {"start_date": "2024-01-01", "end_date": "2024-01-31", "value": 8.5},
                {"start_date": "2024-02-01", "end_date": "2024-02-28", "value": 9.0}
            ],
            "merge_adjacent": true,
            "fill_gaps": true,
            "interpolation_method": "linear"
        }
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemperatureProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TemperatureProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TemperatureProfile'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemperatureProfile'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/temperature-profiles/download_template/:
    get:
      operationId: api_v1_scenario_temperature_profiles_download_template_retrieve
      description: Download CSV template for temperature data.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemperatureProfile'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/scenario/temperature-profiles/upload_csv/:
    post:
      operationId: api_v1_scenario_temperature_profiles_upload_csv_create
      description: |-
        Upload temperature data from CSV file.

        Expected CSV format:
        date,temperature
        2024-01-01,8.5
        2024-01-02,8.7
      tags:
      - api
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TemperatureProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TemperatureProfile'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemperatureProfile'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/temperature-profiles/{profile_id}/:
    get:
      operationId: api_v1_scenario_temperature_profiles_retrieve
      description: ViewSet for temperature profiles.
      parameters:
      - in: path
        name: profile_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Temperature Profile.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemperatureProfile'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_scenario_temperature_profiles_partial_update
      description: ViewSet for temperature profiles.
      parameters:
      - in: path
        name: profile_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Temperature Profile.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTemperatureProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTemperatureProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTemperatureProfile'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemperatureProfile'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_scenario_temperature_profiles_destroy
      description: ViewSet for temperature profiles.
      parameters:
      - in: path
        name: profile_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Temperature Profile.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_scenario_temperature_profiles_update
      description: ViewSet for temperature profiles.
      parameters:
      - in: path
        name: profile_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Temperature Profile.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemperatureProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TemperatureProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TemperatureProfile'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemperatureProfile'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/temperature-profiles/{profile_id}/statistics/:
    get:
      operationId: api_v1_scenario_temperature_profiles_statistics_retrieve
      description: Get temperature statistics for a profile.
      parameters:
      - in: path
        name: profile_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Temperature Profile.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemperatureProfile'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/scenario/tgc-models/:
    get:
      operationId: api_v1_scenario_tgc_models_list
      description: Enhanced ViewSet for TGC models.
      parameters:
      - in: query
        name: location
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - in: query
        name: release_period
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTGCModelList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_scenario_tgc_models_create
      description: Enhanced ViewSet for TGC models.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TGCModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TGCModel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TGCModel'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TGCModel'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/tgc-models/templates/:
    get:
      operationId: api_v1_scenario_tgc_models_templates_retrieve
      description: Get predefined TGC model templates.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TGCModel'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/scenario/tgc-models/{model_id}/:
    get:
      operationId: api_v1_scenario_tgc_models_retrieve
      description: Enhanced ViewSet for TGC models.
      parameters:
      - in: path
        name: model_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this TGC Model.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TGCModel'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_scenario_tgc_models_partial_update
      description: Enhanced ViewSet for TGC models.
      parameters:
      - in: path
        name: model_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this TGC Model.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTGCModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTGCModel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTGCModel'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TGCModel'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_scenario_tgc_models_destroy
      description: Enhanced ViewSet for TGC models.
      parameters:
      - in: path
        name: model_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this TGC Model.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_scenario_tgc_models_update
      description: Enhanced ViewSet for TGC models.
      parameters:
      - in: path
        name: model_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this TGC Model.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TGCModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TGCModel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TGCModel'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TGCModel'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/tgc-models/{model_id}/duplicate/:
    post:
      operationId: api_v1_scenario_tgc_models_duplicate_create
      description: Duplicate a TGC model with a new name.
      parameters:
      - in: path
        name: model_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this TGC Model.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TGCModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TGCModel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TGCModel'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TGCModel'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/fcr-models/:
    get:
      operationId: api_v1_scenario_fcr_models_list
      description: Enhanced ViewSet for FCR models.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFCRModelList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_scenario_fcr_models_create
      description: Enhanced ViewSet for FCR models.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FCRModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FCRModel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FCRModel'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FCRModel'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/fcr-models/templates/:
    get:
      operationId: api_v1_scenario_fcr_models_templates_retrieve
      description: Get predefined FCR model templates.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FCRModel'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/scenario/fcr-models/{model_id}/:
    get:
      operationId: api_v1_scenario_fcr_models_retrieve
      description: Enhanced ViewSet for FCR models.
      parameters:
      - in: path
        name: model_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this FCR Model.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FCRModel'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_scenario_fcr_models_partial_update
      description: Enhanced ViewSet for FCR models.
      parameters:
      - in: path
        name: model_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this FCR Model.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFCRModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFCRModel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFCRModel'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FCRModel'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_scenario_fcr_models_destroy
      description: Enhanced ViewSet for FCR models.
      parameters:
      - in: path
        name: model_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this FCR Model.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_scenario_fcr_models_update
      description: Enhanced ViewSet for FCR models.
      parameters:
      - in: path
        name: model_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this FCR Model.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FCRModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FCRModel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FCRModel'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FCRModel'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/fcr-models/{model_id}/stage_summary/:
    get:
      operationId: api_v1_scenario_fcr_models_stage_summary_retrieve
      description: Get summary of stages for an FCR model.
      parameters:
      - in: path
        name: model_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this FCR Model.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FCRModel'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/scenario/mortality-models/:
    get:
      operationId: api_v1_scenario_mortality_models_list
      description: Enhanced ViewSet for mortality models.
      parameters:
      - in: query
        name: frequency
        schema:
          type: string
          x-spec-enum-id: 08c46281c65a0e09
          enum:
          - daily
          - weekly
        description: |-
          Rate application frequency

          * `daily` - Daily
          * `weekly` - Weekly
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMortalityModelList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_scenario_mortality_models_create
      description: Enhanced ViewSet for mortality models.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MortalityModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MortalityModel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MortalityModel'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityModel'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/mortality-models/templates/:
    get:
      operationId: api_v1_scenario_mortality_models_templates_retrieve
      description: Get predefined mortality model templates.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityModel'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/scenario/mortality-models/{model_id}/:
    get:
      operationId: api_v1_scenario_mortality_models_retrieve
      description: Enhanced ViewSet for mortality models.
      parameters:
      - in: path
        name: model_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Mortality Model.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityModel'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_scenario_mortality_models_partial_update
      description: Enhanced ViewSet for mortality models.
      parameters:
      - in: path
        name: model_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Mortality Model.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMortalityModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMortalityModel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMortalityModel'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityModel'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_scenario_mortality_models_destroy
      description: Enhanced ViewSet for mortality models.
      parameters:
      - in: path
        name: model_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Mortality Model.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_scenario_mortality_models_update
      description: Enhanced ViewSet for mortality models.
      parameters:
      - in: path
        name: model_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Mortality Model.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MortalityModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MortalityModel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MortalityModel'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MortalityModel'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/biological-constraints/:
    get:
      operationId: api_v1_scenario_biological_constraints_list
      description: ViewSet for biological constraints.
      parameters:
      - in: query
        name: is_active
        schema:
          type: boolean
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBiologicalConstraintsList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_scenario_biological_constraints_create
      description: ViewSet for biological constraints.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BiologicalConstraints'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BiologicalConstraints'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BiologicalConstraints'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiologicalConstraints'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/biological-constraints/active/:
    get:
      operationId: api_v1_scenario_biological_constraints_active_retrieve
      description: Get all active constraint sets.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BiologicalConstraints'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/scenario/biological-constraints/{id}/:
    get:
      operationId: api_v1_scenario_biological_constraints_retrieve
      description: ViewSet for biological constraints.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Biological Constraint
          Set.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiologicalConstraints'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_scenario_biological_constraints_partial_update
      description: ViewSet for biological constraints.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Biological Constraint
          Set.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBiologicalConstraints'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBiologicalConstraints'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBiologicalConstraints'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiologicalConstraints'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_scenario_biological_constraints_destroy
      description: ViewSet for biological constraints.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Biological Constraint
          Set.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_scenario_biological_constraints_update
      description: ViewSet for biological constraints.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Biological Constraint
          Set.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BiologicalConstraints'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BiologicalConstraints'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BiologicalConstraints'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiologicalConstraints'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/scenarios/:
    get:
      operationId: api_v1_scenario_scenarios_list
      description: Enhanced ViewSet for scenarios.
      parameters:
      - in: query
        name: created_by
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: start_date
        schema:
          type: string
          format: date
      - in: query
        name: tgc_model__location
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedScenarioList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_scenario_scenarios_create
      description: Enhanced ViewSet for scenarios.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scenario'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Scenario'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Scenario'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/scenarios/compare/:
    post:
      operationId: api_v1_scenario_scenarios_compare_create
      description: |-
        Compare multiple scenarios.

        Request body:
        {
            "scenario_ids": [1, 2, 3],
            "comparison_metrics": ["final_weight", "final_biomass", "fcr_overall"]
        }
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scenario'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Scenario'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Scenario'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/scenarios/from_batch/:
    post:
      operationId: api_v1_scenario_scenarios_from_batch_create
      description: |-
        Create a scenario initialized from a batch.

        Request body:
        {
            "batch_id": 123,
            "scenario_name": "Batch 123 Projection",
            "duration_days": 600,
            "use_current_models": true
        }
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scenario'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Scenario'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Scenario'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/scenarios/summary_stats/:
    get:
      operationId: api_v1_scenario_scenarios_summary_stats_retrieve
      description: Get summary statistics for user's scenarios.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/scenario/scenarios/{scenario_id}/:
    get:
      operationId: api_v1_scenario_scenarios_retrieve
      description: Enhanced ViewSet for scenarios.
      parameters:
      - in: path
        name: scenario_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Scenario.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_scenario_scenarios_partial_update
      description: Enhanced ViewSet for scenarios.
      parameters:
      - in: path
        name: scenario_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Scenario.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedScenario'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedScenario'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedScenario'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_scenario_scenarios_destroy
      description: Enhanced ViewSet for scenarios.
      parameters:
      - in: path
        name: scenario_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Scenario.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_scenario_scenarios_update
      description: Enhanced ViewSet for scenarios.
      parameters:
      - in: path
        name: scenario_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Scenario.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scenario'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Scenario'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Scenario'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/scenarios/{scenario_id}/chart_data/:
    get:
      operationId: api_v1_scenario_scenarios_chart_data_retrieve
      description: Get projection data formatted for charts.
      parameters:
      - in: path
        name: scenario_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Scenario.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/scenario/scenarios/{scenario_id}/duplicate/:
    post:
      operationId: api_v1_scenario_scenarios_duplicate_create
      description: |-
        Duplicate a scenario with a new name.

        Request body:
        {
            "new_name": "Scenario Copy",
            "include_projections": false,
            "include_model_changes": true
        }
      parameters:
      - in: path
        name: scenario_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Scenario.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scenario'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Scenario'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Scenario'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/scenarios/{scenario_id}/export_projections/:
    get:
      operationId: api_v1_scenario_scenarios_export_projections_retrieve
      description: Export projections as CSV.
      parameters:
      - in: path
        name: scenario_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Scenario.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/scenario/scenarios/{scenario_id}/projections/:
    get:
      operationId: api_v1_scenario_scenarios_projections_retrieve
      description: Get projections for a scenario with optional filtering.
      parameters:
      - in: path
        name: scenario_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Scenario.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/scenario/scenarios/{scenario_id}/run_projection/:
    post:
      operationId: api_v1_scenario_scenarios_run_projection_create
      description: |-
        Run projection calculation for a scenario.

        Returns projection summary and saves results to database.
      parameters:
      - in: path
        name: scenario_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Scenario.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scenario'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Scenario'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Scenario'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/scenarios/{scenario_id}/sensitivity_analysis/:
    post:
      operationId: api_v1_scenario_scenarios_sensitivity_analysis_create
      description: |-
        Run sensitivity analysis on a scenario parameter.

        Request body:
        {
            "parameter": "tgc",  // or "fcr" or "mortality"
            "variations": [-10, -5, 0, 5, 10]  // percentage variations
        }
      parameters:
      - in: path
        name: scenario_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this Scenario.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scenario'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Scenario'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Scenario'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/scenario/data-entry/csv_template/:
    get:
      operationId: api_v1_scenario_data_entry_csv_template_retrieve
      description: |-
        Download CSV template for specified data type.

        Query params:
        - data_type: 'temperature', 'fcr', or 'mortality'
        - include_sample_data: true/false
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSVUpload'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/scenario/data-entry/import_status/:
    get:
      operationId: api_v1_scenario_data_entry_import_status_retrieve
      description: Check status of recent imports.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSVUpload'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/scenario/data-entry/validate_csv/:
    post:
      operationId: api_v1_scenario_data_entry_validate_csv_create
      description: |-
        Validate CSV file without saving.

        Returns preview data and any validation errors/warnings.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CSVUpload'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CSVUpload'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CSVUpload'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSVUpload'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/operational/fcr-trends/:
    get:
      operationId: api_v1_operational_fcr_trends_list
      description: Retrieve FCR (Feed Conversion Ratio) trend data with actual and
        predicted values across different time intervals and aggregation levels.
      summary: Get FCR trends data
      parameters:
      - in: query
        name: assignment_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: Optional assignment ID for container-level aggregation
      - in: query
        name: batch_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: Optional batch ID for batch-level aggregation
      - in: query
        name: end_date
        schema:
          type: string
          format: date
        description: 'End date for the trend analysis (ISO format, default: today)'
      - in: query
        name: geography_id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: Optional geography ID for geography-level aggregation
      - in: query
        name: include_predicted
        schema:
          type: boolean
          default: true
        description: Include predicted FCR values from scenarios
      - in: query
        name: interval
        schema:
          type: string
          enum:
          - DAILY
          - MONTHLY
          - WEEKLY
          default: WEEKLY
        description: Time interval for aggregation
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: start_date
        schema:
          type: string
          format: date
        description: 'Start date for the trend analysis (ISO format, default: 1 year
          ago)'
      tags:
      - operational
      - fcr
      - trends
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFCRTrendsList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/operational/fcr-trends/assignment_trends/:
    get:
      operationId: api_v1_operational_fcr_trends_assignment_trends_retrieve
      description: |-
        Get FCR trends for a specific container assignment.

        Args:
            assignment_id: Assignment ID from URL path
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FCRTrends'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/operational/fcr-trends/batch_trends/:
    get:
      operationId: api_v1_operational_fcr_trends_batch_trends_retrieve
      description: |-
        Get FCR trends for a specific batch.

        Args:
            batch_id: Batch ID from URL path
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FCRTrends'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/operational/fcr-trends/geography_trends/:
    get:
      operationId: api_v1_operational_fcr_trends_geography_trends_retrieve
      description: |-
        Get FCR trends for a specific geography.

        Args:
            geography_id: Geography ID from URL path
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FCRTrends'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/users/auth/token/:
    post:
      operationId: api_v1_users_auth_token_create
      description: |-
        Custom JWT token view that returns user information with tokens.

        Extends the standard JWT token endpoint to include user information
        in the response.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomTokenObtainPair'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/users/auth/token/refresh/:
    post:
      operationId: api_v1_users_auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/users/auth/profile/:
    get:
      operationId: api_v1_users_auth_profile_retrieve
      description: |-
        API endpoint to view and update the user's profile.

        Allows users to view and update their own profile information.
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_users_auth_profile_update
      description: |-
        API endpoint to view and update the user's profile.

        Allows users to view and update their own profile information.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileUpdate'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    patch:
      operationId: api_v1_users_auth_profile_partial_update
      description: |-
        API endpoint to view and update the user's profile.

        Allows users to view and update their own profile information.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileUpdate'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileUpdate'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/users/users/:
    get:
      operationId: api_v1_users_users_list
      description: |-
        API endpoint that allows users to be viewed, created, edited or deleted.

        Provides CRUD operations for users with appropriate permission checks.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    post:
      operationId: api_v1_users_users_create
      description: |-
        API endpoint that allows users to be viewed, created, edited or deleted.

        Provides CRUD operations for users with appropriate permission checks.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/users/users/change_password/:
    put:
      operationId: api_v1_users_users_change_password_update
      description: |-
        Endpoint to change user's password.

        Validates old password and updates with new password.

        Returns:
            Response: Success or error message
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/v1/users/users/me/:
    get:
      operationId: api_v1_users_users_me_retrieve
      description: |-
        Endpoint to retrieve the currently authenticated user.

        Returns:
            Response: Serialized data of the current user
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /api/v1/users/users/{id}/:
    get:
      operationId: api_v1_users_users_retrieve
      description: |-
        API endpoint that allows users to be viewed, created, edited or deleted.

        Provides CRUD operations for users with appropriate permission checks.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    patch:
      operationId: api_v1_users_users_partial_update
      description: |-
        API endpoint that allows users to be viewed, created, edited or deleted.

        Provides CRUD operations for users with appropriate permission checks.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
    delete:
      operationId: api_v1_users_users_destroy
      description: |-
        API endpoint that allows users to be viewed, created, edited or deleted.

        Provides CRUD operations for users with appropriate permission checks.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      operationId: api_v1_users_users_update
      description: |-
        API endpoint that allows users to be viewed, created, edited or deleted.

        Provides CRUD operations for users with appropriate permission checks.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/auth/token/:
    post:
      operationId: api_auth_token_create
      description: Custom view for obtaining auth tokens that also returns user info
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - jwtAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
        '500':
          description: Internal Server Error
  /api/auth/jwt/:
    post:
      operationId: api_auth_jwt_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
  /api/auth/jwt/refresh/:
    post:
      operationId: api_auth_jwt_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
        '500':
          description: Internal Server Error
        '400':
          description: Bad request (validation error)
components:
  schemas:
    Area:
      type: object
      description: Serializer for the Area model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Unique name for the sea area.
          maxLength: 100
        geography:
          type: integer
          description: ID of the geographical zone this area belongs to.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        geography_details:
          allOf:
          - $ref: '#/components/schemas/Geography'
          readOnly: true
          description: Detailed information about the associated geographical zone.
        latitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
          description: Latitude of the area's central point (e.g., 60.123456). Must
            be between -90 and 90.
        longitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
          description: Longitude of the area's central point (e.g., 5.123456). Must
            be between -180 and 180.
        max_biomass:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          description: Maximum permissible biomass capacity for this area, in kilograms
            (e.g., 100000.00).
        active:
          type: boolean
          default: true
          description: Indicates if the area is currently active and available for
            use.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - geography
      - geography_details
      - id
      - latitude
      - longitude
      - max_biomass
      - name
      - updated_at
    AssignmentNestedBatch:
      type: object
      description: Minimal serializer for nested Batch representation.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_number:
          type: string
          maxLength: 50
        status:
          enum:
          - ACTIVE
          - COMPLETED
          - TERMINATED
          type: string
          description: |-
            * `ACTIVE` - Active
            * `COMPLETED` - Completed
            * `TERMINATED` - Terminated
          x-spec-enum-id: be4893b9f73c6949
      required:
      - batch_number
      - id
    AuthToken:
      type: object
      description: |-
        Serializer for username and password authentication.
        Used by CustomObtainAuthToken and dev_auth views.
      properties:
        username:
          type: string
          description: Username for authentication
        password:
          type: string
          writeOnly: true
          description: Password for authentication
      required:
      - password
      - username
    AuthTokenResponse:
      type: object
      description: |-
        Serializer for token response data.
        Defines the structure of the response from authentication endpoints.
      properties:
        token:
          type: string
          description: Authentication token for API access
        user_id:
          type: integer
          description: User ID associated with the token
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        username:
          type: string
          description: Username of the authenticated user
        email:
          type: string
          description: Email of the authenticated user
      required:
      - email
      - token
      - user_id
      - username
    Batch:
      type: object
      description: |-
        Serializer for the Batch model.

        Handles the representation of Batch instances, including their core attributes,
        related model information (species name), and dynamically calculated metrics
        such as population count, biomass, average weight, current lifecycle stage,
        days in production, and active containers.
      properties:
        id:
          type: integer
          readOnly: true
          description: Unique read-only identifier for the batch record.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_number:
          type: string
          description: User-defined unique identifier or code for the batch (e.g.,
            BATCH2023-001).
          maxLength: 50
        species:
          type: integer
          description: Foreign key ID of the species for this batch. Must be an existing
            Species ID.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        species_name:
          type: string
          readOnly: true
          description: Name of the species associated with this batch (read-only).
        lifecycle_stage:
          type: integer
          description: Foreign key ID of the initial or primary lifecycle stage for
            this batch. Must be an existing LifeCycleStage ID appropriate for the
            selected species.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        status:
          enum:
          - ACTIVE
          - COMPLETED
          - TERMINATED
          type: string
          x-spec-enum-id: be4893b9f73c6949
          description: |-
            Current status of the batch. Refer to model choices (e.g., 'Planned', 'Active', 'Harvested').

            * `ACTIVE` - Active
            * `COMPLETED` - Completed
            * `TERMINATED` - Terminated
        batch_type:
          enum:
          - STANDARD
          - MIXED
          type: string
          x-spec-enum-id: e0ac211a2e181f56
          description: |-
            Type or category of the batch. Refer to model choices (e.g., 'Production', 'Experimental').

            * `STANDARD` - Standard
            * `MIXED` - Mixed Population
        start_date:
          type: string
          format: date
          description: Date when the batch officially started or was created (YYYY-MM-DD).
        expected_end_date:
          type: string
          format: date
          nullable: true
          description: Anticipated end date for the batch (e.g., for harvest or transfer)
            (YYYY-MM-DD). Defaults to 30 days after start_date if not provided.
        notes:
          type: string
          description: Any general notes or comments about the batch (optional).
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp of when the batch record was created (read-only).
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp of the last update to the batch record (read-only).
        calculated_population_count:
          type: integer
          readOnly: true
          description: Total current population count for this batch, calculated from
            active assignments (read-only).
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        calculated_biomass_kg:
          type: number
          format: double
          readOnly: true
          description: Total current biomass in kilograms for this batch, calculated
            from active assignments and formatted to two decimal places (read-only).
        calculated_avg_weight_g:
          type: number
          format: double
          readOnly: true
          description: Current average weight in grams for individuals in this batch,
            calculated from active assignments and formatted to two decimal places
            (read-only).
        current_lifecycle_stage:
          nullable: true
          readOnly: true
          description: The current lifecycle stage of the batch (ID, name, order),
            determined by the latest active assignment (read-only).
        days_in_production:
          type: integer
          readOnly: true
          description: Number of days the batch has been in production since its start
            date (read-only).
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        active_containers:
          type: array
          items:
            type: integer
            maximum: 9223372036854775807
            minimum: -9223372036854775808
          readOnly: true
          description: List of IDs of containers currently actively holding this batch
            (read-only).
      required:
      - active_containers
      - batch_number
      - calculated_avg_weight_g
      - calculated_biomass_kg
      - calculated_population_count
      - created_at
      - current_lifecycle_stage
      - days_in_production
      - id
      - lifecycle_stage
      - species
      - species_name
      - start_date
      - updated_at
    BatchComposition:
      type: object
      description: Serializer for the BatchComposition model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        mixed_batch:
          allOf:
          - $ref: '#/components/schemas/CompositionNestedBatch'
          readOnly: true
        mixed_batch_id:
          type: integer
          writeOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        source_batch:
          allOf:
          - $ref: '#/components/schemas/CompositionNestedBatch'
          readOnly: true
        source_batch_id:
          type: integer
          writeOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        population_count:
          type: integer
          minimum: 0
          description: Number of fish from this source batch in the mixed batch
          maximum: 9223372036854775807
        biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Biomass from this source batch in the mixed batch
        percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - biomass_kg
      - created_at
      - id
      - mixed_batch
      - mixed_batch_id
      - percentage
      - population_count
      - source_batch
      - source_batch_id
    BatchContainerAssignment:
      type: object
      description: Serializer for BatchContainerAssignment model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          allOf:
          - $ref: '#/components/schemas/AssignmentNestedBatch'
          readOnly: true
        batch_id:
          type: integer
          writeOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          allOf:
          - $ref: '#/components/schemas/NestedContainer'
          readOnly: true
        container_id:
          type: integer
          writeOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        lifecycle_stage:
          allOf:
          - $ref: '#/components/schemas/NestedLifeCycleStage'
          readOnly: true
        lifecycle_stage_id:
          type: integer
          writeOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        assignment_date:
          type: string
          format: date
        population_count:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
        avg_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        is_active:
          type: boolean
          description: Whether this assignment is current/active
        notes:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        batch_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get basic batch information.
          readOnly: true
        container_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get basic container information.
          readOnly: true
        lifecycle_stage_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get lifecycle stage information.
          readOnly: true
      required:
      - batch
      - batch_id
      - batch_info
      - biomass_kg
      - container
      - container_id
      - container_info
      - created_at
      - id
      - lifecycle_stage
      - lifecycle_stage_info
      - updated_at
    BatchFeedingSummary:
      type: object
      description: |-
        Serializer for the BatchFeedingSummary model.

        Provides read operations for batch feeding summaries.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_name:
          type: string
          readOnly: true
        period_start:
          type: string
          format: date
          description: Start date of the summary period
        period_end:
          type: string
          format: date
          description: End date of the summary period
        total_feed_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Total feed used across all containers (kg)
        total_starting_biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Total batch biomass at start of period (kg)
        total_ending_biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Total batch biomass at end of period (kg)
        total_growth_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Total batch growth during the period (kg)
        weighted_avg_fcr:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,3})?$
          nullable: true
          description: Weighted average FCR across all containers
        container_count:
          type: integer
          description: Number of containers contributing to this summary
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        overall_confidence_level:
          enum:
          - VERY_HIGH
          - HIGH
          - MEDIUM
          - LOW
          type: string
          x-spec-enum-id: f9d367c52dbccfc9
          description: |-
            Overall confidence level (worst case across containers)

            * `VERY_HIGH` - Very High (< 10 days since weighing)
            * `HIGH` - High (10-20 days since weighing)
            * `MEDIUM` - Medium (20-40 days since weighing)
            * `LOW` - Low (> 40 days since weighing)
        estimation_method:
          enum:
          - MEASURED
          - MIXED
          - INTERPOLATED
          - ''
          - null
          type: string
          x-spec-enum-id: 69912f1065645477
          nullable: true
          description: |-
            Overall estimation method across containers

            * `MEASURED` - All containers have direct measurements
            * `MIXED` - Some containers use interpolation
            * `INTERPOLATED` - Most containers use interpolation
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - batch
      - batch_name
      - created_at
      - id
      - period_end
      - period_start
      - total_feed_kg
      - updated_at
    BatchParentage:
      type: object
      description: Serializer for batch parentage.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_number:
          type: string
          readOnly: true
        egg_production:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        egg_batch_id:
          type: string
          readOnly: true
        egg_source_type:
          type: string
          readOnly: true
        assignment_date:
          type: string
          format: date-time
          description: Date eggs assigned to batch
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - batch
      - batch_number
      - created_at
      - egg_batch_id
      - egg_production
      - egg_source_type
      - id
      - updated_at
    BatchTransfer:
      type: object
      description: Serializer for the BatchTransfer model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        source_batch_number:
          type: string
          readOnly: true
        destination_batch_number:
          type: string
          readOnly: true
        transfer_type_display:
          type: string
          readOnly: true
        source_lifecycle_stage_name:
          type: string
          readOnly: true
        destination_lifecycle_stage_name:
          type: string
          readOnly: true
        source_container_name:
          type: string
          readOnly: true
        destination_container_name:
          type: string
          readOnly: true
        source_batch_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get basic source batch information.
          readOnly: true
        destination_batch_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get basic destination batch information.
          readOnly: true
        transfer_type:
          enum:
          - CONTAINER
          - LIFECYCLE
          - SPLIT
          - MERGE
          - MIXED_TRANSFER
          type: string
          description: |-
            * `CONTAINER` - Container Transfer
            * `LIFECYCLE` - Lifecycle Stage Change
            * `SPLIT` - Batch Split
            * `MERGE` - Batch Merge
            * `MIXED_TRANSFER` - Mixed Batch Transfer
          x-spec-enum-id: 84d720b57a7d7b00
        transfer_date:
          type: string
          format: date
        source_count:
          type: integer
          description: Population count before transfer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        transferred_count:
          type: integer
          description: Number of fish transferred
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        mortality_count:
          type: integer
          description: Number of mortalities during transfer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        source_biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Biomass before transfer in kg
        transferred_biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Biomass transferred in kg
        is_emergency_mixing:
          type: boolean
          description: Whether this was an emergency mixing of different batches
        notes:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        source_batch:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        destination_batch:
          type: integer
          nullable: true
          description: Destination batch for merges or new batch for splits; may be
            null for simple transfers
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        source_assignment:
          type: integer
          nullable: true
          description: Source batch-container assignment
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        destination_assignment:
          type: integer
          nullable: true
          description: Destination batch-container assignment
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        source_lifecycle_stage:
          type: integer
          description: Lifecycle stage before transfer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        destination_lifecycle_stage:
          type: integer
          nullable: true
          description: New lifecycle stage after transfer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      required:
      - created_at
      - destination_batch_info
      - destination_batch_number
      - destination_container_name
      - destination_lifecycle_stage_name
      - id
      - source_batch
      - source_batch_info
      - source_batch_number
      - source_biomass_kg
      - source_container_name
      - source_count
      - source_lifecycle_stage
      - source_lifecycle_stage_name
      - transfer_date
      - transfer_type
      - transfer_type_display
      - transferred_biomass_kg
      - transferred_count
      - updated_at
    BiologicalConstraints:
      type: object
      description: Serializer for biological constraint sets.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Name for this constraint set (e.g., 'Bakkafrost Standard',
            'Conservative')
          maxLength: 100
        description:
          type: string
          description: Description of this constraint set
        is_active:
          type: boolean
          description: Whether this constraint set is currently active
        stage_constraints:
          type: array
          items:
            type: object
            additionalProperties: {}
          description: Get stage constraints in a structured format.
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
      - stage_constraints
      - updated_at
    BreedingPair:
      type: object
      description: Serializer for breeding pairs.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        plan:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        plan_name:
          type: string
          readOnly: true
        male_fish:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        male_fish_display:
          type: string
          readOnly: true
        female_fish:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        female_fish_display:
          type: string
          readOnly: true
        pairing_date:
          type: string
          format: date-time
          description: Date of pairing
        progeny_count:
          type: integer
          nullable: true
          description: Number of offspring produced
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        egg_production_count:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - egg_production_count
      - female_fish
      - female_fish_display
      - id
      - male_fish
      - male_fish_display
      - plan
      - plan_name
      - updated_at
    BreedingPlan:
      type: object
      description: Serializer for breeding plans.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Plan name (e.g., 'Winter 2023 Breeding')
          maxLength: 100
        start_date:
          type: string
          format: date-time
          description: Plan start date
        end_date:
          type: string
          format: date-time
          description: Plan end date
        objectives:
          type: string
          description: Plan objectives and goals
        geneticist_notes:
          type: string
          description: Technical notes from geneticist about breeding priorities and
            trait selection
        breeder_instructions:
          type: string
          description: Clear instructions for breeders on execution of the breeding
            plan
        is_active:
          type: boolean
          readOnly: true
        trait_priorities:
          type: array
          items:
            $ref: '#/components/schemas/BreedingTraitPriority'
          readOnly: true
        breeding_pair_count:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_by:
          type: integer
          readOnly: true
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - breeding_pair_count
      - created_at
      - created_by
      - end_date
      - id
      - is_active
      - name
      - start_date
      - trait_priorities
      - updated_at
    BreedingTraitPriority:
      type: object
      description: Serializer for breeding trait priorities.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        plan:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        trait_name:
          enum:
          - growth_rate
          - disease_resistance
          - size
          - fertility
          type: string
          x-spec-enum-id: 88a9a543458ce27f
          description: |-
            Trait to prioritize

            * `growth_rate` - Growth Rate
            * `disease_resistance` - Disease Resistance
            * `size` - Size
            * `fertility` - Fertility
        trait_display:
          type: string
          readOnly: true
        priority_weight:
          type: number
          format: double
          maximum: 1
          minimum: 0
          description: Weight from 0 to 1 (e.g., 0.7)
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - plan
      - priority_weight
      - trait_display
      - trait_name
      - updated_at
    BroodstockFish:
      type: object
      description: Serializer for broodstock fish.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          description: Current container housing the fish
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container_name:
          type: string
          readOnly: true
        traits:
          description: Basic traits (e.g., growth_rate, size)
        health_status:
          enum:
          - healthy
          - monitored
          - sick
          - deceased
          type: string
          x-spec-enum-id: f6dd9f80b09f5c06
          description: |-
            Current health status

            * `healthy` - Healthy
            * `monitored` - Monitored
            * `sick` - Sick
            * `deceased` - Deceased
        movement_count:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - container
      - container_name
      - created_at
      - id
      - movement_count
      - updated_at
    CSVUpload:
      type: object
      description: Enhanced serializer for CSV file upload.
      properties:
        file:
          type: string
          format: uri
        data_type:
          enum:
          - temperature
          - fcr
          - mortality
          type: string
          description: |-
            * `temperature` - temperature
            * `fcr` - fcr
            * `mortality` - mortality
          x-spec-enum-id: e9b9c3b99b8ec926
        profile_name:
          type: string
          maxLength: 255
        validate_only:
          type: boolean
          default: false
      required:
      - data_type
      - file
      - profile_name
    CompositionNestedBatch:
      type: object
      description: Minimal serializer for nested Batch representation.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_number:
          type: string
          maxLength: 50
        status:
          enum:
          - ACTIVE
          - COMPLETED
          - TERMINATED
          type: string
          description: |-
            * `ACTIVE` - Active
            * `COMPLETED` - Completed
            * `TERMINATED` - Terminated
          x-spec-enum-id: be4893b9f73c6949
      required:
      - batch_number
      - id
    Container:
      type: object
      description: Serializer for the Container model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Unique name for the container (e.g., Tank A1, Pen 3).
          maxLength: 100
        container_type:
          type: integer
          description: ID of the container type (e.g., tank, pen, tray).
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container_type_name:
          type: string
          readOnly: true
          description: Name of the container type.
        hall:
          type: integer
          nullable: true
          description: ID of the hall this container is located in (if applicable).
            Mutually exclusive with 'area'.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        hall_name:
          type: string
          readOnly: true
          nullable: true
          description: Name of the hall this container is located in.
        area:
          type: integer
          nullable: true
          description: ID of the sea area this container is located in (if applicable).
            Mutually exclusive with 'hall'.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        area_name:
          type: string
          readOnly: true
          nullable: true
          description: Name of the sea area this container is located in.
        volume_m3:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Volume of the container in cubic meters (e.g., 150.75).
        max_biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Maximum recommended biomass capacity for this container in
            kilograms (e.g., 5000.00).
        feed_recommendations_enabled:
          type: boolean
          default: true
          description: Indicates if automatic feed recommendations are enabled for
            this container.
        active:
          type: boolean
          default: true
          description: Indicates if the container is currently active and in use.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - area_name
      - container_type
      - container_type_name
      - created_at
      - hall_name
      - id
      - max_biomass_kg
      - name
      - updated_at
      - volume_m3
    ContainerType:
      type: object
      description: Serializer for the ContainerType model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Unique name for the container type (e.g., 'Circular Tank 10m',
            'Square Pen 20x20').
          maxLength: 100
        category:
          enum:
          - TANK
          - PEN
          - TRAY
          - OTHER
          type: string
          x-spec-enum-id: 656f258b59896f76
          description: |-
            Category of the container type (e.g., TANK, PEN, TRAY).

            * `TANK` - Tank
            * `PEN` - Pen
            * `TRAY` - Tray
            * `OTHER` - Other
        category_display:
          type: string
          readOnly: true
          description: Human-readable display name for the category.
        max_volume_m3:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Maximum design volume of this container type in cubic meters
            (e.g., 100.50).
        description:
          type: string
          description: Optional description of the container type, its characteristics,
            or usage notes.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - category
      - category_display
      - created_at
      - id
      - max_volume_m3
      - name
      - updated_at
    CustomTokenObtainPair:
      type: object
      description: |-
        Custom token serializer that adds user data to token response.

        Extends the JWT TokenObtainPairSerializer to include additional user
        information in the token response.
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
    EggProduction:
      type: object
      description: Serializer for egg production.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        pair:
          type: integer
          nullable: true
          description: Breeding pair (null for external eggs)
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        pair_display:
          type: string
          readOnly: true
        egg_batch_id:
          type: string
          description: Unique egg batch identifier
          maxLength: 50
        egg_count:
          type: integer
          minimum: 0
          description: Number of eggs
          maximum: 9223372036854775807
        production_date:
          type: string
          format: date-time
          description: Date produced or acquired
        destination_station:
          type: integer
          nullable: true
          description: Destination freshwater station
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        source_type:
          enum:
          - internal
          - external
          type: string
          x-spec-enum-id: e094a11876888b4b
          description: |-
            Internal or external source

            * `internal` - Internal
            * `external` - External
        external_batch:
          allOf:
          - $ref: '#/components/schemas/ExternalEggBatch'
          readOnly: true
        batch_assignment_count:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - batch_assignment_count
      - created_at
      - egg_batch_id
      - egg_count
      - external_batch
      - id
      - pair_display
      - source_type
      - updated_at
    EggProductionDetail:
      type: object
      description: Detailed serializer for egg production with nested data.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        pair:
          allOf:
          - $ref: '#/components/schemas/BreedingPair'
          readOnly: true
        pair_display:
          type: string
          readOnly: true
        egg_batch_id:
          type: string
          description: Unique egg batch identifier
          maxLength: 50
        egg_count:
          type: integer
          minimum: 0
          description: Number of eggs
          maximum: 9223372036854775807
        production_date:
          type: string
          format: date-time
          description: Date produced or acquired
        destination_station:
          type: integer
          nullable: true
          description: Destination freshwater station
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        source_type:
          enum:
          - internal
          - external
          type: string
          x-spec-enum-id: e094a11876888b4b
          description: |-
            Internal or external source

            * `internal` - Internal
            * `external` - External
        external_batch:
          allOf:
          - $ref: '#/components/schemas/ExternalEggBatch'
          readOnly: true
        batch_assignment_count:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        batch_assignments:
          type: array
          items:
            $ref: '#/components/schemas/BatchParentage'
          readOnly: true
      required:
      - batch_assignment_count
      - batch_assignments
      - created_at
      - egg_batch_id
      - egg_count
      - external_batch
      - id
      - pair
      - pair_display
      - source_type
      - updated_at
    EggSupplier:
      type: object
      description: Serializer for egg suppliers.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Supplier name
          maxLength: 100
        contact_details:
          type: string
          description: Contact information (phone, email, address)
        certifications:
          type: string
          description: Certifications and quality standards
        batch_count:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - batch_count
      - contact_details
      - created_at
      - id
      - name
      - updated_at
    EnvironmentalParameter:
      type: object
      description: |-
        Serializer for the EnvironmentalParameter model.

        Handles environmental parameters that define acceptable ranges for various
        water quality and environmental metrics in aquaculture operations.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Name of the environmental parameter (e.g., 'Dissolved Oxygen',
            'Temperature').
        unit:
          type: string
          description: Unit of measurement for this parameter (e.g., 'mg/L', '°C').
        description:
          type: string
          nullable: true
          description: Detailed description of the parameter and its importance in
            aquaculture.
        min_value:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
          nullable: true
          description: Minimum acceptable value for this parameter. Values below this
            trigger alerts.
        max_value:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
          nullable: true
          description: Maximum acceptable value for this parameter. Values above this
            trigger alerts.
        optimal_min:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
          nullable: true
          description: Minimum optimal value for this parameter. Values in the optimal
            range are ideal for fish health.
        optimal_max:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
          nullable: true
          description: Maximum optimal value for this parameter. Values in the optimal
            range are ideal for fish health.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
      - unit
      - updated_at
    EnvironmentalReading:
      type: object
      description: |-
        Serializer for the EnvironmentalReading model.

        Handles TimescaleDB hypertable data with special attention to the time column.
        This serializer manages time-series environmental readings from sensors and manual measurements.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        parameter_name:
          type: string
          readOnly: true
          description: Name of the environmental parameter being measured.
        container_name:
          type: string
          readOnly: true
          description: Name of the container where the reading was taken.
        batch_name:
          type: string
          readOnly: true
          description: Name/number of the batch associated with this reading.
        sensor_name:
          type: string
          readOnly: true
          description: Name of the sensor that recorded this reading, if applicable.
        parameter:
          type: integer
          description: The environmental parameter being measured (references EnvironmentalParameter
            model).
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          description: The container where the reading was taken.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          nullable: true
          description: Optional batch associated with this reading.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        sensor:
          type: integer
          nullable: true
          description: Optional sensor that recorded this reading. Required if is_manual
            is False.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        reading_time:
          type: string
          format: date-time
          description: Timestamp when the reading was taken. Used as the time dimension
            in TimescaleDB.
        value:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
          description: The measured value of the parameter.
        is_manual:
          type: boolean
          default: false
          description: Whether this reading was taken manually (true) or by an automated
            sensor (false).
        notes:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        batch_container_assignment:
          type: integer
          nullable: true
          description: Direct link to the batch-container assignment for precise salmon
            CV tracking
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        recorded_by:
          type: integer
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      required:
      - batch_name
      - container
      - container_name
      - created_at
      - id
      - parameter
      - parameter_name
      - reading_time
      - sensor_name
      - value
    ExternalEggBatch:
      type: object
      description: Serializer for external egg batches.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        egg_production:
          type: integer
          description: Link to egg production record
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        supplier:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        supplier_name:
          type: string
          readOnly: true
        batch_number:
          type: string
          description: Supplier's batch ID
          maxLength: 50
        provenance_data:
          type: string
          description: Source farm and transport details
        egg_count:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - batch_number
      - created_at
      - egg_count
      - egg_production
      - id
      - supplier
      - supplier_name
      - updated_at
    FCRDataPoint:
      type: object
      description: |-
        Serializer for individual FCR data points in the trends series.

        Supports container-level granularity with operational metadata.
      properties:
        period_start:
          type: string
          format: date
        period_end:
          type: string
          format: date
        actual_fcr:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,3})?$
          nullable: true
        confidence:
          type: string
          nullable: true
        data_points:
          type: integer
          default: 0
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        predicted_fcr:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,3})?$
          nullable: true
        scenarios_used:
          type: integer
          default: 0
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        deviation:
          type: string
          format: decimal
          pattern: ^-?\d{0,5}(?:\.\d{0,2})?$
          nullable: true
          description: Percentage deviation of actual from predicted FCR
        container_name:
          type: string
          nullable: true
        assignment_id:
          type: integer
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container_count:
          type: integer
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        total_containers:
          type: integer
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      required:
      - period_end
      - period_start
    FCRModel:
      type: object
      description: Enhanced serializer for FCR models with validation.
      properties:
        model_id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Model name (e.g., 'Standard FCR')
          maxLength: 255
        stages:
          type: array
          items:
            $ref: '#/components/schemas/FCRModelStage'
          readOnly: true
        total_duration:
          type: integer
          description: Calculate total duration across all stages.
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        stage_coverage:
          type: object
          additionalProperties: {}
          description: Check which lifecycle stages are covered.
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - model_id
      - name
      - stage_coverage
      - stages
      - total_duration
      - updated_at
    FCRModelStage:
      type: object
      description: Enhanced serializer for FCR model stages.
      properties:
        stage:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        stage_name:
          type: string
          readOnly: true
        fcr_value:
          type: number
          format: double
          minimum: 0
          description: FCR for the stage (e.g., 1.2)
        duration_days:
          type: integer
          minimum: 1
          description: Stage duration in days (e.g., 90)
          maximum: 9223372036854775807
        overrides:
          type: array
          items:
            type: object
            additionalProperties: {}
          description: Get weight-based FCR overrides.
          readOnly: true
      required:
      - duration_days
      - fcr_value
      - overrides
      - stage
      - stage_name
    FCRTrends:
      type: object
      description: |-
        Serializer for FCR trends API response.

        Provides comprehensive FCR trend data with actual and predicted values,
        confidence levels, and deviation analysis.
      properties:
        interval:
          enum:
          - DAILY
          - WEEKLY
          - MONTHLY
          type: string
          description: |-
            * `DAILY` - DAILY
            * `WEEKLY` - WEEKLY
            * `MONTHLY` - MONTHLY
          x-spec-enum-id: b0eb46768ec98b96
          default: WEEKLY
        unit:
          type: string
          readOnly: true
          default: ratio
        aggregation_level:
          enum:
          - batch
          - assignment
          - geography
          - null
          type: string
          description: |-
            * `batch` - batch
            * `assignment` - assignment
            * `geography` - geography
          x-spec-enum-id: 48067fd1d9b1dfc0
          nullable: true
        series:
          type: array
          items:
            $ref: '#/components/schemas/FCRDataPoint'
      required:
      - series
      - unit
    Feed:
      type: object
      description: |-
        Serializer for the Feed model.

        Provides CRUD operations for feed types used in aquaculture operations.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          maxLength: 100
        brand:
          type: string
          maxLength: 100
        size_category:
          enum:
          - MICRO
          - SMALL
          - MEDIUM
          - LARGE
          type: string
          description: |-
            * `MICRO` - Micro
            * `SMALL` - Small
            * `MEDIUM` - Medium
            * `LARGE` - Large
          x-spec-enum-id: 0ead716df78cf17d
        pellet_size_mm:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Pellet size in millimeters
        protein_percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Protein content percentage
        fat_percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Fat content percentage
        carbohydrate_percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Carbohydrate content percentage
        description:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - brand
      - created_at
      - id
      - name
      - size_category
      - updated_at
    FeedContainer:
      type: object
      description: Serializer for the FeedContainer model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Unique name for the feed container (e.g., 'Silo 1', 'Feed Barge
            Alpha').
          maxLength: 100
        container_type:
          enum:
          - SILO
          - BARGE
          - TANK
          - OTHER
          type: string
          x-spec-enum-id: f0c42b84f75e37ff
          description: |-
            Type of the feed container (e.g., SILO, BARGE, TANK).

            * `SILO` - Silo
            * `BARGE` - Barge
            * `TANK` - Tank
            * `OTHER` - Other
        container_type_display:
          type: string
          readOnly: true
          description: Human-readable display name for the container type.
        hall:
          type: integer
          nullable: true
          description: ID of the hall this feed container is associated with (if applicable).
            Mutually exclusive with 'area'.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        hall_name:
          type: string
          readOnly: true
          nullable: true
          description: Name of the hall this feed container is associated with.
        area:
          type: integer
          nullable: true
          description: ID of the sea area this feed container is associated with (if
            applicable). Mutually exclusive with 'hall'.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        area_name:
          type: string
          readOnly: true
          nullable: true
          description: Name of the sea area this feed container is associated with.
        capacity_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Total capacity of the feed container in kilograms (e.g., 50000.00).
        active:
          type: boolean
          default: true
          description: Indicates if the feed container is currently active and in
            use.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - area_name
      - capacity_kg
      - container_type
      - container_type_display
      - created_at
      - hall_name
      - id
      - name
      - updated_at
    FeedContainerStock:
      type: object
      description: |-
        Serializer for FeedContainerStock model.

        Handles FIFO inventory tracking for feed batches in containers.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed_container:
          type: integer
          description: Feed container where this batch is stored
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed_container_name:
          type: string
          readOnly: true
          description: Name of the feed container
        feed_purchase:
          type: integer
          description: Original purchase batch this stock comes from
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed_purchase_batch:
          type: string
          readOnly: true
          description: Feed purchase batch number
        feed_type:
          type: string
          readOnly: true
          description: Type of feed
        quantity_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Remaining quantity of this feed batch in the container (kg)
        entry_date:
          type: string
          format: date-time
          description: Date and time when this feed batch was added to the container
        cost_per_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          description: Cost per kg from the original purchase
        total_value:
          type: number
          format: double
          nullable: true
          description: Total value of remaining stock (quantity_kg * cost_per_kg)
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - cost_per_kg
      - created_at
      - entry_date
      - feed_container
      - feed_container_name
      - feed_purchase
      - feed_purchase_batch
      - feed_type
      - id
      - quantity_kg
      - total_value
      - updated_at
    FeedContainerStockCreate:
      type: object
      description: |-
        Serializer for creating FeedContainerStock entries.

        Used when adding feed batches to containers.
      properties:
        feed_container:
          type: integer
          description: Feed container to add stock to
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed_purchase:
          type: integer
          description: Feed purchase batch to add
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        quantity_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Quantity to add to container in kg
        entry_date:
          type: string
          format: date-time
          description: Date and time when this feed batch was added to the container
      required:
      - entry_date
      - feed_container
      - feed_purchase
      - quantity_kg
    FeedPurchase:
      type: object
      description: |-
        Serializer for the FeedPurchase model.

        Provides CRUD operations for feed purchase records.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed_name:
          type: string
          readOnly: true
        purchase_date:
          type: string
          format: date
        quantity_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Amount of feed purchased in kilograms
        cost_per_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Cost per kilogram
        supplier:
          type: string
          maxLength: 100
        batch_number:
          type: string
          description: Supplier's batch number
          maxLength: 100
        expiry_date:
          type: string
          format: date
          nullable: true
        notes:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - cost_per_kg
      - created_at
      - feed
      - feed_name
      - id
      - purchase_date
      - quantity_kg
      - supplier
      - updated_at
    FeedStock:
      type: object
      description: |-
        Serializer for the FeedStock model.

        Provides CRUD operations for feed stock levels in feed containers.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed_name:
          type: string
          readOnly: true
        feed_container:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed_container_name:
          type: string
          readOnly: true
        current_quantity_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Current amount of feed in stock (kg)
        reorder_threshold_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Threshold for reordering (kg)
        updated_at:
          type: string
          format: date-time
          readOnly: true
        notes:
          type: string
        needs_reorder:
          type: boolean
          readOnly: true
      required:
      - current_quantity_kg
      - feed
      - feed_container
      - feed_container_name
      - feed_name
      - id
      - needs_reorder
      - reorder_threshold_kg
      - updated_at
    FeedingEvent:
      type: object
      description: |-
        Serializer for the FeedingEvent model.

        Provides CRUD operations for feeding events with validation and stock
        updates.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_name:
          type: string
          readOnly: true
        batch_assignment:
          type: integer
          nullable: true
          description: The specific batch-container assignment this feeding applies
            to
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          description: Container where feeding occurred
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container_name:
          type: string
          readOnly: true
        feed:
          type: integer
          description: Feed type used
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed_name:
          type: string
          readOnly: true
        feed_stock:
          type: integer
          nullable: true
          description: Stock source for this feed
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feeding_date:
          type: string
          format: date
        feeding_time:
          type: string
          format: time
        amount_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
          description: Amount of feed given in kilograms
        batch_biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Batch biomass at feeding time (auto-populated from latest assignment)
        feeding_percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,6})?$
          readOnly: true
          description: Feed amount as percentage of biomass (auto-calculated)
        feed_cost:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          description: Cost of feed consumed (calculated via FIFO)
        method:
          enum:
          - MANUAL
          - AUTOMATIC
          - BROADCAST
          type: string
          description: |-
            * `MANUAL` - Manual
            * `AUTOMATIC` - Automatic Feeder
            * `BROADCAST` - Broadcast
          x-spec-enum-id: 037132121c393c6e
        notes:
          type: string
        recorded_by:
          type: integer
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        recorded_by_username:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - amount_kg
      - batch
      - batch_name
      - container
      - container_name
      - created_at
      - feed
      - feed_cost
      - feed_name
      - feeding_date
      - feeding_percentage
      - feeding_time
      - id
      - recorded_by_username
      - updated_at
    FishMovement:
      type: object
      description: Serializer for fish movements.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        fish:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        fish_display:
          type: string
          readOnly: true
        from_container:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        from_container_name:
          type: string
          readOnly: true
        to_container:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        to_container_name:
          type: string
          readOnly: true
        movement_date:
          type: string
          format: date-time
          description: Date and time of movement
        moved_by:
          type: integer
          readOnly: true
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        notes:
          type: string
          description: Details about the movement
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - fish
      - fish_display
      - from_container
      - from_container_name
      - id
      - moved_by
      - to_container
      - to_container_name
      - updated_at
    FishParameterScore:
      type: object
      description: |-
        Serializer for FishParameterScore model.

        Uses HealthBaseSerializer for consistent error handling and field management.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        parameter:
          type: integer
          description: ID of the health parameter being scored. Must reference an
            active parameter.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        parameter_name:
          type: string
          readOnly: true
          description: Name of the health parameter being scored.
        score:
          type: integer
          description: Score value (typically 1-5) representing the health assessment
            for this parameter.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - parameter
      - parameter_name
      - score
      - updated_at
    FreshwaterStation:
      type: object
      description: Serializer for the FreshwaterStation model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Unique name for the freshwater station (e.g., 'Main Hatchery',
            'Broodstock Unit Alpha').
          maxLength: 100
        station_type:
          enum:
          - FRESHWATER
          - BROODSTOCK
          type: string
          x-spec-enum-id: 20dcb2314fc68e78
          description: |-
            Type of the station (e.g., FRESHWATER, BROODSTOCK).

            * `FRESHWATER` - Freshwater
            * `BROODSTOCK` - Broodstock
        station_type_display:
          type: string
          readOnly: true
          description: Human-readable display name for the station type.
        geography:
          type: integer
          description: ID of the geographical region this station belongs to.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        geography_name:
          type: string
          readOnly: true
          description: Name of the geographical region this station belongs to.
        latitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
          description: Latitude of the station (e.g., 62.000000). Usually set via
            map interface.
        longitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
          description: Longitude of the station (e.g., -6.783333). Usually set via
            map interface.
        description:
          type: string
          description: Optional description of the freshwater station, its facilities,
            or purpose.
        active:
          type: boolean
          default: true
          description: Indicates if the freshwater station is currently active and
            operational.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - geography
      - geography_name
      - id
      - latitude
      - longitude
      - name
      - station_type
      - station_type_display
      - updated_at
    Geography:
      type: object
      description: Serializer for the Geography model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Unique name for the geographical region (e.g., 'Faroe Islands',
            'Scotland West').
          maxLength: 100
        description:
          type: string
          description: Optional description of the geographical region, its boundaries,
            or specific characteristics.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
      - updated_at
    GrowthSample:
      type: object
      description: Serializer for GrowthSample model with calculated fields.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        assignment:
          type: integer
          description: The specific container assignment this sample was taken from
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        assignment_details:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get detailed information about the batch container assignment.
          readOnly: true
        sample_date:
          type: string
          format: date
        sample_size:
          type: integer
          description: Number of fish sampled
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        avg_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Average weight (g) calculated from individual measurements
            if provided, otherwise manually entered.
        avg_length_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Average length (cm) calculated from individual measurements
            if provided, otherwise manually entered.
        std_deviation_weight:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Standard deviation of weight (g) calculated from individual
            measurements if provided.
        std_deviation_length:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Standard deviation of length (cm) calculated from individual
            measurements if provided.
        min_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Minimum weight in grams
        max_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Maximum weight in grams
        condition_factor:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Average Condition Factor (K) calculated from individual measurements
            if provided.
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        individual_lengths:
          type: array
          items:
            type: string
            format: decimal
            pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          writeOnly: true
          maxItems: 1000
        individual_weights:
          type: array
          items:
            type: string
            format: decimal
            pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          writeOnly: true
          maxItems: 1000
      required:
      - assignment_details
      - created_at
      - id
      - sample_size
      - updated_at
    Hall:
      type: object
      description: Serializer for the Hall model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Unique name for the hall within its station (e.g., 'Hatchery
            Hall A', 'Grow-out Section 1').
          maxLength: 100
        freshwater_station:
          type: integer
          description: ID of the freshwater station this hall belongs to.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        freshwater_station_name:
          type: string
          readOnly: true
          description: Name of the freshwater station this hall belongs to.
        description:
          type: string
          description: Optional description of the hall, its purpose, or specific
            characteristics.
        area_sqm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Surface area of the hall in square meters (e.g., 500.75). Optional.
        active:
          type: boolean
          default: true
          description: Indicates if the hall is currently active and in use.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - freshwater_station
      - freshwater_station_name
      - id
      - name
      - updated_at
    HealthCheckResponse:
      type: object
      description: Serializer for health check API response.
      properties:
        status:
          type: string
          description: Current service status
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the health check
        service:
          type: string
          description: Service name
        version:
          type: string
          description: Service version
        database:
          type: string
          description: Database status
        environment:
          type: string
          description: Environment type
      required:
      - database
      - environment
      - service
      - status
      - timestamp
      - version
    HealthLabSample:
      type: object
      description: |-
        Serializer for the HealthLabSample model.

        Handles creating lab samples with historical batch-container assignment lookup
        based on the sample date.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Includes HealthDecimalFieldsMixin for decimal field validation and
        UserAssignmentMixin for automatic user assignment.

        This serializer handles the complex logic of finding the correct historical
        batch-container assignment based on the sample date, which is crucial for
        accurate record-keeping when lab results may arrive weeks after sampling.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_container_assignment:
          type: integer
          readOnly: true
          description: The specific batch-container assignment active when the sample
            was taken.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_id:
          type: integer
          writeOnly: true
          description: ID of the batch from which the sample was taken. Used to find
            the historical assignment.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container_id:
          type: integer
          writeOnly: true
          description: ID of the container from which the sample was taken. Used to
            find the historical assignment.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        sample_type:
          type: integer
          description: Type of sample collected (references SampleType model).
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        sample_date:
          type: string
          format: date
          description: Date when the sample was collected. Used to find the historical
            batch-container assignment.
        date_sent_to_lab:
          type: string
          format: date
          nullable: true
          description: Date when the sample was sent to the laboratory for analysis.
        date_results_received:
          type: string
          format: date
          nullable: true
          description: Date when the results were received from the laboratory.
        lab_reference_id:
          type: string
          nullable: true
          description: Reference ID assigned by the laboratory for tracking purposes.
        findings_summary:
          type: string
          nullable: true
          description: Summary of the laboratory findings and results.
        quantitative_results:
          nullable: true
          description: Structured JSON data containing quantitative test results.
        attachment:
          type: string
          format: uri
          nullable: true
          description: File attachment for the lab report (e.g., PDF).
        notes:
          type: string
          nullable: true
          description: Additional notes about the sample or results.
        recorded_by:
          type: integer
          nullable: true
          description: User who recorded this lab sample result.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        batch_number:
          type: string
          nullable: true
          readOnly: true
          description: Batch number from the associated batch-container assignment.
        container_name:
          type: string
          nullable: true
          readOnly: true
          description: Container name from the associated batch-container assignment.
        sample_type_name:
          type: string
          nullable: true
          readOnly: true
          description: Name of the sample type.
        recorded_by_username:
          type: string
          nullable: true
          readOnly: true
          description: Username of the person who recorded this sample.
        batch_container_assignment_details:
          type: object
          properties:
            assignment_id:
              type: integer
              maximum: 9223372036854775807
              minimum: -9223372036854775808
            batch_id:
              type: integer
              maximum: 9223372036854775807
              minimum: -9223372036854775808
            container_id:
              type: integer
              maximum: 9223372036854775807
              minimum: -9223372036854775808
            assignment_date:
              type: string
              format: date
            is_active:
              type: boolean
          readOnly: true
          description: Detailed information about the batch-container assignment at
            the time of sampling.
        batch:
          type: object
          additionalProperties: {}
          nullable: true
          description: Retrieve and format the related object's ID and string representation.
          readOnly: true
        container:
          type: object
          additionalProperties: {}
          nullable: true
          description: Retrieve and format the related object's ID and string representation.
          readOnly: true
      required:
      - batch
      - batch_container_assignment
      - batch_container_assignment_details
      - batch_id
      - batch_number
      - container
      - container_id
      - container_name
      - created_at
      - id
      - recorded_by_username
      - sample_date
      - sample_type
      - sample_type_name
      - updated_at
    HealthParameter:
      type: object
      description: |-
        Serializer for the HealthParameter model.

        Uses HealthBaseSerializer for consistent error handling and field management.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Name of the health parameter (e.g., 'Gill Condition', 'Fin
            Condition').
        description_score_1:
          type: string
          description: Description of what score 1 represents for this parameter.
        description_score_2:
          type: string
          description: Description of what score 2 represents for this parameter.
        description_score_3:
          type: string
          description: Description of what score 3 represents for this parameter.
        description_score_4:
          type: string
          description: Description of what score 4 represents for this parameter.
        description_score_5:
          type: string
          description: Description of what score 5 represents for this parameter.
        is_active:
          type: boolean
          default: true
          description: Whether this parameter is currently active and available for
            scoring.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - description_score_1
      - description_score_2
      - description_score_3
      - description_score_4
      - description_score_5
      - id
      - name
      - updated_at
    HealthSamplingEvent:
      type: object
      description: |-
        Serializer for HealthSamplingEvent model.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Includes HealthDecimalFieldsMixin for decimal field validation,
        NestedHealthModelMixin for handling nested models, and
        UserAssignmentMixin for automatic user assignment.

        This serializer handles complex nested data structures for fish health sampling events,
        including individual fish observations and their parameter scores.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        assignment:
          type: integer
          description: The specific batch and container assignment being sampled.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        sampling_date:
          type: string
          format: date
        number_of_fish_sampled:
          type: integer
          description: Target or initially declared number of individual fish to be
            examined in this sampling event.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        avg_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Average weight in grams of sampled fish.
        std_dev_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Standard deviation of weight in grams.
        min_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Minimum weight in grams among sampled fish.
        max_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Maximum weight in grams among sampled fish.
        individual_fish_observations:
          type: array
          items:
            type: object
            additionalProperties: {}
          writeOnly: true
        avg_length_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Average length in centimeters of sampled fish.
        std_dev_length_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Standard deviation of length in centimeters.
        min_length_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Minimum length in centimeters among sampled fish.
        max_length_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Maximum length in centimeters among sampled fish.
        avg_k_factor:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
          readOnly: true
          nullable: true
          description: Average condition factor (K) of sampled fish.
        calculated_sample_size:
          type: integer
          readOnly: true
          nullable: true
          description: Actual number of fish with measurements in this sample.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        notes:
          type: string
          nullable: true
        sampled_by:
          type: integer
          nullable: true
          description: User who conducted the sampling.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_number:
          type: string
          nullable: true
          description: |-
            Get the batch number from the assignment.

            Args:
                obj: The HealthSamplingEvent instance.

            Returns:
                str or None: The batch number, or None if not available.
          readOnly: true
        container_name:
          type: string
          nullable: true
          description: |-
            Get the container name from the assignment.

            Args:
                obj: The HealthSamplingEvent instance.

            Returns:
                str or None: The container name, or None if not available.
          readOnly: true
        sampled_by_username:
          type: string
          nullable: true
          description: |-
            Get the username of the user who performed the sampling.

            Args:
                obj: The HealthSamplingEvent instance.

            Returns:
                str or None: The username, or None if not available.
          readOnly: true
      required:
      - assignment
      - avg_k_factor
      - avg_length_cm
      - avg_weight_g
      - batch_number
      - calculated_sample_size
      - container_name
      - id
      - max_length_cm
      - max_weight_g
      - min_length_cm
      - min_weight_g
      - number_of_fish_sampled
      - sampled_by_username
      - std_dev_length_cm
      - std_dev_weight_g
    IndividualFishObservation:
      type: object
      description: |-
        Serializer for IndividualFishObservation model.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Includes HealthDecimalFieldsMixin for decimal field validation and
        NestedHealthModelMixin for handling nested models.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        sampling_event:
          type: integer
          description: The sampling event this fish observation belongs to.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        fish_identifier:
          type: string
          description: Unique identifier for the individual fish within this sampling
            event.
        weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Weight of the fish in grams.
        length_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Length of the fish in centimeters.
        parameter_scores:
          type: array
          items:
            $ref: '#/components/schemas/FishParameterScore'
          description: List of parameter scores for this fish observation.
        calculated_k_factor:
          type: number
          format: double
          nullable: true
          description: Calculated K-factor (condition factor) based on weight and
            length measurements.
          readOnly: true
      required:
      - calculated_k_factor
      - fish_identifier
      - id
      - length_cm
      - sampling_event
      - weight_g
    JournalEntry:
      type: object
      description: |-
        Serializer for JournalEntry model.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Handles journal entries for health observations, incidents, and notes related to batches.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          description: The batch this journal entry is associated with.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          nullable: true
          description: Optional container this journal entry is associated with. Can
            be null if the entry applies to the entire batch.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        entry_date:
          type: string
          format: date
          description: Date when the observation or incident occurred. Defaults to
            current date if not provided.
        description:
          type: string
          description: Detailed description of the health observation or incident.
        category:
          type: string
          description: Category of the journal entry (e.g., 'observation', 'incident',
            'treatment').
        severity:
          type: string
          nullable: true
          description: Optional severity level of the incident or observation (e.g.,
            'low', 'medium', 'high').
        resolution_status:
          type: string
          nullable: true
          description: Current status of resolution for this entry (e.g., 'open',
            'in progress', 'resolved').
        resolution_notes:
          type: string
          nullable: true
          description: Notes on how the issue was resolved or is being addressed.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          readOnly: true
          description: User who created the entry.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      required:
      - batch
      - category
      - created_at
      - description
      - id
      - updated_at
      - user
    LiceCount:
      type: object
      description: |-
        Serializer for the LiceCount model.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Records sea lice counts for monitoring parasite loads in fish populations.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          description: The batch for which lice were counted.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          description: The container where the fish were sampled for lice counting.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        user:
          type: integer
          readOnly: true
          description: User who performed the lice count (auto-set from request).
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        count_date:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the lice count was performed (auto-set).
        adult_female_count:
          type: integer
          description: Number of adult female lice counted across all sampled fish.
          minimum: 0
          maximum: 9223372036854775807
        adult_male_count:
          type: integer
          description: Number of adult male lice counted across all sampled fish.
          minimum: 0
          maximum: 9223372036854775807
        juvenile_count:
          type: integer
          description: Number of juvenile lice counted across all sampled fish.
          minimum: 0
          maximum: 9223372036854775807
        fish_sampled:
          type: integer
          description: Number of fish examined during this lice count.
          minimum: 1
          maximum: 9223372036854775807
        notes:
          type: string
          nullable: true
          description: Additional notes about the lice count or observations.
        average_per_fish:
          type: number
          format: double
          readOnly: true
          description: Calculated average number of lice per fish (total count / fish
            sampled).
      required:
      - adult_female_count
      - adult_male_count
      - average_per_fish
      - batch
      - container
      - count_date
      - fish_sampled
      - id
      - juvenile_count
      - user
    LifeCycleStage:
      type: object
      description: Serializer for the LifeCycleStage model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        species_name:
          type: string
          readOnly: true
        name:
          type: string
          maxLength: 100
        order:
          type: integer
          description: Order in lifecycle (1, 2, 3, etc.)
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description:
          type: string
        expected_weight_min_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Minimum expected weight in grams
        expected_weight_max_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Maximum expected weight in grams
        expected_length_min_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Minimum expected length in centimeters
        expected_length_max_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Maximum expected length in centimeters
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        species:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      required:
      - created_at
      - id
      - name
      - order
      - species
      - species_name
      - updated_at
    MaintenanceTask:
      type: object
      description: Serializer for maintenance tasks.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          description: Container requiring maintenance
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container_name:
          type: string
          readOnly: true
        task_type:
          enum:
          - cleaning
          - repair
          - inspection
          - upgrade
          type: string
          x-spec-enum-id: 410570b92c5a0f68
          description: |-
            Type of maintenance task

            * `cleaning` - Cleaning
            * `repair` - Repair
            * `inspection` - Inspection
            * `upgrade` - Equipment Upgrade
        scheduled_date:
          type: string
          format: date-time
          description: Planned execution date
        completed_date:
          type: string
          format: date-time
          nullable: true
          description: Actual completion date
        notes:
          type: string
          description: Additional details about the task
        created_by:
          type: integer
          readOnly: true
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        is_overdue:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - container
      - container_name
      - created_at
      - created_by
      - id
      - is_overdue
      - scheduled_date
      - task_type
      - updated_at
    MortalityEvent:
      type: object
      description: Serializer for the MortalityEvent model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_number:
          type: string
          readOnly: true
        cause_display:
          type: string
          readOnly: true
        batch_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get basic batch information.
          readOnly: true
        container_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get basic container information.
          readOnly: true
        reason_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get mortality reason information.
          readOnly: true
        event_date:
          type: string
          format: date
        count:
          type: integer
          description: Number of mortalities
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Estimated biomass lost in kg
        cause:
          enum:
          - DISEASE
          - HANDLING
          - PREDATION
          - ENVIRONMENTAL
          - UNKNOWN
          - OTHER
          type: string
          description: |-
            * `DISEASE` - Disease
            * `HANDLING` - Handling
            * `PREDATION` - Predation
            * `ENVIRONMENTAL` - Environmental
            * `UNKNOWN` - Unknown
            * `OTHER` - Other
          x-spec-enum-id: b3b2643a63213431
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        batch:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
      required:
      - batch
      - batch_info
      - batch_number
      - biomass_kg
      - cause_display
      - container_info
      - count
      - created_at
      - event_date
      - id
      - reason_info
      - updated_at
    MortalityModel:
      type: object
      description: Enhanced serializer for mortality models with validation.
      properties:
        model_id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Model name (e.g., 'Low Mortality')
          maxLength: 255
        frequency:
          enum:
          - daily
          - weekly
          type: string
          x-spec-enum-id: 08c46281c65a0e09
          description: |-
            Rate application frequency

            * `daily` - Daily
            * `weekly` - Weekly
        rate:
          type: number
          format: double
          maximum: 100
          minimum: 0
          description: Mortality rate percentage (e.g., 0.1)
        stage_overrides:
          type: array
          items:
            $ref: '#/components/schemas/MortalityModelStage'
          readOnly: true
        effective_annual_rate:
          type: number
          format: double
          description: Calculate effective annual mortality rate.
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - effective_annual_rate
      - frequency
      - model_id
      - name
      - rate
      - stage_overrides
      - updated_at
    MortalityModelStage:
      type: object
      description: Serializer for stage-specific mortality rates.
      properties:
        lifecycle_stage:
          enum:
          - egg
          - alevin
          - fry
          - parr
          - smolt
          - post_smolt
          - harvest
          type: string
          description: |-
            * `egg` - Egg
            * `alevin` - Alevin
            * `fry` - Fry
            * `parr` - Parr
            * `smolt` - Smolt
            * `post_smolt` - Post-Smolt
            * `harvest` - Harvest
          x-spec-enum-id: a2dcb497cd836340
        stage_display:
          type: string
          readOnly: true
        daily_rate_percent:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,3})?$
          description: Daily mortality rate as percentage for this stage
        weekly_rate_percent:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,3})?$
          nullable: true
          description: Weekly mortality rate as percentage (calculated if not provided)
      required:
      - daily_rate_percent
      - lifecycle_stage
      - stage_display
    MortalityReason:
      type: object
      description: |-
        Serializer for the MortalityReason model.

        Uses HealthBaseSerializer for consistent error handling and field management.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Name of the mortality reason (e.g., 'Disease', 'Predation').
        description:
          type: string
          description: Detailed description of the mortality reason.
      required:
      - description
      - id
      - name
    MortalityRecord:
      type: object
      description: |-
        Serializer for the MortalityRecord model.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Records mortality events including count, reason, and associated batch/container.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          description: The batch associated with this mortality record.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          description: The container where the mortality occurred.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container_name:
          type: string
          nullable: true
          description: Name of the container where the mortality occurred.
          readOnly: true
        event_date:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the mortality event was recorded (auto-set).
        count:
          type: integer
          description: Number of mortalities recorded in this event.
          minimum: 1
          maximum: 9223372036854775807
        reason:
          type: integer
          description: Reason for the mortality (references MortalityReason model).
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        notes:
          type: string
          nullable: true
          description: Additional notes about the mortality event.
      required:
      - batch
      - container
      - container_name
      - count
      - event_date
      - id
      - reason
    NestedContainer:
      type: object
      description: Minimal serializer for nested Container representation.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          maxLength: 100
        active:
          type: boolean
      required:
      - id
      - name
    NestedLifeCycleStage:
      type: object
      description: Minimal serializer for nested LifeCycleStage representation.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          maxLength: 100
      required:
      - id
      - name
    PaginatedAreaList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Area'
    PaginatedBatchCompositionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BatchComposition'
    PaginatedBatchContainerAssignmentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BatchContainerAssignment'
    PaginatedBatchFeedingSummaryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BatchFeedingSummary'
    PaginatedBatchList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Batch'
    PaginatedBatchParentageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BatchParentage'
    PaginatedBatchTransferList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BatchTransfer'
    PaginatedBiologicalConstraintsList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BiologicalConstraints'
    PaginatedBreedingPairList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BreedingPair'
    PaginatedBreedingPlanList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BreedingPlan'
    PaginatedBreedingTraitPriorityList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BreedingTraitPriority'
    PaginatedBroodstockFishList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BroodstockFish'
    PaginatedContainerList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Container'
    PaginatedContainerTypeList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ContainerType'
    PaginatedEggProductionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/EggProduction'
    PaginatedEggSupplierList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/EggSupplier'
    PaginatedEnvironmentalParameterList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentalParameter'
    PaginatedEnvironmentalReadingList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentalReading'
    PaginatedExternalEggBatchList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ExternalEggBatch'
    PaginatedFCRModelList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FCRModel'
    PaginatedFCRTrendsList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FCRTrends'
    PaginatedFeedContainerList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FeedContainer'
    PaginatedFeedContainerStockList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FeedContainerStock'
    PaginatedFeedList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Feed'
    PaginatedFeedPurchaseList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FeedPurchase'
    PaginatedFeedStockList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FeedStock'
    PaginatedFeedingEventList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FeedingEvent'
    PaginatedFishMovementList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FishMovement'
    PaginatedFishParameterScoreList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FishParameterScore'
    PaginatedFreshwaterStationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FreshwaterStation'
    PaginatedGeographyList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Geography'
    PaginatedGrowthSampleList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/GrowthSample'
    PaginatedHallList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Hall'
    PaginatedHealthLabSampleList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/HealthLabSample'
    PaginatedHealthParameterList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/HealthParameter'
    PaginatedHealthSamplingEventList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/HealthSamplingEvent'
    PaginatedIndividualFishObservationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/IndividualFishObservation'
    PaginatedJournalEntryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/JournalEntry'
    PaginatedLiceCountList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/LiceCount'
    PaginatedLifeCycleStageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/LifeCycleStage'
    PaginatedMaintenanceTaskList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/MaintenanceTask'
    PaginatedMortalityEventList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/MortalityEvent'
    PaginatedMortalityModelList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/MortalityModel'
    PaginatedMortalityReasonList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/MortalityReason'
    PaginatedMortalityRecordList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/MortalityRecord'
    PaginatedPhotoperiodDataList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PhotoperiodData'
    PaginatedSampleTypeList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/SampleType'
    PaginatedScenarioList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Scenario'
    PaginatedSensorList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Sensor'
    PaginatedSpeciesList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Species'
    PaginatedStageTransitionEnvironmentalList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/StageTransitionEnvironmental'
    PaginatedTGCModelList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TGCModel'
    PaginatedTemperatureProfileList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TemperatureProfile'
    PaginatedTreatmentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Treatment'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PaginatedVaccinationTypeList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/VaccinationType'
    PaginatedWeatherDataList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/WeatherData'
    PatchedArea:
      type: object
      description: Serializer for the Area model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Unique name for the sea area.
          maxLength: 100
        geography:
          type: integer
          description: ID of the geographical zone this area belongs to.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        geography_details:
          allOf:
          - $ref: '#/components/schemas/Geography'
          readOnly: true
          description: Detailed information about the associated geographical zone.
        latitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
          description: Latitude of the area's central point (e.g., 60.123456). Must
            be between -90 and 90.
        longitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
          description: Longitude of the area's central point (e.g., 5.123456). Must
            be between -180 and 180.
        max_biomass:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          description: Maximum permissible biomass capacity for this area, in kilograms
            (e.g., 100000.00).
        active:
          type: boolean
          default: true
          description: Indicates if the area is currently active and available for
            use.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedBatch:
      type: object
      description: |-
        Serializer for the Batch model.

        Handles the representation of Batch instances, including their core attributes,
        related model information (species name), and dynamically calculated metrics
        such as population count, biomass, average weight, current lifecycle stage,
        days in production, and active containers.
      properties:
        id:
          type: integer
          readOnly: true
          description: Unique read-only identifier for the batch record.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_number:
          type: string
          description: User-defined unique identifier or code for the batch (e.g.,
            BATCH2023-001).
          maxLength: 50
        species:
          type: integer
          description: Foreign key ID of the species for this batch. Must be an existing
            Species ID.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        species_name:
          type: string
          readOnly: true
          description: Name of the species associated with this batch (read-only).
        lifecycle_stage:
          type: integer
          description: Foreign key ID of the initial or primary lifecycle stage for
            this batch. Must be an existing LifeCycleStage ID appropriate for the
            selected species.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        status:
          enum:
          - ACTIVE
          - COMPLETED
          - TERMINATED
          type: string
          x-spec-enum-id: be4893b9f73c6949
          description: |-
            Current status of the batch. Refer to model choices (e.g., 'Planned', 'Active', 'Harvested').

            * `ACTIVE` - Active
            * `COMPLETED` - Completed
            * `TERMINATED` - Terminated
        batch_type:
          enum:
          - STANDARD
          - MIXED
          type: string
          x-spec-enum-id: e0ac211a2e181f56
          description: |-
            Type or category of the batch. Refer to model choices (e.g., 'Production', 'Experimental').

            * `STANDARD` - Standard
            * `MIXED` - Mixed Population
        start_date:
          type: string
          format: date
          description: Date when the batch officially started or was created (YYYY-MM-DD).
        expected_end_date:
          type: string
          format: date
          nullable: true
          description: Anticipated end date for the batch (e.g., for harvest or transfer)
            (YYYY-MM-DD). Defaults to 30 days after start_date if not provided.
        notes:
          type: string
          description: Any general notes or comments about the batch (optional).
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp of when the batch record was created (read-only).
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp of the last update to the batch record (read-only).
        calculated_population_count:
          type: integer
          readOnly: true
          description: Total current population count for this batch, calculated from
            active assignments (read-only).
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        calculated_biomass_kg:
          type: number
          format: double
          readOnly: true
          description: Total current biomass in kilograms for this batch, calculated
            from active assignments and formatted to two decimal places (read-only).
        calculated_avg_weight_g:
          type: number
          format: double
          readOnly: true
          description: Current average weight in grams for individuals in this batch,
            calculated from active assignments and formatted to two decimal places
            (read-only).
        current_lifecycle_stage:
          nullable: true
          readOnly: true
          description: The current lifecycle stage of the batch (ID, name, order),
            determined by the latest active assignment (read-only).
        days_in_production:
          type: integer
          readOnly: true
          description: Number of days the batch has been in production since its start
            date (read-only).
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        active_containers:
          type: array
          items:
            type: integer
            maximum: 9223372036854775807
            minimum: -9223372036854775808
          readOnly: true
          description: List of IDs of containers currently actively holding this batch
            (read-only).
    PatchedBatchComposition:
      type: object
      description: Serializer for the BatchComposition model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        mixed_batch:
          allOf:
          - $ref: '#/components/schemas/CompositionNestedBatch'
          readOnly: true
        mixed_batch_id:
          type: integer
          writeOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        source_batch:
          allOf:
          - $ref: '#/components/schemas/CompositionNestedBatch'
          readOnly: true
        source_batch_id:
          type: integer
          writeOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        population_count:
          type: integer
          minimum: 0
          description: Number of fish from this source batch in the mixed batch
          maximum: 9223372036854775807
        biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Biomass from this source batch in the mixed batch
        percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedBatchContainerAssignment:
      type: object
      description: Serializer for BatchContainerAssignment model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          allOf:
          - $ref: '#/components/schemas/AssignmentNestedBatch'
          readOnly: true
        batch_id:
          type: integer
          writeOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          allOf:
          - $ref: '#/components/schemas/NestedContainer'
          readOnly: true
        container_id:
          type: integer
          writeOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        lifecycle_stage:
          allOf:
          - $ref: '#/components/schemas/NestedLifeCycleStage'
          readOnly: true
        lifecycle_stage_id:
          type: integer
          writeOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        assignment_date:
          type: string
          format: date
        population_count:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
        avg_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        is_active:
          type: boolean
          description: Whether this assignment is current/active
        notes:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        batch_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get basic batch information.
          readOnly: true
        container_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get basic container information.
          readOnly: true
        lifecycle_stage_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get lifecycle stage information.
          readOnly: true
    PatchedBatchParentage:
      type: object
      description: Serializer for batch parentage.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_number:
          type: string
          readOnly: true
        egg_production:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        egg_batch_id:
          type: string
          readOnly: true
        egg_source_type:
          type: string
          readOnly: true
        assignment_date:
          type: string
          format: date-time
          description: Date eggs assigned to batch
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedBatchTransfer:
      type: object
      description: Serializer for the BatchTransfer model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        source_batch_number:
          type: string
          readOnly: true
        destination_batch_number:
          type: string
          readOnly: true
        transfer_type_display:
          type: string
          readOnly: true
        source_lifecycle_stage_name:
          type: string
          readOnly: true
        destination_lifecycle_stage_name:
          type: string
          readOnly: true
        source_container_name:
          type: string
          readOnly: true
        destination_container_name:
          type: string
          readOnly: true
        source_batch_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get basic source batch information.
          readOnly: true
        destination_batch_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get basic destination batch information.
          readOnly: true
        transfer_type:
          enum:
          - CONTAINER
          - LIFECYCLE
          - SPLIT
          - MERGE
          - MIXED_TRANSFER
          type: string
          description: |-
            * `CONTAINER` - Container Transfer
            * `LIFECYCLE` - Lifecycle Stage Change
            * `SPLIT` - Batch Split
            * `MERGE` - Batch Merge
            * `MIXED_TRANSFER` - Mixed Batch Transfer
          x-spec-enum-id: 84d720b57a7d7b00
        transfer_date:
          type: string
          format: date
        source_count:
          type: integer
          description: Population count before transfer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        transferred_count:
          type: integer
          description: Number of fish transferred
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        mortality_count:
          type: integer
          description: Number of mortalities during transfer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        source_biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Biomass before transfer in kg
        transferred_biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Biomass transferred in kg
        is_emergency_mixing:
          type: boolean
          description: Whether this was an emergency mixing of different batches
        notes:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        source_batch:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        destination_batch:
          type: integer
          nullable: true
          description: Destination batch for merges or new batch for splits; may be
            null for simple transfers
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        source_assignment:
          type: integer
          nullable: true
          description: Source batch-container assignment
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        destination_assignment:
          type: integer
          nullable: true
          description: Destination batch-container assignment
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        source_lifecycle_stage:
          type: integer
          description: Lifecycle stage before transfer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        destination_lifecycle_stage:
          type: integer
          nullable: true
          description: New lifecycle stage after transfer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
    PatchedBiologicalConstraints:
      type: object
      description: Serializer for biological constraint sets.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Name for this constraint set (e.g., 'Bakkafrost Standard',
            'Conservative')
          maxLength: 100
        description:
          type: string
          description: Description of this constraint set
        is_active:
          type: boolean
          description: Whether this constraint set is currently active
        stage_constraints:
          type: array
          items:
            type: object
            additionalProperties: {}
          description: Get stage constraints in a structured format.
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedBreedingPair:
      type: object
      description: Serializer for breeding pairs.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        plan:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        plan_name:
          type: string
          readOnly: true
        male_fish:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        male_fish_display:
          type: string
          readOnly: true
        female_fish:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        female_fish_display:
          type: string
          readOnly: true
        pairing_date:
          type: string
          format: date-time
          description: Date of pairing
        progeny_count:
          type: integer
          nullable: true
          description: Number of offspring produced
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        egg_production_count:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedBreedingPlan:
      type: object
      description: Serializer for breeding plans.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Plan name (e.g., 'Winter 2023 Breeding')
          maxLength: 100
        start_date:
          type: string
          format: date-time
          description: Plan start date
        end_date:
          type: string
          format: date-time
          description: Plan end date
        objectives:
          type: string
          description: Plan objectives and goals
        geneticist_notes:
          type: string
          description: Technical notes from geneticist about breeding priorities and
            trait selection
        breeder_instructions:
          type: string
          description: Clear instructions for breeders on execution of the breeding
            plan
        is_active:
          type: boolean
          readOnly: true
        trait_priorities:
          type: array
          items:
            $ref: '#/components/schemas/BreedingTraitPriority'
          readOnly: true
        breeding_pair_count:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_by:
          type: integer
          readOnly: true
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedBreedingTraitPriority:
      type: object
      description: Serializer for breeding trait priorities.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        plan:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        trait_name:
          enum:
          - growth_rate
          - disease_resistance
          - size
          - fertility
          type: string
          x-spec-enum-id: 88a9a543458ce27f
          description: |-
            Trait to prioritize

            * `growth_rate` - Growth Rate
            * `disease_resistance` - Disease Resistance
            * `size` - Size
            * `fertility` - Fertility
        trait_display:
          type: string
          readOnly: true
        priority_weight:
          type: number
          format: double
          maximum: 1
          minimum: 0
          description: Weight from 0 to 1 (e.g., 0.7)
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedBroodstockFish:
      type: object
      description: Serializer for broodstock fish.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          description: Current container housing the fish
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container_name:
          type: string
          readOnly: true
        traits:
          description: Basic traits (e.g., growth_rate, size)
        health_status:
          enum:
          - healthy
          - monitored
          - sick
          - deceased
          type: string
          x-spec-enum-id: f6dd9f80b09f5c06
          description: |-
            Current health status

            * `healthy` - Healthy
            * `monitored` - Monitored
            * `sick` - Sick
            * `deceased` - Deceased
        movement_count:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedContainer:
      type: object
      description: Serializer for the Container model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Unique name for the container (e.g., Tank A1, Pen 3).
          maxLength: 100
        container_type:
          type: integer
          description: ID of the container type (e.g., tank, pen, tray).
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container_type_name:
          type: string
          readOnly: true
          description: Name of the container type.
        hall:
          type: integer
          nullable: true
          description: ID of the hall this container is located in (if applicable).
            Mutually exclusive with 'area'.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        hall_name:
          type: string
          readOnly: true
          nullable: true
          description: Name of the hall this container is located in.
        area:
          type: integer
          nullable: true
          description: ID of the sea area this container is located in (if applicable).
            Mutually exclusive with 'hall'.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        area_name:
          type: string
          readOnly: true
          nullable: true
          description: Name of the sea area this container is located in.
        volume_m3:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Volume of the container in cubic meters (e.g., 150.75).
        max_biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Maximum recommended biomass capacity for this container in
            kilograms (e.g., 5000.00).
        feed_recommendations_enabled:
          type: boolean
          default: true
          description: Indicates if automatic feed recommendations are enabled for
            this container.
        active:
          type: boolean
          default: true
          description: Indicates if the container is currently active and in use.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedContainerType:
      type: object
      description: Serializer for the ContainerType model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Unique name for the container type (e.g., 'Circular Tank 10m',
            'Square Pen 20x20').
          maxLength: 100
        category:
          enum:
          - TANK
          - PEN
          - TRAY
          - OTHER
          type: string
          x-spec-enum-id: 656f258b59896f76
          description: |-
            Category of the container type (e.g., TANK, PEN, TRAY).

            * `TANK` - Tank
            * `PEN` - Pen
            * `TRAY` - Tray
            * `OTHER` - Other
        category_display:
          type: string
          readOnly: true
          description: Human-readable display name for the category.
        max_volume_m3:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Maximum design volume of this container type in cubic meters
            (e.g., 100.50).
        description:
          type: string
          description: Optional description of the container type, its characteristics,
            or usage notes.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedEggProduction:
      type: object
      description: Serializer for egg production.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        pair:
          type: integer
          nullable: true
          description: Breeding pair (null for external eggs)
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        pair_display:
          type: string
          readOnly: true
        egg_batch_id:
          type: string
          description: Unique egg batch identifier
          maxLength: 50
        egg_count:
          type: integer
          minimum: 0
          description: Number of eggs
          maximum: 9223372036854775807
        production_date:
          type: string
          format: date-time
          description: Date produced or acquired
        destination_station:
          type: integer
          nullable: true
          description: Destination freshwater station
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        source_type:
          enum:
          - internal
          - external
          type: string
          x-spec-enum-id: e094a11876888b4b
          description: |-
            Internal or external source

            * `internal` - Internal
            * `external` - External
        external_batch:
          allOf:
          - $ref: '#/components/schemas/ExternalEggBatch'
          readOnly: true
        batch_assignment_count:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedEggSupplier:
      type: object
      description: Serializer for egg suppliers.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Supplier name
          maxLength: 100
        contact_details:
          type: string
          description: Contact information (phone, email, address)
        certifications:
          type: string
          description: Certifications and quality standards
        batch_count:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedEnvironmentalParameter:
      type: object
      description: |-
        Serializer for the EnvironmentalParameter model.

        Handles environmental parameters that define acceptable ranges for various
        water quality and environmental metrics in aquaculture operations.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Name of the environmental parameter (e.g., 'Dissolved Oxygen',
            'Temperature').
        unit:
          type: string
          description: Unit of measurement for this parameter (e.g., 'mg/L', '°C').
        description:
          type: string
          nullable: true
          description: Detailed description of the parameter and its importance in
            aquaculture.
        min_value:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
          nullable: true
          description: Minimum acceptable value for this parameter. Values below this
            trigger alerts.
        max_value:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
          nullable: true
          description: Maximum acceptable value for this parameter. Values above this
            trigger alerts.
        optimal_min:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
          nullable: true
          description: Minimum optimal value for this parameter. Values in the optimal
            range are ideal for fish health.
        optimal_max:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
          nullable: true
          description: Maximum optimal value for this parameter. Values in the optimal
            range are ideal for fish health.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedEnvironmentalReading:
      type: object
      description: |-
        Serializer for the EnvironmentalReading model.

        Handles TimescaleDB hypertable data with special attention to the time column.
        This serializer manages time-series environmental readings from sensors and manual measurements.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        parameter_name:
          type: string
          readOnly: true
          description: Name of the environmental parameter being measured.
        container_name:
          type: string
          readOnly: true
          description: Name of the container where the reading was taken.
        batch_name:
          type: string
          readOnly: true
          description: Name/number of the batch associated with this reading.
        sensor_name:
          type: string
          readOnly: true
          description: Name of the sensor that recorded this reading, if applicable.
        parameter:
          type: integer
          description: The environmental parameter being measured (references EnvironmentalParameter
            model).
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          description: The container where the reading was taken.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          nullable: true
          description: Optional batch associated with this reading.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        sensor:
          type: integer
          nullable: true
          description: Optional sensor that recorded this reading. Required if is_manual
            is False.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        reading_time:
          type: string
          format: date-time
          description: Timestamp when the reading was taken. Used as the time dimension
            in TimescaleDB.
        value:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
          description: The measured value of the parameter.
        is_manual:
          type: boolean
          default: false
          description: Whether this reading was taken manually (true) or by an automated
            sensor (false).
        notes:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        batch_container_assignment:
          type: integer
          nullable: true
          description: Direct link to the batch-container assignment for precise salmon
            CV tracking
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        recorded_by:
          type: integer
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
    PatchedExternalEggBatch:
      type: object
      description: Serializer for external egg batches.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        egg_production:
          type: integer
          description: Link to egg production record
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        supplier:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        supplier_name:
          type: string
          readOnly: true
        batch_number:
          type: string
          description: Supplier's batch ID
          maxLength: 50
        provenance_data:
          type: string
          description: Source farm and transport details
        egg_count:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedFCRModel:
      type: object
      description: Enhanced serializer for FCR models with validation.
      properties:
        model_id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Model name (e.g., 'Standard FCR')
          maxLength: 255
        stages:
          type: array
          items:
            $ref: '#/components/schemas/FCRModelStage'
          readOnly: true
        total_duration:
          type: integer
          description: Calculate total duration across all stages.
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        stage_coverage:
          type: object
          additionalProperties: {}
          description: Check which lifecycle stages are covered.
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedFeed:
      type: object
      description: |-
        Serializer for the Feed model.

        Provides CRUD operations for feed types used in aquaculture operations.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          maxLength: 100
        brand:
          type: string
          maxLength: 100
        size_category:
          enum:
          - MICRO
          - SMALL
          - MEDIUM
          - LARGE
          type: string
          description: |-
            * `MICRO` - Micro
            * `SMALL` - Small
            * `MEDIUM` - Medium
            * `LARGE` - Large
          x-spec-enum-id: 0ead716df78cf17d
        pellet_size_mm:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Pellet size in millimeters
        protein_percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Protein content percentage
        fat_percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Fat content percentage
        carbohydrate_percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Carbohydrate content percentage
        description:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedFeedContainer:
      type: object
      description: Serializer for the FeedContainer model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Unique name for the feed container (e.g., 'Silo 1', 'Feed Barge
            Alpha').
          maxLength: 100
        container_type:
          enum:
          - SILO
          - BARGE
          - TANK
          - OTHER
          type: string
          x-spec-enum-id: f0c42b84f75e37ff
          description: |-
            Type of the feed container (e.g., SILO, BARGE, TANK).

            * `SILO` - Silo
            * `BARGE` - Barge
            * `TANK` - Tank
            * `OTHER` - Other
        container_type_display:
          type: string
          readOnly: true
          description: Human-readable display name for the container type.
        hall:
          type: integer
          nullable: true
          description: ID of the hall this feed container is associated with (if applicable).
            Mutually exclusive with 'area'.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        hall_name:
          type: string
          readOnly: true
          nullable: true
          description: Name of the hall this feed container is associated with.
        area:
          type: integer
          nullable: true
          description: ID of the sea area this feed container is associated with (if
            applicable). Mutually exclusive with 'hall'.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        area_name:
          type: string
          readOnly: true
          nullable: true
          description: Name of the sea area this feed container is associated with.
        capacity_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Total capacity of the feed container in kilograms (e.g., 50000.00).
        active:
          type: boolean
          default: true
          description: Indicates if the feed container is currently active and in
            use.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedFeedContainerStock:
      type: object
      description: |-
        Serializer for FeedContainerStock model.

        Handles FIFO inventory tracking for feed batches in containers.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed_container:
          type: integer
          description: Feed container where this batch is stored
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed_container_name:
          type: string
          readOnly: true
          description: Name of the feed container
        feed_purchase:
          type: integer
          description: Original purchase batch this stock comes from
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed_purchase_batch:
          type: string
          readOnly: true
          description: Feed purchase batch number
        feed_type:
          type: string
          readOnly: true
          description: Type of feed
        quantity_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Remaining quantity of this feed batch in the container (kg)
        entry_date:
          type: string
          format: date-time
          description: Date and time when this feed batch was added to the container
        cost_per_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          description: Cost per kg from the original purchase
        total_value:
          type: number
          format: double
          nullable: true
          description: Total value of remaining stock (quantity_kg * cost_per_kg)
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedFeedPurchase:
      type: object
      description: |-
        Serializer for the FeedPurchase model.

        Provides CRUD operations for feed purchase records.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed_name:
          type: string
          readOnly: true
        purchase_date:
          type: string
          format: date
        quantity_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Amount of feed purchased in kilograms
        cost_per_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Cost per kilogram
        supplier:
          type: string
          maxLength: 100
        batch_number:
          type: string
          description: Supplier's batch number
          maxLength: 100
        expiry_date:
          type: string
          format: date
          nullable: true
        notes:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedFeedStock:
      type: object
      description: |-
        Serializer for the FeedStock model.

        Provides CRUD operations for feed stock levels in feed containers.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed_name:
          type: string
          readOnly: true
        feed_container:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed_container_name:
          type: string
          readOnly: true
        current_quantity_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Current amount of feed in stock (kg)
        reorder_threshold_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Threshold for reordering (kg)
        updated_at:
          type: string
          format: date-time
          readOnly: true
        notes:
          type: string
        needs_reorder:
          type: boolean
          readOnly: true
    PatchedFeedingEvent:
      type: object
      description: |-
        Serializer for the FeedingEvent model.

        Provides CRUD operations for feeding events with validation and stock
        updates.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_name:
          type: string
          readOnly: true
        batch_assignment:
          type: integer
          nullable: true
          description: The specific batch-container assignment this feeding applies
            to
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          description: Container where feeding occurred
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container_name:
          type: string
          readOnly: true
        feed:
          type: integer
          description: Feed type used
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feed_name:
          type: string
          readOnly: true
        feed_stock:
          type: integer
          nullable: true
          description: Stock source for this feed
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        feeding_date:
          type: string
          format: date
        feeding_time:
          type: string
          format: time
        amount_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
          description: Amount of feed given in kilograms
        batch_biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Batch biomass at feeding time (auto-populated from latest assignment)
        feeding_percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,6})?$
          readOnly: true
          description: Feed amount as percentage of biomass (auto-calculated)
        feed_cost:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          description: Cost of feed consumed (calculated via FIFO)
        method:
          enum:
          - MANUAL
          - AUTOMATIC
          - BROADCAST
          type: string
          description: |-
            * `MANUAL` - Manual
            * `AUTOMATIC` - Automatic Feeder
            * `BROADCAST` - Broadcast
          x-spec-enum-id: 037132121c393c6e
        notes:
          type: string
        recorded_by:
          type: integer
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        recorded_by_username:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedFishMovement:
      type: object
      description: Serializer for fish movements.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        fish:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        fish_display:
          type: string
          readOnly: true
        from_container:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        from_container_name:
          type: string
          readOnly: true
        to_container:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        to_container_name:
          type: string
          readOnly: true
        movement_date:
          type: string
          format: date-time
          description: Date and time of movement
        moved_by:
          type: integer
          readOnly: true
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        notes:
          type: string
          description: Details about the movement
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedFishParameterScore:
      type: object
      description: |-
        Serializer for FishParameterScore model.

        Uses HealthBaseSerializer for consistent error handling and field management.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        parameter:
          type: integer
          description: ID of the health parameter being scored. Must reference an
            active parameter.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        parameter_name:
          type: string
          readOnly: true
          description: Name of the health parameter being scored.
        score:
          type: integer
          description: Score value (typically 1-5) representing the health assessment
            for this parameter.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedFreshwaterStation:
      type: object
      description: Serializer for the FreshwaterStation model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Unique name for the freshwater station (e.g., 'Main Hatchery',
            'Broodstock Unit Alpha').
          maxLength: 100
        station_type:
          enum:
          - FRESHWATER
          - BROODSTOCK
          type: string
          x-spec-enum-id: 20dcb2314fc68e78
          description: |-
            Type of the station (e.g., FRESHWATER, BROODSTOCK).

            * `FRESHWATER` - Freshwater
            * `BROODSTOCK` - Broodstock
        station_type_display:
          type: string
          readOnly: true
          description: Human-readable display name for the station type.
        geography:
          type: integer
          description: ID of the geographical region this station belongs to.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        geography_name:
          type: string
          readOnly: true
          description: Name of the geographical region this station belongs to.
        latitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
          description: Latitude of the station (e.g., 62.000000). Usually set via
            map interface.
        longitude:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,6})?$
          description: Longitude of the station (e.g., -6.783333). Usually set via
            map interface.
        description:
          type: string
          description: Optional description of the freshwater station, its facilities,
            or purpose.
        active:
          type: boolean
          default: true
          description: Indicates if the freshwater station is currently active and
            operational.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedGeography:
      type: object
      description: Serializer for the Geography model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Unique name for the geographical region (e.g., 'Faroe Islands',
            'Scotland West').
          maxLength: 100
        description:
          type: string
          description: Optional description of the geographical region, its boundaries,
            or specific characteristics.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedGrowthSample:
      type: object
      description: Serializer for GrowthSample model with calculated fields.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        assignment:
          type: integer
          description: The specific container assignment this sample was taken from
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        assignment_details:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get detailed information about the batch container assignment.
          readOnly: true
        sample_date:
          type: string
          format: date
        sample_size:
          type: integer
          description: Number of fish sampled
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        avg_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Average weight (g) calculated from individual measurements
            if provided, otherwise manually entered.
        avg_length_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Average length (cm) calculated from individual measurements
            if provided, otherwise manually entered.
        std_deviation_weight:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Standard deviation of weight (g) calculated from individual
            measurements if provided.
        std_deviation_length:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Standard deviation of length (cm) calculated from individual
            measurements if provided.
        min_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Minimum weight in grams
        max_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Maximum weight in grams
        condition_factor:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Average Condition Factor (K) calculated from individual measurements
            if provided.
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        individual_lengths:
          type: array
          items:
            type: string
            format: decimal
            pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          writeOnly: true
          maxItems: 1000
        individual_weights:
          type: array
          items:
            type: string
            format: decimal
            pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          writeOnly: true
          maxItems: 1000
    PatchedHall:
      type: object
      description: Serializer for the Hall model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Unique name for the hall within its station (e.g., 'Hatchery
            Hall A', 'Grow-out Section 1').
          maxLength: 100
        freshwater_station:
          type: integer
          description: ID of the freshwater station this hall belongs to.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        freshwater_station_name:
          type: string
          readOnly: true
          description: Name of the freshwater station this hall belongs to.
        description:
          type: string
          description: Optional description of the hall, its purpose, or specific
            characteristics.
        area_sqm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Surface area of the hall in square meters (e.g., 500.75). Optional.
        active:
          type: boolean
          default: true
          description: Indicates if the hall is currently active and in use.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedHealthLabSample:
      type: object
      description: |-
        Serializer for the HealthLabSample model.

        Handles creating lab samples with historical batch-container assignment lookup
        based on the sample date.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Includes HealthDecimalFieldsMixin for decimal field validation and
        UserAssignmentMixin for automatic user assignment.

        This serializer handles the complex logic of finding the correct historical
        batch-container assignment based on the sample date, which is crucial for
        accurate record-keeping when lab results may arrive weeks after sampling.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_container_assignment:
          type: integer
          readOnly: true
          description: The specific batch-container assignment active when the sample
            was taken.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_id:
          type: integer
          writeOnly: true
          description: ID of the batch from which the sample was taken. Used to find
            the historical assignment.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container_id:
          type: integer
          writeOnly: true
          description: ID of the container from which the sample was taken. Used to
            find the historical assignment.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        sample_type:
          type: integer
          description: Type of sample collected (references SampleType model).
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        sample_date:
          type: string
          format: date
          description: Date when the sample was collected. Used to find the historical
            batch-container assignment.
        date_sent_to_lab:
          type: string
          format: date
          nullable: true
          description: Date when the sample was sent to the laboratory for analysis.
        date_results_received:
          type: string
          format: date
          nullable: true
          description: Date when the results were received from the laboratory.
        lab_reference_id:
          type: string
          nullable: true
          description: Reference ID assigned by the laboratory for tracking purposes.
        findings_summary:
          type: string
          nullable: true
          description: Summary of the laboratory findings and results.
        quantitative_results:
          nullable: true
          description: Structured JSON data containing quantitative test results.
        attachment:
          type: string
          format: uri
          nullable: true
          description: File attachment for the lab report (e.g., PDF).
        notes:
          type: string
          nullable: true
          description: Additional notes about the sample or results.
        recorded_by:
          type: integer
          nullable: true
          description: User who recorded this lab sample result.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        batch_number:
          type: string
          nullable: true
          readOnly: true
          description: Batch number from the associated batch-container assignment.
        container_name:
          type: string
          nullable: true
          readOnly: true
          description: Container name from the associated batch-container assignment.
        sample_type_name:
          type: string
          nullable: true
          readOnly: true
          description: Name of the sample type.
        recorded_by_username:
          type: string
          nullable: true
          readOnly: true
          description: Username of the person who recorded this sample.
        batch_container_assignment_details:
          type: object
          properties:
            assignment_id:
              type: integer
              maximum: 9223372036854775807
              minimum: -9223372036854775808
            batch_id:
              type: integer
              maximum: 9223372036854775807
              minimum: -9223372036854775808
            container_id:
              type: integer
              maximum: 9223372036854775807
              minimum: -9223372036854775808
            assignment_date:
              type: string
              format: date
            is_active:
              type: boolean
          readOnly: true
          description: Detailed information about the batch-container assignment at
            the time of sampling.
        batch:
          type: object
          additionalProperties: {}
          nullable: true
          description: Retrieve and format the related object's ID and string representation.
          readOnly: true
        container:
          type: object
          additionalProperties: {}
          nullable: true
          description: Retrieve and format the related object's ID and string representation.
          readOnly: true
    PatchedHealthParameter:
      type: object
      description: |-
        Serializer for the HealthParameter model.

        Uses HealthBaseSerializer for consistent error handling and field management.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Name of the health parameter (e.g., 'Gill Condition', 'Fin
            Condition').
        description_score_1:
          type: string
          description: Description of what score 1 represents for this parameter.
        description_score_2:
          type: string
          description: Description of what score 2 represents for this parameter.
        description_score_3:
          type: string
          description: Description of what score 3 represents for this parameter.
        description_score_4:
          type: string
          description: Description of what score 4 represents for this parameter.
        description_score_5:
          type: string
          description: Description of what score 5 represents for this parameter.
        is_active:
          type: boolean
          default: true
          description: Whether this parameter is currently active and available for
            scoring.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedHealthSamplingEvent:
      type: object
      description: |-
        Serializer for HealthSamplingEvent model.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Includes HealthDecimalFieldsMixin for decimal field validation,
        NestedHealthModelMixin for handling nested models, and
        UserAssignmentMixin for automatic user assignment.

        This serializer handles complex nested data structures for fish health sampling events,
        including individual fish observations and their parameter scores.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        assignment:
          type: integer
          description: The specific batch and container assignment being sampled.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        sampling_date:
          type: string
          format: date
        number_of_fish_sampled:
          type: integer
          description: Target or initially declared number of individual fish to be
            examined in this sampling event.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        avg_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Average weight in grams of sampled fish.
        std_dev_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Standard deviation of weight in grams.
        min_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Minimum weight in grams among sampled fish.
        max_weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Maximum weight in grams among sampled fish.
        individual_fish_observations:
          type: array
          items:
            type: object
            additionalProperties: {}
          writeOnly: true
        avg_length_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Average length in centimeters of sampled fish.
        std_dev_length_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Standard deviation of length in centimeters.
        min_length_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Minimum length in centimeters among sampled fish.
        max_length_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          description: Maximum length in centimeters among sampled fish.
        avg_k_factor:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,4})?$
          readOnly: true
          nullable: true
          description: Average condition factor (K) of sampled fish.
        calculated_sample_size:
          type: integer
          readOnly: true
          nullable: true
          description: Actual number of fish with measurements in this sample.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        notes:
          type: string
          nullable: true
        sampled_by:
          type: integer
          nullable: true
          description: User who conducted the sampling.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_number:
          type: string
          nullable: true
          description: |-
            Get the batch number from the assignment.

            Args:
                obj: The HealthSamplingEvent instance.

            Returns:
                str or None: The batch number, or None if not available.
          readOnly: true
        container_name:
          type: string
          nullable: true
          description: |-
            Get the container name from the assignment.

            Args:
                obj: The HealthSamplingEvent instance.

            Returns:
                str or None: The container name, or None if not available.
          readOnly: true
        sampled_by_username:
          type: string
          nullable: true
          description: |-
            Get the username of the user who performed the sampling.

            Args:
                obj: The HealthSamplingEvent instance.

            Returns:
                str or None: The username, or None if not available.
          readOnly: true
    PatchedIndividualFishObservation:
      type: object
      description: |-
        Serializer for IndividualFishObservation model.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Includes HealthDecimalFieldsMixin for decimal field validation and
        NestedHealthModelMixin for handling nested models.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        sampling_event:
          type: integer
          description: The sampling event this fish observation belongs to.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        fish_identifier:
          type: string
          description: Unique identifier for the individual fish within this sampling
            event.
        weight_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Weight of the fish in grams.
        length_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Length of the fish in centimeters.
        parameter_scores:
          type: array
          items:
            $ref: '#/components/schemas/FishParameterScore'
          description: List of parameter scores for this fish observation.
        calculated_k_factor:
          type: number
          format: double
          nullable: true
          description: Calculated K-factor (condition factor) based on weight and
            length measurements.
          readOnly: true
    PatchedJournalEntry:
      type: object
      description: |-
        Serializer for JournalEntry model.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Handles journal entries for health observations, incidents, and notes related to batches.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          description: The batch this journal entry is associated with.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          nullable: true
          description: Optional container this journal entry is associated with. Can
            be null if the entry applies to the entire batch.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        entry_date:
          type: string
          format: date
          description: Date when the observation or incident occurred. Defaults to
            current date if not provided.
        description:
          type: string
          description: Detailed description of the health observation or incident.
        category:
          type: string
          description: Category of the journal entry (e.g., 'observation', 'incident',
            'treatment').
        severity:
          type: string
          nullable: true
          description: Optional severity level of the incident or observation (e.g.,
            'low', 'medium', 'high').
        resolution_status:
          type: string
          nullable: true
          description: Current status of resolution for this entry (e.g., 'open',
            'in progress', 'resolved').
        resolution_notes:
          type: string
          nullable: true
          description: Notes on how the issue was resolved or is being addressed.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          readOnly: true
          description: User who created the entry.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
    PatchedLiceCount:
      type: object
      description: |-
        Serializer for the LiceCount model.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Records sea lice counts for monitoring parasite loads in fish populations.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          description: The batch for which lice were counted.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          description: The container where the fish were sampled for lice counting.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        user:
          type: integer
          readOnly: true
          description: User who performed the lice count (auto-set from request).
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        count_date:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the lice count was performed (auto-set).
        adult_female_count:
          type: integer
          description: Number of adult female lice counted across all sampled fish.
          minimum: 0
          maximum: 9223372036854775807
        adult_male_count:
          type: integer
          description: Number of adult male lice counted across all sampled fish.
          minimum: 0
          maximum: 9223372036854775807
        juvenile_count:
          type: integer
          description: Number of juvenile lice counted across all sampled fish.
          minimum: 0
          maximum: 9223372036854775807
        fish_sampled:
          type: integer
          description: Number of fish examined during this lice count.
          minimum: 1
          maximum: 9223372036854775807
        notes:
          type: string
          nullable: true
          description: Additional notes about the lice count or observations.
        average_per_fish:
          type: number
          format: double
          readOnly: true
          description: Calculated average number of lice per fish (total count / fish
            sampled).
    PatchedLifeCycleStage:
      type: object
      description: Serializer for the LifeCycleStage model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        species_name:
          type: string
          readOnly: true
        name:
          type: string
          maxLength: 100
        order:
          type: integer
          description: Order in lifecycle (1, 2, 3, etc.)
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description:
          type: string
        expected_weight_min_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Minimum expected weight in grams
        expected_weight_max_g:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Maximum expected weight in grams
        expected_length_min_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Minimum expected length in centimeters
        expected_length_max_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Maximum expected length in centimeters
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        species:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
    PatchedMaintenanceTask:
      type: object
      description: Serializer for maintenance tasks.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          description: Container requiring maintenance
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container_name:
          type: string
          readOnly: true
        task_type:
          enum:
          - cleaning
          - repair
          - inspection
          - upgrade
          type: string
          x-spec-enum-id: 410570b92c5a0f68
          description: |-
            Type of maintenance task

            * `cleaning` - Cleaning
            * `repair` - Repair
            * `inspection` - Inspection
            * `upgrade` - Equipment Upgrade
        scheduled_date:
          type: string
          format: date-time
          description: Planned execution date
        completed_date:
          type: string
          format: date-time
          nullable: true
          description: Actual completion date
        notes:
          type: string
          description: Additional details about the task
        created_by:
          type: integer
          readOnly: true
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        is_overdue:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedMortalityEvent:
      type: object
      description: Serializer for the MortalityEvent model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_number:
          type: string
          readOnly: true
        cause_display:
          type: string
          readOnly: true
        batch_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get basic batch information.
          readOnly: true
        container_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get basic container information.
          readOnly: true
        reason_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get mortality reason information.
          readOnly: true
        event_date:
          type: string
          format: date
        count:
          type: integer
          description: Number of mortalities
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        biomass_kg:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Estimated biomass lost in kg
        cause:
          enum:
          - DISEASE
          - HANDLING
          - PREDATION
          - ENVIRONMENTAL
          - UNKNOWN
          - OTHER
          type: string
          description: |-
            * `DISEASE` - Disease
            * `HANDLING` - Handling
            * `PREDATION` - Predation
            * `ENVIRONMENTAL` - Environmental
            * `UNKNOWN` - Unknown
            * `OTHER` - Other
          x-spec-enum-id: b3b2643a63213431
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        batch:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
    PatchedMortalityModel:
      type: object
      description: Enhanced serializer for mortality models with validation.
      properties:
        model_id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Model name (e.g., 'Low Mortality')
          maxLength: 255
        frequency:
          enum:
          - daily
          - weekly
          type: string
          x-spec-enum-id: 08c46281c65a0e09
          description: |-
            Rate application frequency

            * `daily` - Daily
            * `weekly` - Weekly
        rate:
          type: number
          format: double
          maximum: 100
          minimum: 0
          description: Mortality rate percentage (e.g., 0.1)
        stage_overrides:
          type: array
          items:
            $ref: '#/components/schemas/MortalityModelStage'
          readOnly: true
        effective_annual_rate:
          type: number
          format: double
          description: Calculate effective annual mortality rate.
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedMortalityReason:
      type: object
      description: |-
        Serializer for the MortalityReason model.

        Uses HealthBaseSerializer for consistent error handling and field management.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Name of the mortality reason (e.g., 'Disease', 'Predation').
        description:
          type: string
          description: Detailed description of the mortality reason.
    PatchedMortalityRecord:
      type: object
      description: |-
        Serializer for the MortalityRecord model.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Records mortality events including count, reason, and associated batch/container.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          description: The batch associated with this mortality record.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          description: The container where the mortality occurred.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container_name:
          type: string
          nullable: true
          description: Name of the container where the mortality occurred.
          readOnly: true
        event_date:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the mortality event was recorded (auto-set).
        count:
          type: integer
          description: Number of mortalities recorded in this event.
          minimum: 1
          maximum: 9223372036854775807
        reason:
          type: integer
          description: Reason for the mortality (references MortalityReason model).
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        notes:
          type: string
          nullable: true
          description: Additional notes about the mortality event.
    PatchedPhotoperiodData:
      type: object
      description: |-
        Serializer for the PhotoperiodData model.

        Handles photoperiod (day/night cycle) data for different areas,
        which is important for managing fish growth and maturation.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        area_name:
          type: string
          readOnly: true
          description: Name of the area where this photoperiod data applies.
        area:
          type: integer
          description: The area where this photoperiod data applies.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        date:
          type: string
          format: date
          description: Date for which this photoperiod data is recorded.
        day_length_hours:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          description: Natural day length in hours (0-24).
        artificial_light_start:
          type: string
          format: time
          nullable: true
          description: Time when artificial lighting starts, if used.
        artificial_light_end:
          type: string
          format: time
          nullable: true
          description: Time when artificial lighting ends, if used.
        notes:
          type: string
          nullable: true
          description: Additional notes about the photoperiod conditions.
        light_intensity:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Light intensity in lux
        is_interpolated:
          type: boolean
          description: Whether this data point was interpolated rather than measured
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedSampleType:
      type: object
      description: |-
        Serializer for the SampleType model.

        Uses HealthBaseSerializer for consistent error handling and field management.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Name of the sample type (e.g., 'Gill Swab', 'Blood Sample').
        description:
          type: string
          description: Detailed description of the sample type, including collection
            methods and purpose.
    PatchedScenario:
      type: object
      description: Enhanced serializer for scenarios with comprehensive validation.
      properties:
        scenario_id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Scenario name (e.g., 'Scotland April Sim')
          maxLength: 255
        start_date:
          type: string
          format: date
          description: Simulation start date
        duration_days:
          type: integer
          minimum: 1
          description: Total simulation days (e.g., 900)
          maximum: 9223372036854775807
        initial_count:
          type: integer
          minimum: 1
          description: Initial fish count (e.g., 10000)
          maximum: 9223372036854775807
        initial_weight:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Initial weight in grams (e.g., 50)
        genotype:
          type: string
          description: Fish genotype (e.g., 'SalmoBreed')
          maxLength: 255
        supplier:
          type: string
          description: Fish supplier (e.g., 'AquaGen')
          maxLength: 255
        tgc_model:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        fcr_model:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        mortality_model:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          nullable: true
          description: Optional link to existing batch for real-data initialization
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        biological_constraints:
          type: integer
          nullable: true
          description: Biological constraints to use for validation
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        biological_constraints_info:
          allOf:
          - $ref: '#/components/schemas/BiologicalConstraints'
          readOnly: true
        model_changes:
          type: array
          items:
            $ref: '#/components/schemas/ScenarioModelChange'
          readOnly: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_by_name:
          type: string
          readOnly: true
        initial_stage:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Determine initial lifecycle stage based on weight.
          readOnly: true
        projected_harvest_day:
          type: integer
          nullable: true
          description: Estimate harvest day based on growth model.
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedSensor:
      type: object
      description: Serializer for the Sensor model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: User-defined name for the sensor (e.g., 'Tank 1 Temp Sensor',
            'Oxygen Probe - Pen 5').
          maxLength: 100
        sensor_type:
          enum:
          - TEMPERATURE
          - OXYGEN
          - PH
          - SALINITY
          - CO2
          - OTHER
          type: string
          x-spec-enum-id: 6dac7b248b45213d
          description: |-
            Type of the sensor (e.g., TEMPERATURE, OXYGEN, PH).

            * `TEMPERATURE` - Temperature
            * `OXYGEN` - Oxygen
            * `PH` - pH
            * `SALINITY` - Salinity
            * `CO2` - CO2
            * `OTHER` - Other
        sensor_type_display:
          type: string
          readOnly: true
          description: Human-readable display name for the sensor type.
        container:
          type: integer
          description: ID of the container where this sensor is installed.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container_name:
          type: string
          readOnly: true
          description: Name of the container where this sensor is installed.
        serial_number:
          type: string
          description: Manufacturer's serial number for the sensor. Optional.
          maxLength: 100
        manufacturer:
          type: string
          description: Manufacturer of the sensor. Optional.
          maxLength: 100
        installation_date:
          type: string
          format: date
          nullable: true
          description: 'Date when the sensor was installed. Optional. Format: YYYY-MM-DD.'
        last_calibration_date:
          type: string
          format: date
          nullable: true
          description: 'Date when the sensor was last calibrated. Optional. Format:
            YYYY-MM-DD.'
        active:
          type: boolean
          default: true
          description: Indicates if the sensor is currently active and providing readings.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedSpecies:
      type: object
      description: Serializer for the Species model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          maxLength: 100
        scientific_name:
          type: string
          maxLength: 200
        description:
          type: string
        optimal_temperature_min:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Minimum optimal temperature in °C
        optimal_temperature_max:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Maximum optimal temperature in °C
        optimal_oxygen_min:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Minimum optimal oxygen level in mg/L
        optimal_ph_min:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Minimum optimal pH level
        optimal_ph_max:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Maximum optimal pH level
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedStageTransitionEnvironmental:
      type: object
      description: |-
        Serializer for the StageTransitionEnvironmental model.

        Records environmental conditions during batch transfers between lifecycle stages,
        which is critical for tracking environmental factors during transitions.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_transfer_id:
          type: integer
          readOnly: true
          description: ID of the batch transfer this environmental record is associated
            with.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_transfer:
          type: integer
          description: The batch transfer this environmental record is associated
            with.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        temperature:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Water temperature in degrees Celsius during the transfer.
        oxygen:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Dissolved oxygen level in mg/L during the transfer.
        ph:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,2})?$
          nullable: true
          description: pH level (0-14) during the transfer.
        salinity:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Salinity level in ppt (parts per thousand) during the transfer.
        notes:
          type: string
          nullable: true
          description: Additional notes about environmental conditions during the
            transfer.
        additional_parameters:
          nullable: true
          description: Additional environmental parameters
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedTGCModel:
      type: object
      description: Enhanced serializer for TGC models with validation.
      properties:
        model_id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Model name (e.g., 'Scotland April TGC')
          maxLength: 255
        location:
          type: string
          description: Location (e.g., 'Scotland Site 1')
          maxLength: 255
        release_period:
          type: string
          description: Release timing (e.g., 'April')
          maxLength: 255
        profile:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        profile_name:
          type: string
          readOnly: true
        tgc_value:
          type: number
          format: double
          minimum: 0
          description: TGC coefficient (e.g., 0.025)
        exponent_n:
          type: number
          format: double
          description: Temperature exponent (e.g., 0.33)
        exponent_m:
          type: number
          format: double
          description: Weight exponent (e.g., 0.66)
        stage_overrides:
          type: array
          items:
            $ref: '#/components/schemas/TGCModelStage'
          readOnly: true
        has_temperature_data:
          type: boolean
          description: Check if temperature profile has data.
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedTemperatureProfile:
      type: object
      description: Serializer for temperature profiles with nested readings.
      properties:
        profile_id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Descriptive name (e.g., 'Faroe Islands Winter')
          maxLength: 255
        readings:
          type: array
          items:
            $ref: '#/components/schemas/TemperatureReading'
          readOnly: true
        reading_count:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        date_range:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get the date range of readings.
          readOnly: true
        temperature_summary:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get temperature statistics.
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedTreatment:
      type: object
      description: |-
        Serializer for the Treatment model.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Includes HealthDecimalFieldsMixin for decimal field validation and UserAssignmentMixin
        for automatic user assignment.

        This serializer handles treatment records for fish health management, including
        medications, vaccinations, and other therapeutic interventions.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          description: The batch that received the treatment.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          description: The container where the treatment was administered.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_assignment:
          type: integer
          nullable: true
          description: Optional specific batch-container assignment for this treatment.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        user:
          type: integer
          readOnly: true
          description: User who recorded the treatment.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        treatment_date:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the treatment was administered (auto-set).
        treatment_type:
          enum:
          - medication
          - vaccination
          - physical
          - other
          type: string
          x-spec-enum-id: 69ca009bba5fa388
          description: |-
            Type of treatment administered (e.g., 'medication', 'vaccination').

            * `medication` - Medication
            * `vaccination` - Vaccination
            * `physical` - Physical Treatment
            * `other` - Other
        vaccination_type:
          type: integer
          nullable: true
          description: Specific vaccination type if treatment_type is 'vaccination'.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description:
          type: string
          description: Detailed description of the treatment administered.
        dosage:
          type: string
          description: Dosage amount of the treatment (with units specified in description).
        duration_days:
          type: integer
          nullable: true
          description: Duration of the treatment in days.
          minimum: 0
          maximum: 9223372036854775807
        withholding_period_days:
          type: integer
          nullable: true
          description: Number of days fish must be withheld from harvest after treatment.
          minimum: 0
          maximum: 9223372036854775807
        withholding_end_date:
          type: string
          format: date
          readOnly: true
          description: Calculated end date of the withholding period based on treatment
            date and withholding period days.
        outcome:
          type: string
          nullable: true
          description: Outcome or result of the treatment.
    PatchedUser:
      type: object
      description: |-
        Serializer for the User model.

        Handles user registration, updates, and provides profile data
        nested within the user data.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        full_name:
          type: string
        phone:
          type: string
        geography:
          enum:
          - FO
          - SC
          - ALL
          type: string
          description: |-
            * `FO` - Faroe Islands
            * `SC` - Scotland
            * `ALL` - All Geographies
          x-spec-enum-id: 8dd4678e4b7e8e8d
        subsidiary:
          enum:
          - BS
          - FW
          - FM
          - LG
          - ALL
          type: string
          description: |-
            * `BS` - Broodstock
            * `FW` - Freshwater
            * `FM` - Farming
            * `LG` - Logistics
            * `ALL` - All Subsidiaries
          x-spec-enum-id: 4e135cac36bd030a
        role:
          enum:
          - ADMIN
          - MGR
          - OPR
          - VET
          - QA
          - FIN
          - VIEW
          type: string
          description: |-
            * `ADMIN` - Administrator
            * `MGR` - Manager
            * `OPR` - Operator
            * `VET` - Veterinarian
            * `QA` - Quality Assurance
            * `FIN` - Finance
            * `VIEW` - Viewer
          x-spec-enum-id: 14edb24667015962
        password:
          type: string
          writeOnly: true
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        profile:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
    PatchedUserProfileUpdate:
      type: object
      description: |-
        Serializer for updating UserProfile information.

        Provides a dedicated serializer for profile updates separate from user data.
        Includes all fields from the UserProfile model that should be updatable by users.
      properties:
        full_name:
          type: string
          maxLength: 150
        phone:
          type: string
          nullable: true
          title: Phone number
          maxLength: 20
        profile_picture:
          type: string
          format: uri
          nullable: true
        job_title:
          type: string
          nullable: true
          maxLength: 100
        department:
          type: string
          nullable: true
          maxLength: 100
        geography:
          enum:
          - FO
          - SC
          - ALL
          type: string
          x-spec-enum-id: 8dd4678e4b7e8e8d
          description: |-
            Geographic region access level

            * `FO` - Faroe Islands
            * `SC` - Scotland
            * `ALL` - All Geographies
        subsidiary:
          enum:
          - BS
          - FW
          - FM
          - LG
          - ALL
          type: string
          x-spec-enum-id: 4e135cac36bd030a
          description: |-
            Subsidiary access level

            * `BS` - Broodstock
            * `FW` - Freshwater
            * `FM` - Farming
            * `LG` - Logistics
            * `ALL` - All Subsidiaries
        role:
          enum:
          - ADMIN
          - MGR
          - OPR
          - VET
          - QA
          - FIN
          - VIEW
          type: string
          x-spec-enum-id: 14edb24667015962
          description: |-
            User role and permission level

            * `ADMIN` - Administrator
            * `MGR` - Manager
            * `OPR` - Operator
            * `VET` - Veterinarian
            * `QA` - Quality Assurance
            * `FIN` - Finance
            * `VIEW` - Viewer
        language_preference:
          enum:
          - en
          - fo
          - da
          type: string
          description: |-
            * `en` - English
            * `fo` - Faroese
            * `da` - Danish
          x-spec-enum-id: a6dfd54e4a1eb17f
        date_format_preference:
          enum:
          - DMY
          - MDY
          - YMD
          type: string
          description: |-
            * `DMY` - DD/MM/YYYY
            * `MDY` - MM/DD/YYYY
            * `YMD` - YYYY-MM-DD
          x-spec-enum-id: 11e0f28405e2bb3e
    PatchedVaccinationType:
      type: object
      description: |-
        Serializer for the VaccinationType model.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Handles information about different types of vaccines used in aquaculture.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Name of the vaccination type (e.g., 'PD Vaccine', 'IPN Vaccine').
        manufacturer:
          type: string
          description: Manufacturer or supplier of the vaccine.
        dosage:
          type: string
          nullable: true
          description: Standard dosage information for this vaccine.
        description:
          type: string
          description: Detailed description of the vaccine, including diseases targeted
            and efficacy information.
    PatchedWeatherData:
      type: object
      description: |-
        Serializer for the WeatherData model.

        Handles TimescaleDB hypertable data with special attention to the time column.
        Manages weather data recordings that may affect aquaculture operations.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        area_name:
          type: string
          readOnly: true
          description: Name of the area where this weather data was recorded.
        area:
          type: integer
          description: The area where this weather data was recorded.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the weather data was recorded. Used as the time
            dimension in TimescaleDB.
        temperature:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Air temperature in degrees Celsius.
        wind_speed:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Wind speed in meters per second.
        wind_direction:
          type: integer
          nullable: true
          description: Wind direction in degrees (0-360, where 0/360 is North).
          minimum: 0
          maximum: 360
        precipitation:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Precipitation amount in millimeters.
        wave_height:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Wave height in meters.
        wave_direction:
          type: integer
          nullable: true
          description: Wave direction in degrees (0-360, where 0/360 is North).
          minimum: 0
          maximum: 360
        cloud_cover:
          type: integer
          nullable: true
          description: Cloud cover percentage (0-100).
          minimum: 0
          maximum: 100
        wave_period:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Wave period in seconds
        created_at:
          type: string
          format: date-time
          readOnly: true
    PhotoperiodData:
      type: object
      description: |-
        Serializer for the PhotoperiodData model.

        Handles photoperiod (day/night cycle) data for different areas,
        which is important for managing fish growth and maturation.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        area_name:
          type: string
          readOnly: true
          description: Name of the area where this photoperiod data applies.
        area:
          type: integer
          description: The area where this photoperiod data applies.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        date:
          type: string
          format: date
          description: Date for which this photoperiod data is recorded.
        day_length_hours:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          description: Natural day length in hours (0-24).
        artificial_light_start:
          type: string
          format: time
          nullable: true
          description: Time when artificial lighting starts, if used.
        artificial_light_end:
          type: string
          format: time
          nullable: true
          description: Time when artificial lighting ends, if used.
        notes:
          type: string
          nullable: true
          description: Additional notes about the photoperiod conditions.
        light_intensity:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Light intensity in lux
        is_interpolated:
          type: boolean
          description: Whether this data point was interpolated rather than measured
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - area
      - area_name
      - created_at
      - date
      - day_length_hours
      - id
      - updated_at
    SampleType:
      type: object
      description: |-
        Serializer for the SampleType model.

        Uses HealthBaseSerializer for consistent error handling and field management.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Name of the sample type (e.g., 'Gill Swab', 'Blood Sample').
        description:
          type: string
          description: Detailed description of the sample type, including collection
            methods and purpose.
      required:
      - description
      - id
      - name
    Scenario:
      type: object
      description: Enhanced serializer for scenarios with comprehensive validation.
      properties:
        scenario_id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Scenario name (e.g., 'Scotland April Sim')
          maxLength: 255
        start_date:
          type: string
          format: date
          description: Simulation start date
        duration_days:
          type: integer
          minimum: 1
          description: Total simulation days (e.g., 900)
          maximum: 9223372036854775807
        initial_count:
          type: integer
          minimum: 1
          description: Initial fish count (e.g., 10000)
          maximum: 9223372036854775807
        initial_weight:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Initial weight in grams (e.g., 50)
        genotype:
          type: string
          description: Fish genotype (e.g., 'SalmoBreed')
          maxLength: 255
        supplier:
          type: string
          description: Fish supplier (e.g., 'AquaGen')
          maxLength: 255
        tgc_model:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        fcr_model:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        mortality_model:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          nullable: true
          description: Optional link to existing batch for real-data initialization
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        biological_constraints:
          type: integer
          nullable: true
          description: Biological constraints to use for validation
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        biological_constraints_info:
          allOf:
          - $ref: '#/components/schemas/BiologicalConstraints'
          readOnly: true
        model_changes:
          type: array
          items:
            $ref: '#/components/schemas/ScenarioModelChange'
          readOnly: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_by_name:
          type: string
          readOnly: true
        initial_stage:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Determine initial lifecycle stage based on weight.
          readOnly: true
        projected_harvest_day:
          type: integer
          nullable: true
          description: Estimate harvest day based on growth model.
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - biological_constraints_info
      - created_at
      - created_by
      - created_by_name
      - duration_days
      - fcr_model
      - genotype
      - initial_count
      - initial_stage
      - model_changes
      - mortality_model
      - name
      - projected_harvest_day
      - scenario_id
      - start_date
      - supplier
      - tgc_model
      - updated_at
    ScenarioModelChange:
      type: object
      description: Enhanced serializer for scenario model changes.
      properties:
        change_id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        change_day:
          type: integer
          minimum: 0
          description: Day of change (e.g., 180)
          maximum: 9223372036854775807
        new_tgc_model:
          type: integer
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        new_fcr_model:
          type: integer
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        new_mortality_model:
          type: integer
          nullable: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        change_description:
          type: string
          description: Generate human-readable change description.
          readOnly: true
      required:
      - change_day
      - change_description
      - change_id
    Sensor:
      type: object
      description: Serializer for the Sensor model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: User-defined name for the sensor (e.g., 'Tank 1 Temp Sensor',
            'Oxygen Probe - Pen 5').
          maxLength: 100
        sensor_type:
          enum:
          - TEMPERATURE
          - OXYGEN
          - PH
          - SALINITY
          - CO2
          - OTHER
          type: string
          x-spec-enum-id: 6dac7b248b45213d
          description: |-
            Type of the sensor (e.g., TEMPERATURE, OXYGEN, PH).

            * `TEMPERATURE` - Temperature
            * `OXYGEN` - Oxygen
            * `PH` - pH
            * `SALINITY` - Salinity
            * `CO2` - CO2
            * `OTHER` - Other
        sensor_type_display:
          type: string
          readOnly: true
          description: Human-readable display name for the sensor type.
        container:
          type: integer
          description: ID of the container where this sensor is installed.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container_name:
          type: string
          readOnly: true
          description: Name of the container where this sensor is installed.
        serial_number:
          type: string
          description: Manufacturer's serial number for the sensor. Optional.
          maxLength: 100
        manufacturer:
          type: string
          description: Manufacturer of the sensor. Optional.
          maxLength: 100
        installation_date:
          type: string
          format: date
          nullable: true
          description: 'Date when the sensor was installed. Optional. Format: YYYY-MM-DD.'
        last_calibration_date:
          type: string
          format: date
          nullable: true
          description: 'Date when the sensor was last calibrated. Optional. Format:
            YYYY-MM-DD.'
        active:
          type: boolean
          default: true
          description: Indicates if the sensor is currently active and providing readings.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - container
      - container_name
      - created_at
      - id
      - name
      - sensor_type
      - sensor_type_display
      - updated_at
    Species:
      type: object
      description: Serializer for the Species model.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          maxLength: 100
        scientific_name:
          type: string
          maxLength: 200
        description:
          type: string
        optimal_temperature_min:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Minimum optimal temperature in °C
        optimal_temperature_max:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Maximum optimal temperature in °C
        optimal_oxygen_min:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Minimum optimal oxygen level in mg/L
        optimal_ph_min:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Minimum optimal pH level
        optimal_ph_max:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Maximum optimal pH level
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
      - scientific_name
      - updated_at
    StageTransitionEnvironmental:
      type: object
      description: |-
        Serializer for the StageTransitionEnvironmental model.

        Records environmental conditions during batch transfers between lifecycle stages,
        which is critical for tracking environmental factors during transitions.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_transfer_id:
          type: integer
          readOnly: true
          description: ID of the batch transfer this environmental record is associated
            with.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_transfer:
          type: integer
          description: The batch transfer this environmental record is associated
            with.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        temperature:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Water temperature in degrees Celsius during the transfer.
        oxygen:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Dissolved oxygen level in mg/L during the transfer.
        ph:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,2})?$
          nullable: true
          description: pH level (0-14) during the transfer.
        salinity:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Salinity level in ppt (parts per thousand) during the transfer.
        notes:
          type: string
          nullable: true
          description: Additional notes about environmental conditions during the
            transfer.
        additional_parameters:
          nullable: true
          description: Additional environmental parameters
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - batch_transfer
      - batch_transfer_id
      - created_at
      - id
      - updated_at
    TGCModel:
      type: object
      description: Enhanced serializer for TGC models with validation.
      properties:
        model_id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Model name (e.g., 'Scotland April TGC')
          maxLength: 255
        location:
          type: string
          description: Location (e.g., 'Scotland Site 1')
          maxLength: 255
        release_period:
          type: string
          description: Release timing (e.g., 'April')
          maxLength: 255
        profile:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        profile_name:
          type: string
          readOnly: true
        tgc_value:
          type: number
          format: double
          minimum: 0
          description: TGC coefficient (e.g., 0.025)
        exponent_n:
          type: number
          format: double
          description: Temperature exponent (e.g., 0.33)
        exponent_m:
          type: number
          format: double
          description: Weight exponent (e.g., 0.66)
        stage_overrides:
          type: array
          items:
            $ref: '#/components/schemas/TGCModelStage'
          readOnly: true
        has_temperature_data:
          type: boolean
          description: Check if temperature profile has data.
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - has_temperature_data
      - location
      - model_id
      - name
      - profile
      - profile_name
      - release_period
      - stage_overrides
      - tgc_value
      - updated_at
    TGCModelStage:
      type: object
      description: Serializer for stage-specific TGC overrides.
      properties:
        lifecycle_stage:
          enum:
          - egg
          - alevin
          - fry
          - parr
          - smolt
          - post_smolt
          - harvest
          type: string
          description: |-
            * `egg` - Egg
            * `alevin` - Alevin
            * `fry` - Fry
            * `parr` - Parr
            * `smolt` - Smolt
            * `post_smolt` - Post-Smolt
            * `harvest` - Harvest
          x-spec-enum-id: a2dcb497cd836340
        stage_display:
          type: string
          readOnly: true
        tgc_value:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,4})?$
          description: TGC value for this specific stage
        temperature_exponent:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,2})?$
          description: Temperature exponent (n) for this stage
        weight_exponent:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,2})?$
          description: Weight exponent (m) for this stage
      required:
      - lifecycle_stage
      - stage_display
      - tgc_value
    TemperatureProfile:
      type: object
      description: Serializer for temperature profiles with nested readings.
      properties:
        profile_id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Descriptive name (e.g., 'Faroe Islands Winter')
          maxLength: 255
        readings:
          type: array
          items:
            $ref: '#/components/schemas/TemperatureReading'
          readOnly: true
        reading_count:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        date_range:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get the date range of readings.
          readOnly: true
        temperature_summary:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get temperature statistics.
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - date_range
      - name
      - profile_id
      - reading_count
      - readings
      - temperature_summary
      - updated_at
    TemperatureReading:
      type: object
      description: Serializer for temperature readings with validation.
      properties:
        reading_id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        reading_date:
          type: string
          format: date
          description: Date of the temperature reading
        temperature:
          type: number
          format: double
          description: Temperature value in degrees Celsius (e.g., 12.5)
      required:
      - reading_date
      - reading_id
      - temperature
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    Treatment:
      type: object
      description: |-
        Serializer for the Treatment model.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Includes HealthDecimalFieldsMixin for decimal field validation and UserAssignmentMixin
        for automatic user assignment.

        This serializer handles treatment records for fish health management, including
        medications, vaccinations, and other therapeutic interventions.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch:
          type: integer
          description: The batch that received the treatment.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        container:
          type: integer
          description: The container where the treatment was administered.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        batch_assignment:
          type: integer
          nullable: true
          description: Optional specific batch-container assignment for this treatment.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        user:
          type: integer
          readOnly: true
          description: User who recorded the treatment.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        treatment_date:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the treatment was administered (auto-set).
        treatment_type:
          enum:
          - medication
          - vaccination
          - physical
          - other
          type: string
          x-spec-enum-id: 69ca009bba5fa388
          description: |-
            Type of treatment administered (e.g., 'medication', 'vaccination').

            * `medication` - Medication
            * `vaccination` - Vaccination
            * `physical` - Physical Treatment
            * `other` - Other
        vaccination_type:
          type: integer
          nullable: true
          description: Specific vaccination type if treatment_type is 'vaccination'.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        description:
          type: string
          description: Detailed description of the treatment administered.
        dosage:
          type: string
          description: Dosage amount of the treatment (with units specified in description).
        duration_days:
          type: integer
          nullable: true
          description: Duration of the treatment in days.
          minimum: 0
          maximum: 9223372036854775807
        withholding_period_days:
          type: integer
          nullable: true
          description: Number of days fish must be withheld from harvest after treatment.
          minimum: 0
          maximum: 9223372036854775807
        withholding_end_date:
          type: string
          format: date
          readOnly: true
          description: Calculated end date of the withholding period based on treatment
            date and withholding period days.
        outcome:
          type: string
          nullable: true
          description: Outcome or result of the treatment.
      required:
      - batch
      - container
      - description
      - id
      - treatment_date
      - treatment_type
      - user
      - withholding_end_date
    User:
      type: object
      description: |-
        Serializer for the User model.

        Handles user registration, updates, and provides profile data
        nested within the user data.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        full_name:
          type: string
        phone:
          type: string
        geography:
          enum:
          - FO
          - SC
          - ALL
          type: string
          description: |-
            * `FO` - Faroe Islands
            * `SC` - Scotland
            * `ALL` - All Geographies
          x-spec-enum-id: 8dd4678e4b7e8e8d
        subsidiary:
          enum:
          - BS
          - FW
          - FM
          - LG
          - ALL
          type: string
          description: |-
            * `BS` - Broodstock
            * `FW` - Freshwater
            * `FM` - Farming
            * `LG` - Logistics
            * `ALL` - All Subsidiaries
          x-spec-enum-id: 4e135cac36bd030a
        role:
          enum:
          - ADMIN
          - MGR
          - OPR
          - VET
          - QA
          - FIN
          - VIEW
          type: string
          description: |-
            * `ADMIN` - Administrator
            * `MGR` - Manager
            * `OPR` - Operator
            * `VET` - Veterinarian
            * `QA` - Quality Assurance
            * `FIN` - Finance
            * `VIEW` - Viewer
          x-spec-enum-id: 14edb24667015962
        password:
          type: string
          writeOnly: true
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        profile:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
      required:
      - date_joined
      - email
      - id
      - profile
      - username
    UserCreate:
      type: object
      description: |-
        Serializer for user registration that requires password.

        Extends UserSerializer but makes password field required.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        full_name:
          type: string
        phone:
          type: string
        geography:
          enum:
          - FO
          - SC
          - ALL
          type: string
          description: |-
            * `FO` - Faroe Islands
            * `SC` - Scotland
            * `ALL` - All Geographies
          x-spec-enum-id: 8dd4678e4b7e8e8d
        subsidiary:
          enum:
          - BS
          - FW
          - FM
          - LG
          - ALL
          type: string
          description: |-
            * `BS` - Broodstock
            * `FW` - Freshwater
            * `FM` - Farming
            * `LG` - Logistics
            * `ALL` - All Subsidiaries
          x-spec-enum-id: 4e135cac36bd030a
        role:
          enum:
          - ADMIN
          - MGR
          - OPR
          - VET
          - QA
          - FIN
          - VIEW
          type: string
          description: |-
            * `ADMIN` - Administrator
            * `MGR` - Manager
            * `OPR` - Operator
            * `VET` - Veterinarian
            * `QA` - Quality Assurance
            * `FIN` - Finance
            * `VIEW` - Viewer
          x-spec-enum-id: 14edb24667015962
        password:
          type: string
          writeOnly: true
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        profile:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
      required:
      - date_joined
      - email
      - id
      - password
      - profile
      - username
    UserProfile:
      type: object
      description: |-
        Serializer for the UserProfile model.

        Handles serialization and deserialization of UserProfile instances,
        including user preferences and profile information.
      properties:
        profile_picture:
          type: string
          format: uri
          nullable: true
        job_title:
          type: string
          nullable: true
          maxLength: 100
        department:
          type: string
          nullable: true
          maxLength: 100
        language_preference:
          enum:
          - en
          - fo
          - da
          type: string
          description: |-
            * `en` - English
            * `fo` - Faroese
            * `da` - Danish
          x-spec-enum-id: a6dfd54e4a1eb17f
        date_format_preference:
          enum:
          - DMY
          - MDY
          - YMD
          type: string
          description: |-
            * `DMY` - DD/MM/YYYY
            * `MDY` - MM/DD/YYYY
            * `YMD` - YYYY-MM-DD
          x-spec-enum-id: 11e0f28405e2bb3e
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - updated_at
    UserProfileUpdate:
      type: object
      description: |-
        Serializer for updating UserProfile information.

        Provides a dedicated serializer for profile updates separate from user data.
        Includes all fields from the UserProfile model that should be updatable by users.
      properties:
        full_name:
          type: string
          maxLength: 150
        phone:
          type: string
          nullable: true
          title: Phone number
          maxLength: 20
        profile_picture:
          type: string
          format: uri
          nullable: true
        job_title:
          type: string
          nullable: true
          maxLength: 100
        department:
          type: string
          nullable: true
          maxLength: 100
        geography:
          enum:
          - FO
          - SC
          - ALL
          type: string
          x-spec-enum-id: 8dd4678e4b7e8e8d
          description: |-
            Geographic region access level

            * `FO` - Faroe Islands
            * `SC` - Scotland
            * `ALL` - All Geographies
        subsidiary:
          enum:
          - BS
          - FW
          - FM
          - LG
          - ALL
          type: string
          x-spec-enum-id: 4e135cac36bd030a
          description: |-
            Subsidiary access level

            * `BS` - Broodstock
            * `FW` - Freshwater
            * `FM` - Farming
            * `LG` - Logistics
            * `ALL` - All Subsidiaries
        role:
          enum:
          - ADMIN
          - MGR
          - OPR
          - VET
          - QA
          - FIN
          - VIEW
          type: string
          x-spec-enum-id: 14edb24667015962
          description: |-
            User role and permission level

            * `ADMIN` - Administrator
            * `MGR` - Manager
            * `OPR` - Operator
            * `VET` - Veterinarian
            * `QA` - Quality Assurance
            * `FIN` - Finance
            * `VIEW` - Viewer
        language_preference:
          enum:
          - en
          - fo
          - da
          type: string
          description: |-
            * `en` - English
            * `fo` - Faroese
            * `da` - Danish
          x-spec-enum-id: a6dfd54e4a1eb17f
        date_format_preference:
          enum:
          - DMY
          - MDY
          - YMD
          type: string
          description: |-
            * `DMY` - DD/MM/YYYY
            * `MDY` - MM/DD/YYYY
            * `YMD` - YYYY-MM-DD
          x-spec-enum-id: 11e0f28405e2bb3e
    VaccinationType:
      type: object
      description: |-
        Serializer for the VaccinationType model.

        Uses HealthBaseSerializer for consistent error handling and field management.
        Handles information about different types of vaccines used in aquaculture.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        name:
          type: string
          description: Name of the vaccination type (e.g., 'PD Vaccine', 'IPN Vaccine').
        manufacturer:
          type: string
          description: Manufacturer or supplier of the vaccine.
        dosage:
          type: string
          nullable: true
          description: Standard dosage information for this vaccine.
        description:
          type: string
          description: Detailed description of the vaccine, including diseases targeted
            and efficacy information.
      required:
      - description
      - id
      - manufacturer
      - name
    WeatherData:
      type: object
      description: |-
        Serializer for the WeatherData model.

        Handles TimescaleDB hypertable data with special attention to the time column.
        Manages weather data recordings that may affect aquaculture operations.
      properties:
        id:
          type: integer
          readOnly: true
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        area_name:
          type: string
          readOnly: true
          description: Name of the area where this weather data was recorded.
        area:
          type: integer
          description: The area where this weather data was recorded.
          maximum: 9223372036854775807
          minimum: -9223372036854775808
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the weather data was recorded. Used as the time
            dimension in TimescaleDB.
        temperature:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Air temperature in degrees Celsius.
        wind_speed:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Wind speed in meters per second.
        wind_direction:
          type: integer
          nullable: true
          description: Wind direction in degrees (0-360, where 0/360 is North).
          minimum: 0
          maximum: 360
        precipitation:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Precipitation amount in millimeters.
        wave_height:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Wave height in meters.
        wave_direction:
          type: integer
          nullable: true
          description: Wave direction in degrees (0-360, where 0/360 is North).
          minimum: 0
          maximum: 360
        cloud_cover:
          type: integer
          nullable: true
          description: Cloud cover percentage (0-100).
          minimum: 0
          maximum: 100
        wave_period:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: Wave period in seconds
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - area
      - area_name
      - created_at
      - id
      - timestamp
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
security:
- tokenAuth: []
